// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _MotorCtrl_clockDividerThread_HH_
#define _MotorCtrl_clockDividerThread_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct MotorCtrl_clockDividerThread : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > MotorCtrl_dividerCount_V_i;
    sc_out< sc_lv<32> > MotorCtrl_dividerCount_V_o;
    sc_out< sc_logic > MotorCtrl_dividerCount_V_o_ap_vld;
    sc_out< sc_lv<1> > MotorCtrl_pwmClock_V;
    sc_out< sc_logic > MotorCtrl_pwmClock_V_ap_vld;


    // Module declarations
    MotorCtrl_clockDividerThread(sc_module_name name);
    SC_HAS_PROCESS(MotorCtrl_clockDividerThread);

    ~MotorCtrl_clockDividerThread();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > tmp_7_fu_129_p2;
    sc_signal< sc_lv<1> > tmp_7_reg_135;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_23;
    sc_signal< sc_lv<32> > MotorCtrl_dividerCount_V_assig_fu_122_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_34;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_19;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_MotorCtrl_dividerCount_V_assig_fu_122_p2();
    void thread_MotorCtrl_dividerCount_V_o();
    void thread_MotorCtrl_dividerCount_V_o_ap_vld();
    void thread_MotorCtrl_pwmClock_V();
    void thread_MotorCtrl_pwmClock_V_ap_vld();
    void thread_ap_sig_bdd_23();
    void thread_ap_sig_bdd_34();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_tmp_7_fu_129_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
