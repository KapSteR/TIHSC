/*
 * main.c
 *
 *  Created on: 05/05/2015
 *      Author: Kasper
 */
#include "xparameters.h"
#include "xgpio.h"
#include "led_ip.h"
#include "xscutimer.h"

// Matrix size
#define MSIZE 4

typedef union {
	unsigned char comp[MSIZE];
	unsigned int vect;
} vectorType;

typedef vectorType VectorArray[MSIZE];

void setInputMatrices(VectorArray A, VectorArray B);
void displayMatrix(VectorArray input);
void multiMatrixSoft(VectorArray A, VectorArray B, VectorArray P);
void multiMatrixHard(VectorArray A, VectorArray B, VectorArray P);

VectorArray pInst, aInst, bInst;

int main(void) {

	setInputMatrices(aInst, bInst);

	multiMatrixSoft(aInst,bInst,pInst);

	displayMatrix(pInst);



	return 1;
}
;

void setInputMatrices(VectorArray A, VectorArray B) {

	int row, col, k;
	k = 1;
	for (row = 0; row < MSIZE; ++row) {
		for (col = 0; col < MSIZE; ++col) {
			A[row].comp[col] = k++;
		}
	}

	k = 1;
	for (row = 0; row < MSIZE; ++row) {
		for (col = 0; col < MSIZE; ++col) {
			B[row].comp[col] = k;
		}
		k++;
	}
}

void displayMatrix(VectorArray input) {
	int row, col;

	for (row = 0; row < MSIZE; ++row) {
		xil_printf("[ ");
		for (col = 0; col < MSIZE; ++col) {
			xil_printf("%d ", input[row].comp[col]);
		}
		xil_printf("] \r\n");
	}
	xil_printf("\r\n");
};

void multiMatrixSoft(VectorArray A, VectorArray B, VectorArray P){
	int row, col, k;

	for (row = 0; row < MSIZE; ++row) {
		xil_printf("[ ");
		for (col = 0; col < MSIZE; ++col) {
			P[row].comp[col] = 0;
			for(k = 0; k<MSIZE; ++k) {
				P[row].comp[col] =
						P[row].comp[col] +
						(A[row].comp[k] * B[k].comp[col]);
			}
		}
	}
}

















