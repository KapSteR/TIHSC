/*
 * exercise3.c
 *
 *  Created on: 01/05/2015
 *      Author: Kasper Nielsen
 */

#include "xparameters.h"
#include "xgpio.h"
#include "led_ip.h"
#include "xscutimer.h"

#define ONE_SECOND 325000000 // half of the CPU clock speed
//====================================================

int main(void) {

	// Initialize I/O
	XGpio dip, push;
	int i, dip_check;
	char value, skip;

	xil_printf("-- Start of the Program --\r\n");

	XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID); // Modify this
	XGpio_SetDataDirection(&dip, 1, 0xffffffff);

	XGpio_Initialize(&push, XPAR_BUTTONS_DEVICE_ID); // Modify this
	XGpio_SetDataDirection(&push, 1, 0xffffffff);

	// Initialize Timer
	XScuTimer Timer; /* Cortex A9 SCU Private Timer Instance */

	// PS Timer related definitions
	XScuTimer_Config *ConfigPtr;
	XScuTimer *TimerInstancePtr = &Timer;
	ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	int Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr,
			ConfigPtr->BaseAddr);

	if (Status != XST_SUCCESS) {
		xil_printf("Timer init() failed\r\n");
		return XST_FAILURE;
	}

	// Load timer with delay in multiple of ONE_SECOND
	XScuTimer_LoadTimer(TimerInstancePtr, ONE_SECOND);
	// Set AutoLoad mode
	XScuTimer_EnableAutoReload(TimerInstancePtr);


	// Start console interpreter
	xil_printf("CMD:> ");
	value = inbyte(); // Read char
	skip = inbyte(); //CR
	skip = inbyte(); //LF
	switch (value) {
	case '1':
		dip_check = XGpio_DiscreteRead(&dip, 1);
		LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, dip_check);
		break;

	case '2':

		// Start the timer
		XScuTimer_Start(TimerInstancePtr);

		while (1) {
			// Check timer expired
			if (XScuTimer_IsExpired(TimerInstancePtr)) {
				// clear status bit
				XScuTimer_ClearInterruptStatus(TimerInstancePtr);
				// Code here

			}
		}
		// Stop the timer
		XScuTimer_Stop(TimerInstancePtr);
		break;
	}
	return 0;
}
