// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv2rgb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st9_fsm_2 = 3'b100;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv9_1F0 = 9'b111110000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv18_12A = 18'b100101010;
parameter    ap_const_lv18_80 = 18'b10000000;
parameter    ap_const_lv18_199 = 18'b110011001;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv17_1FF30 = 17'b11111111100110000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv16_FF9C = 16'b1111111110011100;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [31:0] indvar_flatten_reg_194;
reg   [15:0] x_reg_205;
reg   [15:0] y_reg_216;
wire   [31:0] bound_fu_236_p2;
reg   [31:0] bound_reg_635;
wire   [0:0] exitcond_flatten_fu_242_p2;
reg   [0:0] exitcond_flatten_reg_640;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_92;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it5;
wire   [31:0] indvar_flatten_next_fu_247_p2;
wire   [15:0] y_mid2_fu_258_p3;
reg   [15:0] y_mid2_reg_649;
wire   [15:0] x_mid2_fu_272_p3;
reg   [15:0] x_mid2_reg_654;
wire   [15:0] y_3_fu_280_p2;
wire   [63:0] tmp_10_fu_323_p1;
reg   [63:0] tmp_10_reg_666;
reg   [63:0] ap_reg_ppstg_tmp_10_reg_666_pp0_it2;
reg   [63:0] ap_reg_ppstg_tmp_10_reg_666_pp0_it3;
reg   [63:0] ap_reg_ppstg_tmp_10_reg_666_pp0_it4;
reg   [63:0] ap_reg_ppstg_tmp_10_reg_666_pp0_it5;
reg   [7:0] Y_reg_680;
wire   [7:0] D_fu_337_p2;
reg   [7:0] D_reg_695;
reg   [7:0] ap_reg_ppstg_D_reg_695_pp0_it4;
wire   [7:0] E_fu_343_p2;
reg   [7:0] E_reg_702;
wire  signed [17:0] tmp_24_fu_359_p2;
reg  signed [17:0] tmp_24_reg_708;
reg   [1:0] tmp_1_reg_715;
reg   [0:0] tmp_2_reg_720;
reg   [7:0] phitmp_reg_725;
wire  signed [17:0] tmp1_fu_420_p2;
reg  signed [17:0] tmp1_reg_730;
reg   [2:0] tmp_8_reg_735;
reg   [0:0] tmp_11_reg_740;
reg   [7:0] phitmp3_reg_745;
reg   [1:0] tmp_4_reg_750;
reg   [0:0] tmp_5_reg_755;
reg   [7:0] phitmp2_reg_760;
reg   [15:0] x_phi_fu_209_p4;
wire   [15:0] bound_fu_236_p0;
wire   [15:0] bound_fu_236_p1;
wire   [0:0] exitcond_fu_253_p2;
wire   [15:0] x_s_fu_266_p2;
wire   [25:0] tmp_fu_289_p3;
wire   [23:0] tmp_7_fu_300_p3;
wire   [26:0] p_shl9_cast_fu_296_p1;
wire   [26:0] p_shl10_cast_fu_307_p1;
wire   [26:0] p_addr_fu_311_p2;
wire   [26:0] tmp_trn_cast_fu_286_p1;
wire   [26:0] p_addr1_fu_317_p2;
wire   [8:0] tmp_40_cast_fu_328_p1;
wire   [8:0] C_fu_331_p2;
wire  signed [8:0] tmp_22_fu_353_p0;
wire  signed [17:0] tmp_22_fu_353_p2;
wire  signed [7:0] tmp_23_fu_371_p0;
wire  signed [17:0] tmp_23_fu_371_p2;
wire  signed [17:0] tmp_25_fu_377_p2;
wire  signed [7:0] tmp_27_fu_410_p0;
wire  signed [16:0] tmp_27_fu_410_p2;
wire  signed [17:0] tmp_29_cast_fu_416_p1;
wire   [16:0] p_shl_fu_425_p3;
wire   [9:0] p_shl1_fu_436_p3;
wire  signed [17:0] p_shl1_cast_fu_443_p1;
(* use_dsp48 = "no" *) wire  signed [17:0] tmp2_fu_447_p2;
wire  signed [18:0] tmp2_cast_fu_452_p1;
wire  signed [18:0] p_shl_cast_fu_432_p1;
wire  signed [18:0] tmp_29_fu_456_p2;
wire   [0:0] icmp_fu_490_p2;
wire   [0:0] tmp_3_fu_503_p2;
wire   [7:0] p_phitmp_fu_495_p3;
wire  signed [7:0] tmp_26_fu_519_p0;
wire  signed [15:0] tmp_26_fu_519_p2;
wire  signed [17:0] tmp_28_cast_fu_525_p1;
wire  signed [17:0] tmp_28_fu_529_p2;
wire   [0:0] icmp2_fu_562_p2;
wire   [0:0] tmp_9_fu_575_p2;
wire   [7:0] p_phitmp3_fu_567_p3;
wire   [0:0] icmp1_fu_588_p2;
wire   [0:0] tmp_6_fu_601_p2;
wire   [7:0] p_phitmp2_fu_593_p3;
reg    ap_sig_cseq_ST_st9_fsm_2;
reg    ap_sig_bdd_392;
reg   [2:0] ap_NS_fsm;
wire   [31:0] bound_fu_236_p00;
wire   [31:0] bound_fu_236_p10;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_242_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_242_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_242_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

/// ap_reg_ppiten_pp0_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_242_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_194 <= indvar_flatten_next_fu_247_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten_reg_194 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_640 == ap_const_lv1_0))) begin
        x_reg_205 <= x_mid2_reg_654;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        x_reg_205 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_242_p2 == ap_const_lv1_0))) begin
        y_reg_216 <= y_3_fu_280_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        y_reg_216 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it2 == ap_const_lv1_0)) begin
        D_reg_695 <= D_fu_337_p2;
        E_reg_702 <= E_fu_343_p2;
        tmp_24_reg_708[1] <= tmp_24_fu_359_p2[1];
tmp_24_reg_708[2] <= tmp_24_fu_359_p2[2];
tmp_24_reg_708[3] <= tmp_24_fu_359_p2[3];
tmp_24_reg_708[4] <= tmp_24_fu_359_p2[4];
tmp_24_reg_708[5] <= tmp_24_fu_359_p2[5];
tmp_24_reg_708[6] <= tmp_24_fu_359_p2[6];
tmp_24_reg_708[7] <= tmp_24_fu_359_p2[7];
tmp_24_reg_708[8] <= tmp_24_fu_359_p2[8];
tmp_24_reg_708[9] <= tmp_24_fu_359_p2[9];
tmp_24_reg_708[10] <= tmp_24_fu_359_p2[10];
tmp_24_reg_708[11] <= tmp_24_fu_359_p2[11];
tmp_24_reg_708[12] <= tmp_24_fu_359_p2[12];
tmp_24_reg_708[13] <= tmp_24_fu_359_p2[13];
tmp_24_reg_708[14] <= tmp_24_fu_359_p2[14];
tmp_24_reg_708[15] <= tmp_24_fu_359_p2[15];
tmp_24_reg_708[16] <= tmp_24_fu_359_p2[16];
tmp_24_reg_708[17] <= tmp_24_fu_359_p2[17];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it1 == ap_const_lv1_0)) begin
        Y_reg_680 <= in_channels_ch1_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_D_reg_695_pp0_it4 <= D_reg_695;
        ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it1;
        ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it2;
        ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it3;
        ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it5 <= ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4;
        ap_reg_ppstg_tmp_10_reg_666_pp0_it2[0] <= tmp_10_reg_666[0];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[1] <= tmp_10_reg_666[1];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[2] <= tmp_10_reg_666[2];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[3] <= tmp_10_reg_666[3];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[4] <= tmp_10_reg_666[4];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[5] <= tmp_10_reg_666[5];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[6] <= tmp_10_reg_666[6];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[7] <= tmp_10_reg_666[7];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[8] <= tmp_10_reg_666[8];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[9] <= tmp_10_reg_666[9];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[10] <= tmp_10_reg_666[10];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[11] <= tmp_10_reg_666[11];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[12] <= tmp_10_reg_666[12];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[13] <= tmp_10_reg_666[13];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[14] <= tmp_10_reg_666[14];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[15] <= tmp_10_reg_666[15];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[16] <= tmp_10_reg_666[16];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[17] <= tmp_10_reg_666[17];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[18] <= tmp_10_reg_666[18];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[19] <= tmp_10_reg_666[19];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[20] <= tmp_10_reg_666[20];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[21] <= tmp_10_reg_666[21];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[22] <= tmp_10_reg_666[22];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[23] <= tmp_10_reg_666[23];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[24] <= tmp_10_reg_666[24];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[25] <= tmp_10_reg_666[25];
ap_reg_ppstg_tmp_10_reg_666_pp0_it2[26] <= tmp_10_reg_666[26];
        ap_reg_ppstg_tmp_10_reg_666_pp0_it3[0] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[0];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[1] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[1];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[2] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[2];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[3] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[3];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[4] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[4];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[5] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[5];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[6] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[6];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[7] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[7];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[8] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[8];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[9] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[9];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[10] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[10];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[11] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[11];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[12] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[12];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[13] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[13];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[14] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[14];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[15] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[15];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[16] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[16];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[17] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[17];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[18] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[18];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[19] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[19];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[20] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[20];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[21] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[21];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[22] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[22];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[23] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[23];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[24] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[24];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[25] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[25];
ap_reg_ppstg_tmp_10_reg_666_pp0_it3[26] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2[26];
        ap_reg_ppstg_tmp_10_reg_666_pp0_it4[0] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[0];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[1] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[1];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[2] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[2];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[3] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[3];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[4] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[4];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[5] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[5];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[6] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[6];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[7] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[7];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[8] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[8];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[9] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[9];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[10] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[10];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[11] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[11];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[12] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[12];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[13] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[13];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[14] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[14];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[15] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[15];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[16] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[16];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[17] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[17];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[18] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[18];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[19] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[19];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[20] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[20];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[21] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[21];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[22] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[22];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[23] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[23];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[24] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[24];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[25] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[25];
ap_reg_ppstg_tmp_10_reg_666_pp0_it4[26] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3[26];
        ap_reg_ppstg_tmp_10_reg_666_pp0_it5[0] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[0];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[1] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[1];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[2] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[2];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[3] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[3];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[4] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[4];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[5] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[5];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[6] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[6];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[7] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[7];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[8] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[8];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[9] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[9];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[10] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[10];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[11] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[11];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[12] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[12];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[13] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[13];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[14] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[14];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[15] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[15];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[16] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[16];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[17] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[17];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[18] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[18];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[19] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[19];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[20] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[20];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[21] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[21];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[22] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[22];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[23] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[23];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[24] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[24];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[25] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[25];
ap_reg_ppstg_tmp_10_reg_666_pp0_it5[26] <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4[26];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it1 <= exitcond_flatten_reg_640;
        exitcond_flatten_reg_640 <= exitcond_flatten_fu_242_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bound_reg_635 <= bound_fu_236_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 == ap_const_lv1_0)) begin
        phitmp2_reg_760 <= {{tmp_28_fu_529_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_4_reg_750 <= {{tmp_28_fu_529_p2[ap_const_lv32_11 : ap_const_lv32_10]}};
        tmp_5_reg_755 <= tmp_28_fu_529_p2[ap_const_lv32_11];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it3 == ap_const_lv1_0)) begin
        phitmp3_reg_745 <= {{tmp_29_fu_456_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        phitmp_reg_725 <= {{tmp_25_fu_377_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp1_reg_730[1] <= tmp1_fu_420_p2[1];
tmp1_reg_730[2] <= tmp1_fu_420_p2[2];
tmp1_reg_730[3] <= tmp1_fu_420_p2[3];
tmp1_reg_730[4] <= tmp1_fu_420_p2[4];
tmp1_reg_730[5] <= tmp1_fu_420_p2[5];
tmp1_reg_730[6] <= tmp1_fu_420_p2[6];
tmp1_reg_730[7] <= tmp1_fu_420_p2[7];
tmp1_reg_730[8] <= tmp1_fu_420_p2[8];
tmp1_reg_730[9] <= tmp1_fu_420_p2[9];
tmp1_reg_730[10] <= tmp1_fu_420_p2[10];
tmp1_reg_730[11] <= tmp1_fu_420_p2[11];
tmp1_reg_730[12] <= tmp1_fu_420_p2[12];
tmp1_reg_730[13] <= tmp1_fu_420_p2[13];
tmp1_reg_730[14] <= tmp1_fu_420_p2[14];
tmp1_reg_730[15] <= tmp1_fu_420_p2[15];
tmp1_reg_730[16] <= tmp1_fu_420_p2[16];
tmp1_reg_730[17] <= tmp1_fu_420_p2[17];
        tmp_11_reg_740 <= tmp_29_fu_456_p2[ap_const_lv32_12];
        tmp_1_reg_715 <= {{tmp_25_fu_377_p2[ap_const_lv32_11 : ap_const_lv32_10]}};
        tmp_2_reg_720 <= tmp_25_fu_377_p2[ap_const_lv32_11];
        tmp_8_reg_735 <= {{tmp_29_fu_456_p2[ap_const_lv32_12 : ap_const_lv32_10]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_reg_640 == ap_const_lv1_0))) begin
        tmp_10_reg_666[0] <= tmp_10_fu_323_p1[0];
tmp_10_reg_666[1] <= tmp_10_fu_323_p1[1];
tmp_10_reg_666[2] <= tmp_10_fu_323_p1[2];
tmp_10_reg_666[3] <= tmp_10_fu_323_p1[3];
tmp_10_reg_666[4] <= tmp_10_fu_323_p1[4];
tmp_10_reg_666[5] <= tmp_10_fu_323_p1[5];
tmp_10_reg_666[6] <= tmp_10_fu_323_p1[6];
tmp_10_reg_666[7] <= tmp_10_fu_323_p1[7];
tmp_10_reg_666[8] <= tmp_10_fu_323_p1[8];
tmp_10_reg_666[9] <= tmp_10_fu_323_p1[9];
tmp_10_reg_666[10] <= tmp_10_fu_323_p1[10];
tmp_10_reg_666[11] <= tmp_10_fu_323_p1[11];
tmp_10_reg_666[12] <= tmp_10_fu_323_p1[12];
tmp_10_reg_666[13] <= tmp_10_fu_323_p1[13];
tmp_10_reg_666[14] <= tmp_10_fu_323_p1[14];
tmp_10_reg_666[15] <= tmp_10_fu_323_p1[15];
tmp_10_reg_666[16] <= tmp_10_fu_323_p1[16];
tmp_10_reg_666[17] <= tmp_10_fu_323_p1[17];
tmp_10_reg_666[18] <= tmp_10_fu_323_p1[18];
tmp_10_reg_666[19] <= tmp_10_fu_323_p1[19];
tmp_10_reg_666[20] <= tmp_10_fu_323_p1[20];
tmp_10_reg_666[21] <= tmp_10_fu_323_p1[21];
tmp_10_reg_666[22] <= tmp_10_fu_323_p1[22];
tmp_10_reg_666[23] <= tmp_10_fu_323_p1[23];
tmp_10_reg_666[24] <= tmp_10_fu_323_p1[24];
tmp_10_reg_666[25] <= tmp_10_fu_323_p1[25];
tmp_10_reg_666[26] <= tmp_10_fu_323_p1[26];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_242_p2 == ap_const_lv1_0))) begin
        x_mid2_reg_654 <= x_mid2_fu_272_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_242_p2 == ap_const_lv1_0))) begin
        y_mid2_reg_649 <= y_mid2_fu_258_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st9_fsm_2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_92)
begin
    if (ap_sig_bdd_92) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_2 assign process. ///
always @ (ap_sig_bdd_392)
begin
    if (ap_sig_bdd_392) begin
        ap_sig_cseq_ST_st9_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_2 = ap_const_logic_0;
    end
end

/// in_channels_ch1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        in_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch2_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it2)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) begin
        in_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch3_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it2)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) begin
        in_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it5)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) begin
        out_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it5 or ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & (ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 == ap_const_lv1_0))) begin
        out_channels_ch1_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it6)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) begin
        out_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it6 or ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & (ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it5 == ap_const_lv1_0))) begin
        out_channels_ch2_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it5)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) begin
        out_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it5 or ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & (ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 == ap_const_lv1_0))) begin
        out_channels_ch3_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_we0 = ap_const_logic_0;
    end
end

/// x_phi_fu_209_p4 assign process. ///
always @ (x_reg_205 or exitcond_flatten_reg_640 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or x_mid2_reg_654)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_640 == ap_const_lv1_0))) begin
        x_phi_fu_209_p4 = x_mid2_reg_654;
    end else begin
        x_phi_fu_209_p4 = x_reg_205;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_flatten_fu_242_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5 or ap_reg_ppiten_pp0_it6)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_242_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_242_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st9_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_2;
            end
        end
        ap_ST_st9_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_fu_331_p2 = ($signed(tmp_40_cast_fu_328_p1) + $signed(ap_const_lv9_1F0));
assign D_fu_337_p2 = (in_channels_ch2_q0 ^ ap_const_lv8_80);
assign E_fu_343_p2 = (in_channels_ch3_q0 ^ ap_const_lv8_80);
assign ap_return_0 = in_width_read;
assign ap_return_1 = in_height_read;

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_392 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_392 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_92 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_92 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign bound_fu_236_p0 = bound_fu_236_p00;
assign bound_fu_236_p00 = in_width_read;
assign bound_fu_236_p1 = bound_fu_236_p10;
assign bound_fu_236_p10 = in_height_read;
assign bound_fu_236_p2 = (bound_fu_236_p0 * bound_fu_236_p1);
assign exitcond_flatten_fu_242_p2 = (indvar_flatten_reg_194 == bound_reg_635? 1'b1: 1'b0);
assign exitcond_fu_253_p2 = (y_reg_216 == in_height_read? 1'b1: 1'b0);
assign icmp1_fu_588_p2 = (tmp_4_reg_750 == ap_const_lv2_1? 1'b1: 1'b0);
assign icmp2_fu_562_p2 = ($signed(tmp_8_reg_735) > $signed(3'b000)? 1'b1: 1'b0);
assign icmp_fu_490_p2 = (tmp_1_reg_715 == ap_const_lv2_1? 1'b1: 1'b0);
assign in_channels_ch1_address0 = tmp_10_fu_323_p1;
assign in_channels_ch2_address0 = tmp_10_reg_666;
assign in_channels_ch3_address0 = tmp_10_reg_666;
assign indvar_flatten_next_fu_247_p2 = (indvar_flatten_reg_194 + ap_const_lv32_1);
assign out_channels_ch1_address0 = ap_reg_ppstg_tmp_10_reg_666_pp0_it4;
assign out_channels_ch1_d0 = ((tmp_3_fu_503_p2)? p_phitmp_fu_495_p3: phitmp_reg_725);
assign out_channels_ch2_address0 = ap_reg_ppstg_tmp_10_reg_666_pp0_it5;
assign out_channels_ch2_d0 = ((tmp_6_fu_601_p2)? p_phitmp2_fu_593_p3: phitmp2_reg_760);
assign out_channels_ch3_address0 = ap_reg_ppstg_tmp_10_reg_666_pp0_it4;
assign out_channels_ch3_d0 = ((tmp_9_fu_575_p2)? p_phitmp3_fu_567_p3: phitmp3_reg_745);
assign p_addr1_fu_317_p2 = (p_addr_fu_311_p2 + tmp_trn_cast_fu_286_p1);
assign p_addr_fu_311_p2 = (p_shl9_cast_fu_296_p1 + p_shl10_cast_fu_307_p1);
assign p_phitmp2_fu_593_p3 = ((icmp1_fu_588_p2)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_phitmp3_fu_567_p3 = ((icmp2_fu_562_p2)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_phitmp_fu_495_p3 = ((icmp_fu_490_p2)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_shl10_cast_fu_307_p1 = tmp_7_fu_300_p3;
assign p_shl1_cast_fu_443_p1 = $signed(p_shl1_fu_436_p3);
assign p_shl1_fu_436_p3 = {{D_reg_695}, {ap_const_lv2_0}};
assign p_shl9_cast_fu_296_p1 = tmp_fu_289_p3;
assign p_shl_cast_fu_432_p1 = $signed(p_shl_fu_425_p3);
assign p_shl_fu_425_p3 = {{D_reg_695}, {ap_const_lv9_0}};
assign tmp1_fu_420_p2 = ($signed(tmp_24_reg_708) + $signed(tmp_29_cast_fu_416_p1));
assign tmp2_cast_fu_452_p1 = tmp2_fu_447_p2;
assign tmp2_fu_447_p2 = ($signed(p_shl1_cast_fu_443_p1) + $signed(tmp_24_reg_708));
assign tmp_10_fu_323_p1 = p_addr1_fu_317_p2;
assign tmp_22_fu_353_p0 = C_fu_331_p2;
assign tmp_22_fu_353_p2 = ($signed(tmp_22_fu_353_p0) * $signed('h12A));
assign tmp_23_fu_371_p0 = E_reg_702;
assign tmp_23_fu_371_p2 = ($signed(tmp_23_fu_371_p0) * $signed('h199));
assign tmp_24_fu_359_p2 = ($signed(tmp_22_fu_353_p2) + $signed(ap_const_lv18_80));
assign tmp_25_fu_377_p2 = ($signed(tmp_23_fu_371_p2) + $signed(tmp_24_reg_708));
assign tmp_26_fu_519_p0 = ap_reg_ppstg_D_reg_695_pp0_it4;
assign tmp_26_fu_519_p2 = ($signed(tmp_26_fu_519_p0) * $signed(-'h64));
assign tmp_27_fu_410_p0 = E_reg_702;
assign tmp_27_fu_410_p2 = ($signed(tmp_27_fu_410_p0) * $signed(-'hD0));
assign tmp_28_cast_fu_525_p1 = tmp_26_fu_519_p2;
assign tmp_28_fu_529_p2 = ($signed(tmp1_reg_730) + $signed(tmp_28_cast_fu_525_p1));
assign tmp_29_cast_fu_416_p1 = tmp_27_fu_410_p2;
assign tmp_29_fu_456_p2 = ($signed(tmp2_cast_fu_452_p1) + $signed(p_shl_cast_fu_432_p1));
assign tmp_3_fu_503_p2 = (icmp_fu_490_p2 | tmp_2_reg_720);
assign tmp_40_cast_fu_328_p1 = Y_reg_680;
assign tmp_6_fu_601_p2 = (icmp1_fu_588_p2 | tmp_5_reg_755);
assign tmp_7_fu_300_p3 = {{x_mid2_reg_654}, {ap_const_lv8_0}};
assign tmp_9_fu_575_p2 = (icmp2_fu_562_p2 | tmp_11_reg_740);
assign tmp_fu_289_p3 = {{x_mid2_reg_654}, {ap_const_lv10_0}};
assign tmp_trn_cast_fu_286_p1 = y_mid2_reg_649;
assign x_mid2_fu_272_p3 = ((exitcond_fu_253_p2)? x_s_fu_266_p2: x_phi_fu_209_p4);
assign x_s_fu_266_p2 = (x_phi_fu_209_p4 + ap_const_lv16_1);
assign y_3_fu_280_p2 = (y_mid2_fu_258_p3 + ap_const_lv16_1);
assign y_mid2_fu_258_p3 = ((exitcond_fu_253_p2)? ap_const_lv16_0: y_reg_216);
always @ (posedge ap_clk)
begin
    tmp_10_reg_666[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5[63:27] <= 37'b0000000000000000000000000000000000000;
    tmp_24_reg_708[0] <= 1'b0;
    tmp1_reg_730[0] <= 1'b0;
end



endmodule //yuv_filter_yuv2rgb

