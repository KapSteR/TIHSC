// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_rgb2yuv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st9_fsm_2 = 3'b100;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv13_19 = 13'b11001;
parameter    ap_const_lv9_80 = 9'b10000000;
parameter    ap_const_lv16_FFB6 = 16'b1111111110110110;
parameter    ap_const_lv16_7A = 16'b1111010;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv15_7FDA = 15'b111111111011010;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv16_FFA2 = 16'b1111111110100010;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv14_80 = 14'b10000000;
parameter    ap_const_lv8_10 = 8'b10000;
parameter    ap_const_lv16_80 = 16'b10000000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [31:0] indvar_flatten_reg_188;
reg   [15:0] x_reg_199;
reg   [15:0] y_reg_210;
wire   [31:0] bound_fu_230_p2;
reg   [31:0] bound_reg_604;
wire   [0:0] exitcond_flatten_fu_236_p2;
reg   [0:0] exitcond_flatten_reg_609;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_92;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5;
wire   [31:0] indvar_flatten_next_fu_241_p2;
wire   [15:0] y_mid2_fu_252_p3;
reg   [15:0] y_mid2_reg_618;
wire   [15:0] x_mid2_fu_266_p3;
reg   [15:0] x_mid2_reg_623;
wire   [15:0] y_1_fu_274_p2;
wire   [63:0] tmp_4_fu_317_p1;
reg   [63:0] tmp_4_reg_635;
reg   [63:0] ap_reg_ppstg_tmp_4_reg_635_pp0_it2;
reg   [63:0] ap_reg_ppstg_tmp_4_reg_635_pp0_it3;
reg   [63:0] ap_reg_ppstg_tmp_4_reg_635_pp0_it4;
reg   [63:0] ap_reg_ppstg_tmp_4_reg_635_pp0_it5;
reg   [7:0] R_reg_657;
reg   [7:0] ap_reg_ppstg_R_reg_657_pp0_it3;
reg   [7:0] G_reg_665;
reg   [7:0] ap_reg_ppstg_G_reg_665_pp0_it3;
reg   [7:0] B_reg_672;
reg   [7:0] ap_reg_ppstg_B_reg_672_pp0_it3;
wire   [15:0] tmp_5_cast2_fu_330_p1;
reg   [15:0] tmp_5_cast2_reg_680;
wire   [15:0] tmp3_cast_fu_358_p1;
reg   [15:0] tmp3_cast_reg_685;
wire   [15:0] tmp_7_fu_362_p2;
reg   [15:0] tmp_7_reg_690;
wire   [15:0] tmp_11_fu_368_p2;
reg   [15:0] tmp_11_reg_695;
reg   [7:0] tmp_5_reg_700;
wire   [15:0] tmp_9_fu_473_p2;
reg   [15:0] tmp_9_reg_705;
wire  signed [15:0] tmp5_fu_479_p2;
reg  signed [15:0] tmp5_reg_710;
wire   [15:0] tmp7_fu_516_p2;
reg   [15:0] tmp7_reg_715;
wire  signed [13:0] tmp8_fu_521_p2;
reg  signed [13:0] tmp8_reg_720;
reg   [7:0] tmp_10_reg_725;
reg   [7:0] tmp_15_reg_730;
reg   [15:0] x_phi_fu_203_p4;
wire   [15:0] bound_fu_230_p0;
wire   [15:0] bound_fu_230_p1;
wire   [0:0] exitcond_fu_247_p2;
wire   [15:0] x_s_fu_260_p2;
wire   [25:0] tmp_fu_283_p3;
wire   [23:0] tmp_2_fu_294_p3;
wire   [26:0] p_shl_cast_fu_290_p1;
wire   [26:0] p_shl7_cast_fu_301_p1;
wire   [26:0] p_addr_fu_305_p2;
wire   [26:0] tmp_2_trn_cast_fu_280_p1;
wire   [26:0] p_addr1_fu_311_p2;
wire   [7:0] tmp_8_fu_336_p0;
wire   [8:0] tmp_5_cast1_fu_327_p1;
wire   [8:0] tmp4_fu_342_p2;
wire   [12:0] tmp4_cast_fu_348_p1;
wire   [12:0] tmp_8_fu_336_p2;
wire   [12:0] tmp3_fu_352_p2;
wire   [7:0] tmp_7_fu_362_p0;
wire   [7:0] tmp_11_fu_368_p0;
wire   [13:0] p_shl5_fu_377_p3;
wire   [8:0] p_shl6_fu_388_p3;
wire   [14:0] p_shl4_fu_399_p3;
wire   [15:0] p_shl6_cast_fu_395_p1;
wire   [15:0] p_shl4_cast_fu_406_p1;
wire   [15:0] tmp2_fu_410_p2;
wire   [15:0] p_shl5_cast_fu_384_p1;
wire   [15:0] tmp1_fu_416_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp_1_fu_422_p2;
wire   [7:0] tmp_6_fu_437_p0;
wire   [14:0] tmp_6_fu_437_p2;
wire   [14:0] p_shl2_fu_447_p3;
wire   [11:0] p_shl3_fu_458_p3;
wire   [15:0] p_shl2_cast_fu_454_p1;
wire   [15:0] p_shl3_cast_fu_469_p1;
wire  signed [15:0] tmp_12_cast_fu_443_p1;
wire   [7:0] tmp_12_fu_484_p0;
wire   [12:0] p_shl3_cast9_fu_465_p1;
wire   [12:0] p_neg_fu_489_p2;
wire   [8:0] p_shl1_fu_499_p3;
wire  signed [13:0] p_neg_cast_fu_495_p1;
wire   [13:0] p_shl1_cast_fu_506_p1;
wire   [15:0] tmp_12_fu_484_p2;
wire  signed [13:0] tmp_13_fu_510_p2;
wire   [15:0] tmp6_fu_533_p2;
(* use_dsp48 = "no" *) wire  signed [15:0] tmp_s_fu_538_p2;
wire  signed [15:0] tmp8_cast_fu_553_p1;
(* use_dsp48 = "no" *) wire  signed [15:0] tmp_14_fu_556_p2;
reg    ap_sig_cseq_ST_st9_fsm_2;
reg    ap_sig_bdd_384;
reg   [2:0] ap_NS_fsm;
wire   [31:0] bound_fu_230_p00;
wire   [31:0] bound_fu_230_p10;
wire   [15:0] tmp_11_fu_368_p00;
wire   [14:0] tmp_6_fu_437_p00;
wire   [15:0] tmp_7_fu_362_p00;
wire   [12:0] tmp_8_fu_336_p00;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_236_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

/// ap_reg_ppiten_pp0_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_188 <= indvar_flatten_next_fu_241_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten_reg_188 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_609 == ap_const_lv1_0))) begin
        x_reg_199 <= x_mid2_reg_623;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        x_reg_199 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
        y_reg_210 <= y_1_fu_274_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        y_reg_210 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it1 == ap_const_lv1_0)) begin
        B_reg_672 <= in_channels_ch3_q0;
        G_reg_665 <= in_channels_ch2_q0;
        R_reg_657 <= in_channels_ch1_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_B_reg_672_pp0_it3 <= B_reg_672;
        ap_reg_ppstg_G_reg_665_pp0_it3 <= G_reg_665;
        ap_reg_ppstg_R_reg_657_pp0_it3 <= R_reg_657;
        ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it1;
        ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it2;
        ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it3;
        ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5 <= ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4;
        ap_reg_ppstg_tmp_4_reg_635_pp0_it2[0] <= tmp_4_reg_635[0];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[1] <= tmp_4_reg_635[1];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[2] <= tmp_4_reg_635[2];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[3] <= tmp_4_reg_635[3];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[4] <= tmp_4_reg_635[4];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[5] <= tmp_4_reg_635[5];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[6] <= tmp_4_reg_635[6];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[7] <= tmp_4_reg_635[7];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[8] <= tmp_4_reg_635[8];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[9] <= tmp_4_reg_635[9];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[10] <= tmp_4_reg_635[10];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[11] <= tmp_4_reg_635[11];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[12] <= tmp_4_reg_635[12];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[13] <= tmp_4_reg_635[13];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[14] <= tmp_4_reg_635[14];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[15] <= tmp_4_reg_635[15];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[16] <= tmp_4_reg_635[16];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[17] <= tmp_4_reg_635[17];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[18] <= tmp_4_reg_635[18];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[19] <= tmp_4_reg_635[19];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[20] <= tmp_4_reg_635[20];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[21] <= tmp_4_reg_635[21];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[22] <= tmp_4_reg_635[22];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[23] <= tmp_4_reg_635[23];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[24] <= tmp_4_reg_635[24];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[25] <= tmp_4_reg_635[25];
ap_reg_ppstg_tmp_4_reg_635_pp0_it2[26] <= tmp_4_reg_635[26];
        ap_reg_ppstg_tmp_4_reg_635_pp0_it3[0] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[0];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[1] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[1];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[2] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[2];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[3] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[3];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[4] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[4];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[5] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[5];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[6] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[6];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[7] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[7];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[8] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[8];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[9] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[9];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[10] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[10];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[11] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[11];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[12] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[12];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[13] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[13];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[14] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[14];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[15] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[15];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[16] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[16];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[17] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[17];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[18] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[18];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[19] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[19];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[20] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[20];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[21] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[21];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[22] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[22];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[23] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[23];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[24] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[24];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[25] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[25];
ap_reg_ppstg_tmp_4_reg_635_pp0_it3[26] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2[26];
        ap_reg_ppstg_tmp_4_reg_635_pp0_it4[0] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[0];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[1] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[1];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[2] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[2];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[3] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[3];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[4] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[4];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[5] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[5];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[6] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[6];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[7] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[7];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[8] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[8];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[9] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[9];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[10] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[10];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[11] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[11];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[12] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[12];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[13] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[13];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[14] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[14];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[15] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[15];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[16] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[16];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[17] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[17];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[18] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[18];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[19] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[19];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[20] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[20];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[21] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[21];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[22] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[22];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[23] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[23];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[24] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[24];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[25] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[25];
ap_reg_ppstg_tmp_4_reg_635_pp0_it4[26] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3[26];
        ap_reg_ppstg_tmp_4_reg_635_pp0_it5[0] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[0];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[1] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[1];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[2] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[2];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[3] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[3];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[4] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[4];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[5] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[5];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[6] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[6];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[7] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[7];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[8] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[8];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[9] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[9];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[10] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[10];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[11] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[11];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[12] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[12];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[13] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[13];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[14] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[14];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[15] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[15];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[16] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[16];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[17] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[17];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[18] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[18];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[19] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[19];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[20] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[20];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[21] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[21];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[22] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[22];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[23] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[23];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[24] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[24];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[25] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[25];
ap_reg_ppstg_tmp_4_reg_635_pp0_it5[26] <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4[26];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it1 <= exitcond_flatten_reg_609;
        exitcond_flatten_reg_609 <= exitcond_flatten_fu_236_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bound_reg_604 <= bound_fu_230_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it2 == ap_const_lv1_0)) begin
        tmp3_cast_reg_685[0] <= tmp3_cast_fu_358_p1[0];
tmp3_cast_reg_685[1] <= tmp3_cast_fu_358_p1[1];
tmp3_cast_reg_685[2] <= tmp3_cast_fu_358_p1[2];
tmp3_cast_reg_685[3] <= tmp3_cast_fu_358_p1[3];
tmp3_cast_reg_685[4] <= tmp3_cast_fu_358_p1[4];
tmp3_cast_reg_685[5] <= tmp3_cast_fu_358_p1[5];
tmp3_cast_reg_685[6] <= tmp3_cast_fu_358_p1[6];
tmp3_cast_reg_685[7] <= tmp3_cast_fu_358_p1[7];
tmp3_cast_reg_685[8] <= tmp3_cast_fu_358_p1[8];
tmp3_cast_reg_685[9] <= tmp3_cast_fu_358_p1[9];
tmp3_cast_reg_685[10] <= tmp3_cast_fu_358_p1[10];
tmp3_cast_reg_685[11] <= tmp3_cast_fu_358_p1[11];
tmp3_cast_reg_685[12] <= tmp3_cast_fu_358_p1[12];
        tmp_11_reg_695[1] <= tmp_11_fu_368_p2[1];
tmp_11_reg_695[2] <= tmp_11_fu_368_p2[2];
tmp_11_reg_695[3] <= tmp_11_fu_368_p2[3];
tmp_11_reg_695[4] <= tmp_11_fu_368_p2[4];
tmp_11_reg_695[5] <= tmp_11_fu_368_p2[5];
tmp_11_reg_695[6] <= tmp_11_fu_368_p2[6];
tmp_11_reg_695[7] <= tmp_11_fu_368_p2[7];
tmp_11_reg_695[8] <= tmp_11_fu_368_p2[8];
tmp_11_reg_695[9] <= tmp_11_fu_368_p2[9];
tmp_11_reg_695[10] <= tmp_11_fu_368_p2[10];
tmp_11_reg_695[11] <= tmp_11_fu_368_p2[11];
tmp_11_reg_695[12] <= tmp_11_fu_368_p2[12];
tmp_11_reg_695[13] <= tmp_11_fu_368_p2[13];
tmp_11_reg_695[14] <= tmp_11_fu_368_p2[14];
tmp_11_reg_695[15] <= tmp_11_fu_368_p2[15];
        tmp_5_cast2_reg_680[0] <= tmp_5_cast2_fu_330_p1[0];
tmp_5_cast2_reg_680[1] <= tmp_5_cast2_fu_330_p1[1];
tmp_5_cast2_reg_680[2] <= tmp_5_cast2_fu_330_p1[2];
tmp_5_cast2_reg_680[3] <= tmp_5_cast2_fu_330_p1[3];
tmp_5_cast2_reg_680[4] <= tmp_5_cast2_fu_330_p1[4];
tmp_5_cast2_reg_680[5] <= tmp_5_cast2_fu_330_p1[5];
tmp_5_cast2_reg_680[6] <= tmp_5_cast2_fu_330_p1[6];
tmp_5_cast2_reg_680[7] <= tmp_5_cast2_fu_330_p1[7];
        tmp_7_reg_690[1] <= tmp_7_fu_362_p2[1];
tmp_7_reg_690[2] <= tmp_7_fu_362_p2[2];
tmp_7_reg_690[3] <= tmp_7_fu_362_p2[3];
tmp_7_reg_690[4] <= tmp_7_fu_362_p2[4];
tmp_7_reg_690[5] <= tmp_7_fu_362_p2[5];
tmp_7_reg_690[6] <= tmp_7_fu_362_p2[6];
tmp_7_reg_690[7] <= tmp_7_fu_362_p2[7];
tmp_7_reg_690[8] <= tmp_7_fu_362_p2[8];
tmp_7_reg_690[9] <= tmp_7_fu_362_p2[9];
tmp_7_reg_690[10] <= tmp_7_fu_362_p2[10];
tmp_7_reg_690[11] <= tmp_7_fu_362_p2[11];
tmp_7_reg_690[12] <= tmp_7_fu_362_p2[12];
tmp_7_reg_690[13] <= tmp_7_fu_362_p2[13];
tmp_7_reg_690[14] <= tmp_7_fu_362_p2[14];
tmp_7_reg_690[15] <= tmp_7_fu_362_p2[15];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it3 == ap_const_lv1_0)) begin
        tmp5_reg_710[1] <= tmp5_fu_479_p2[1];
tmp5_reg_710[2] <= tmp5_fu_479_p2[2];
tmp5_reg_710[3] <= tmp5_fu_479_p2[3];
tmp5_reg_710[4] <= tmp5_fu_479_p2[4];
tmp5_reg_710[5] <= tmp5_fu_479_p2[5];
tmp5_reg_710[6] <= tmp5_fu_479_p2[6];
tmp5_reg_710[7] <= tmp5_fu_479_p2[7];
tmp5_reg_710[8] <= tmp5_fu_479_p2[8];
tmp5_reg_710[9] <= tmp5_fu_479_p2[9];
tmp5_reg_710[10] <= tmp5_fu_479_p2[10];
tmp5_reg_710[11] <= tmp5_fu_479_p2[11];
tmp5_reg_710[12] <= tmp5_fu_479_p2[12];
tmp5_reg_710[13] <= tmp5_fu_479_p2[13];
tmp5_reg_710[14] <= tmp5_fu_479_p2[14];
tmp5_reg_710[15] <= tmp5_fu_479_p2[15];
        tmp7_reg_715[1] <= tmp7_fu_516_p2[1];
tmp7_reg_715[2] <= tmp7_fu_516_p2[2];
tmp7_reg_715[3] <= tmp7_fu_516_p2[3];
tmp7_reg_715[4] <= tmp7_fu_516_p2[4];
tmp7_reg_715[5] <= tmp7_fu_516_p2[5];
tmp7_reg_715[6] <= tmp7_fu_516_p2[6];
tmp7_reg_715[7] <= tmp7_fu_516_p2[7];
tmp7_reg_715[8] <= tmp7_fu_516_p2[8];
tmp7_reg_715[9] <= tmp7_fu_516_p2[9];
tmp7_reg_715[10] <= tmp7_fu_516_p2[10];
tmp7_reg_715[11] <= tmp7_fu_516_p2[11];
tmp7_reg_715[12] <= tmp7_fu_516_p2[12];
tmp7_reg_715[13] <= tmp7_fu_516_p2[13];
tmp7_reg_715[14] <= tmp7_fu_516_p2[14];
tmp7_reg_715[15] <= tmp7_fu_516_p2[15];
        tmp8_reg_720[1] <= tmp8_fu_521_p2[1];
tmp8_reg_720[2] <= tmp8_fu_521_p2[2];
tmp8_reg_720[3] <= tmp8_fu_521_p2[3];
tmp8_reg_720[4] <= tmp8_fu_521_p2[4];
tmp8_reg_720[5] <= tmp8_fu_521_p2[5];
tmp8_reg_720[6] <= tmp8_fu_521_p2[6];
tmp8_reg_720[7] <= tmp8_fu_521_p2[7];
tmp8_reg_720[8] <= tmp8_fu_521_p2[8];
tmp8_reg_720[9] <= tmp8_fu_521_p2[9];
tmp8_reg_720[10] <= tmp8_fu_521_p2[10];
tmp8_reg_720[11] <= tmp8_fu_521_p2[11];
tmp8_reg_720[12] <= tmp8_fu_521_p2[12];
tmp8_reg_720[13] <= tmp8_fu_521_p2[13];
        tmp_5_reg_700 <= {{tmp_1_fu_422_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_9_reg_705[4] <= tmp_9_fu_473_p2[4];
tmp_9_reg_705[5] <= tmp_9_fu_473_p2[5];
tmp_9_reg_705[6] <= tmp_9_fu_473_p2[6];
tmp_9_reg_705[7] <= tmp_9_fu_473_p2[7];
tmp_9_reg_705[8] <= tmp_9_fu_473_p2[8];
tmp_9_reg_705[9] <= tmp_9_fu_473_p2[9];
tmp_9_reg_705[10] <= tmp_9_fu_473_p2[10];
tmp_9_reg_705[11] <= tmp_9_fu_473_p2[11];
tmp_9_reg_705[12] <= tmp_9_fu_473_p2[12];
tmp_9_reg_705[13] <= tmp_9_fu_473_p2[13];
tmp_9_reg_705[14] <= tmp_9_fu_473_p2[14];
tmp_9_reg_705[15] <= tmp_9_fu_473_p2[15];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4 == ap_const_lv1_0)) begin
        tmp_10_reg_725 <= {{tmp_s_fu_538_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_15_reg_730 <= {{tmp_14_fu_556_p2[ap_const_lv32_F : ap_const_lv32_8]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_reg_609 == ap_const_lv1_0))) begin
        tmp_4_reg_635[0] <= tmp_4_fu_317_p1[0];
tmp_4_reg_635[1] <= tmp_4_fu_317_p1[1];
tmp_4_reg_635[2] <= tmp_4_fu_317_p1[2];
tmp_4_reg_635[3] <= tmp_4_fu_317_p1[3];
tmp_4_reg_635[4] <= tmp_4_fu_317_p1[4];
tmp_4_reg_635[5] <= tmp_4_fu_317_p1[5];
tmp_4_reg_635[6] <= tmp_4_fu_317_p1[6];
tmp_4_reg_635[7] <= tmp_4_fu_317_p1[7];
tmp_4_reg_635[8] <= tmp_4_fu_317_p1[8];
tmp_4_reg_635[9] <= tmp_4_fu_317_p1[9];
tmp_4_reg_635[10] <= tmp_4_fu_317_p1[10];
tmp_4_reg_635[11] <= tmp_4_fu_317_p1[11];
tmp_4_reg_635[12] <= tmp_4_fu_317_p1[12];
tmp_4_reg_635[13] <= tmp_4_fu_317_p1[13];
tmp_4_reg_635[14] <= tmp_4_fu_317_p1[14];
tmp_4_reg_635[15] <= tmp_4_fu_317_p1[15];
tmp_4_reg_635[16] <= tmp_4_fu_317_p1[16];
tmp_4_reg_635[17] <= tmp_4_fu_317_p1[17];
tmp_4_reg_635[18] <= tmp_4_fu_317_p1[18];
tmp_4_reg_635[19] <= tmp_4_fu_317_p1[19];
tmp_4_reg_635[20] <= tmp_4_fu_317_p1[20];
tmp_4_reg_635[21] <= tmp_4_fu_317_p1[21];
tmp_4_reg_635[22] <= tmp_4_fu_317_p1[22];
tmp_4_reg_635[23] <= tmp_4_fu_317_p1[23];
tmp_4_reg_635[24] <= tmp_4_fu_317_p1[24];
tmp_4_reg_635[25] <= tmp_4_fu_317_p1[25];
tmp_4_reg_635[26] <= tmp_4_fu_317_p1[26];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
        x_mid2_reg_623 <= x_mid2_fu_266_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
        y_mid2_reg_618 <= y_mid2_fu_252_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st9_fsm_2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_92)
begin
    if (ap_sig_bdd_92) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_2 assign process. ///
always @ (ap_sig_bdd_384)
begin
    if (ap_sig_bdd_384) begin
        ap_sig_cseq_ST_st9_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_2 = ap_const_logic_0;
    end
end

/// in_channels_ch1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        in_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        in_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        in_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it5)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) begin
        out_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it5 or ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & (ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4 == ap_const_lv1_0))) begin
        out_channels_ch1_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it6)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) begin
        out_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it6 or ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & (ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5 == ap_const_lv1_0))) begin
        out_channels_ch2_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it6)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) begin
        out_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it6 or ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & (ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5 == ap_const_lv1_0))) begin
        out_channels_ch3_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_we0 = ap_const_logic_0;
    end
end

/// x_phi_fu_203_p4 assign process. ///
always @ (x_reg_199 or exitcond_flatten_reg_609 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or x_mid2_reg_623)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_609 == ap_const_lv1_0))) begin
        x_phi_fu_203_p4 = x_mid2_reg_623;
    end else begin
        x_phi_fu_203_p4 = x_reg_199;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_flatten_fu_236_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5 or ap_reg_ppiten_pp0_it6)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_236_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_236_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st9_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_2;
            end
        end
        ap_ST_st9_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return_0 = in_width_read;
assign ap_return_1 = in_height_read;

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_384 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_384 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_92 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_92 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign bound_fu_230_p0 = bound_fu_230_p00;
assign bound_fu_230_p00 = in_width_read;
assign bound_fu_230_p1 = bound_fu_230_p10;
assign bound_fu_230_p10 = in_height_read;
assign bound_fu_230_p2 = (bound_fu_230_p0 * bound_fu_230_p1);
assign exitcond_flatten_fu_236_p2 = (indvar_flatten_reg_188 == bound_reg_604? 1'b1: 1'b0);
assign exitcond_fu_247_p2 = (y_reg_210 == in_height_read? 1'b1: 1'b0);
assign in_channels_ch1_address0 = tmp_4_fu_317_p1;
assign in_channels_ch2_address0 = tmp_4_fu_317_p1;
assign in_channels_ch3_address0 = tmp_4_fu_317_p1;
assign indvar_flatten_next_fu_241_p2 = (indvar_flatten_reg_188 + ap_const_lv32_1);
assign out_channels_ch1_address0 = ap_reg_ppstg_tmp_4_reg_635_pp0_it4;
assign out_channels_ch1_d0 = (tmp_5_reg_700 + ap_const_lv8_10);
assign out_channels_ch2_address0 = ap_reg_ppstg_tmp_4_reg_635_pp0_it5;
assign out_channels_ch2_d0 = (tmp_10_reg_725 ^ ap_const_lv8_80);
assign out_channels_ch3_address0 = ap_reg_ppstg_tmp_4_reg_635_pp0_it5;
assign out_channels_ch3_d0 = (tmp_15_reg_730 ^ ap_const_lv8_80);
assign p_addr1_fu_311_p2 = (p_addr_fu_305_p2 + tmp_2_trn_cast_fu_280_p1);
assign p_addr_fu_305_p2 = (p_shl_cast_fu_290_p1 + p_shl7_cast_fu_301_p1);
assign p_neg_cast_fu_495_p1 = $signed(p_neg_fu_489_p2);
assign p_neg_fu_489_p2 = (ap_const_lv13_0 - p_shl3_cast9_fu_465_p1);
assign p_shl1_cast_fu_506_p1 = p_shl1_fu_499_p3;
assign p_shl1_fu_499_p3 = {{ap_reg_ppstg_B_reg_672_pp0_it3}, {ap_const_lv1_0}};
assign p_shl2_cast_fu_454_p1 = p_shl2_fu_447_p3;
assign p_shl2_fu_447_p3 = {{ap_reg_ppstg_B_reg_672_pp0_it3}, {ap_const_lv7_0}};
assign p_shl3_cast9_fu_465_p1 = p_shl3_fu_458_p3;
assign p_shl3_cast_fu_469_p1 = p_shl3_fu_458_p3;
assign p_shl3_fu_458_p3 = {{ap_reg_ppstg_B_reg_672_pp0_it3}, {ap_const_lv4_0}};
assign p_shl4_cast_fu_406_p1 = p_shl4_fu_399_p3;
assign p_shl4_fu_399_p3 = {{ap_reg_ppstg_G_reg_665_pp0_it3}, {ap_const_lv7_0}};
assign p_shl5_cast_fu_384_p1 = p_shl5_fu_377_p3;
assign p_shl5_fu_377_p3 = {{ap_reg_ppstg_R_reg_657_pp0_it3}, {ap_const_lv6_0}};
assign p_shl6_cast_fu_395_p1 = p_shl6_fu_388_p3;
assign p_shl6_fu_388_p3 = {{ap_reg_ppstg_R_reg_657_pp0_it3}, {ap_const_lv1_0}};
assign p_shl7_cast_fu_301_p1 = tmp_2_fu_294_p3;
assign p_shl_cast_fu_290_p1 = tmp_fu_283_p3;
assign tmp1_fu_416_p2 = (tmp2_fu_410_p2 + p_shl5_cast_fu_384_p1);
assign tmp2_fu_410_p2 = (p_shl6_cast_fu_395_p1 + p_shl4_cast_fu_406_p1);
assign tmp3_cast_fu_358_p1 = tmp3_fu_352_p2;
assign tmp3_fu_352_p2 = (tmp4_cast_fu_348_p1 + tmp_8_fu_336_p2);
assign tmp4_cast_fu_348_p1 = tmp4_fu_342_p2;
assign tmp4_fu_342_p2 = (tmp_5_cast1_fu_327_p1 + ap_const_lv9_80);
assign tmp5_fu_479_p2 = ($signed(tmp_12_cast_fu_443_p1) + $signed(tmp_7_reg_690));
assign tmp6_fu_533_p2 = (tmp_9_reg_705 + ap_const_lv16_80);
assign tmp7_fu_516_p2 = (tmp_11_reg_695 + tmp_12_fu_484_p2);
assign tmp8_cast_fu_553_p1 = tmp8_reg_720;
assign tmp8_fu_521_p2 = ($signed(tmp_13_fu_510_p2) + $signed(ap_const_lv14_80));
assign tmp_11_fu_368_p0 = tmp_11_fu_368_p00;
assign tmp_11_fu_368_p00 = R_reg_657;
assign tmp_11_fu_368_p2 = (tmp_11_fu_368_p0 * $signed('h7A));
assign tmp_12_cast_fu_443_p1 = $signed(tmp_6_fu_437_p2);
assign tmp_12_fu_484_p0 = tmp_5_cast2_reg_680;
assign tmp_12_fu_484_p2 = ($signed({{1'b0}, {tmp_12_fu_484_p0}}) * $signed(-'h5E));
assign tmp_13_fu_510_p2 = ($signed(p_neg_cast_fu_495_p1) - $signed(p_shl1_cast_fu_506_p1));
assign tmp_14_fu_556_p2 = ($signed(tmp8_cast_fu_553_p1) + $signed(tmp7_reg_715));
assign tmp_1_fu_422_p2 = (tmp3_cast_reg_685 + tmp1_fu_416_p2);
assign tmp_2_fu_294_p3 = {{x_mid2_reg_623}, {ap_const_lv8_0}};
assign tmp_2_trn_cast_fu_280_p1 = y_mid2_reg_618;
assign tmp_4_fu_317_p1 = p_addr1_fu_311_p2;
assign tmp_5_cast1_fu_327_p1 = G_reg_665;
assign tmp_5_cast2_fu_330_p1 = G_reg_665;
assign tmp_6_fu_437_p0 = tmp_6_fu_437_p00;
assign tmp_6_fu_437_p00 = ap_reg_ppstg_R_reg_657_pp0_it3;
assign tmp_6_fu_437_p2 = ($signed({{1'b0}, {tmp_6_fu_437_p0}}) * $signed(-'h26));
assign tmp_7_fu_362_p0 = tmp_7_fu_362_p00;
assign tmp_7_fu_362_p00 = G_reg_665;
assign tmp_7_fu_362_p2 = ($signed({{1'b0}, {tmp_7_fu_362_p0}}) * $signed(-'h4A));
assign tmp_8_fu_336_p0 = tmp_8_fu_336_p00;
assign tmp_8_fu_336_p00 = B_reg_672;
assign tmp_8_fu_336_p2 = (tmp_8_fu_336_p0 * $signed('h19));
assign tmp_9_fu_473_p2 = (p_shl2_cast_fu_454_p1 - p_shl3_cast_fu_469_p1);
assign tmp_fu_283_p3 = {{x_mid2_reg_623}, {ap_const_lv10_0}};
assign tmp_s_fu_538_p2 = ($signed(tmp6_fu_533_p2) + $signed(tmp5_reg_710));
assign x_mid2_fu_266_p3 = ((exitcond_fu_247_p2)? x_s_fu_260_p2: x_phi_fu_203_p4);
assign x_s_fu_260_p2 = (x_phi_fu_203_p4 + ap_const_lv16_1);
assign y_1_fu_274_p2 = (y_mid2_fu_252_p3 + ap_const_lv16_1);
assign y_mid2_fu_252_p3 = ((exitcond_fu_247_p2)? ap_const_lv16_0: y_reg_210);
always @ (posedge ap_clk)
begin
    tmp_4_reg_635[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5[63:27] <= 37'b0000000000000000000000000000000000000;
    tmp_5_cast2_reg_680[15:8] <= 8'b00000000;
    tmp3_cast_reg_685[15:13] <= 3'b000;
    tmp_7_reg_690[0] <= 1'b0;
    tmp_11_reg_695[0] <= 1'b0;
    tmp_9_reg_705[3:0] <= 4'b0000;
    tmp5_reg_710[0] <= 1'b0;
    tmp7_reg_715[0] <= 1'b0;
    tmp8_reg_720[0] <= 1'b0;
end



endmodule //yuv_filter_rgb2yuv

