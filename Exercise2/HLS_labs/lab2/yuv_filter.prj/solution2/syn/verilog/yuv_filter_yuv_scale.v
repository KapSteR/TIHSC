// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv_scale (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        Y_scale,
        U_scale,
        V_scale,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st7_fsm_2 = 3'b100;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
input  [7:0] Y_scale;
input  [7:0] U_scale;
input  [7:0] V_scale;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [31:0] indvar_flatten_reg_176;
reg   [15:0] x_reg_187;
reg   [15:0] y_reg_198;
wire   [14:0] tmp_cast_fu_210_p1;
reg   [14:0] tmp_cast_reg_399;
wire   [14:0] tmp_cast_15_fu_214_p1;
reg   [14:0] tmp_cast_15_reg_404;
wire   [14:0] tmp_28_cast_fu_218_p1;
reg   [14:0] tmp_28_cast_reg_409;
wire   [31:0] bound_fu_230_p2;
reg   [31:0] bound_reg_414;
wire   [0:0] exitcond_flatten_fu_236_p2;
reg   [0:0] exitcond_flatten_reg_419;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_101;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3;
wire   [31:0] indvar_flatten_next_fu_241_p2;
wire   [15:0] y_mid2_fu_252_p3;
reg   [15:0] y_mid2_reg_428;
wire   [15:0] x_mid2_fu_266_p3;
reg   [15:0] x_mid2_reg_433;
wire   [15:0] y_2_fu_274_p2;
wire   [63:0] tmp_6_fu_317_p1;
reg   [63:0] tmp_6_reg_445;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_445_pp0_it2;
reg   [63:0] ap_reg_ppstg_tmp_6_reg_445_pp0_it3;
reg   [7:0] Y_reg_467;
reg   [7:0] U_reg_472;
reg   [7:0] V_reg_477;
reg   [7:0] tmp_19_reg_482;
reg   [7:0] tmp_20_reg_487;
reg   [7:0] tmp_21_reg_492;
reg   [15:0] x_phi_fu_191_p4;
wire   [15:0] bound_fu_230_p0;
wire   [15:0] bound_fu_230_p1;
wire   [0:0] exitcond_fu_247_p2;
wire   [15:0] x_s_fu_260_p2;
wire   [25:0] tmp_fu_283_p3;
wire   [23:0] tmp_5_fu_294_p3;
wire   [26:0] p_shl_cast_fu_290_p1;
wire   [26:0] p_shl8_cast_fu_301_p1;
wire   [26:0] p_addr_fu_305_p2;
wire   [26:0] tmp_21_trn_cast_fu_280_p1;
wire   [26:0] p_addr1_fu_311_p2;
wire   [7:0] tmp_16_fu_327_p0;
wire   [7:0] tmp_16_fu_327_p1;
wire   [7:0] tmp_17_fu_335_p0;
wire   [7:0] tmp_17_fu_335_p1;
wire   [7:0] tmp_18_fu_343_p0;
wire   [7:0] tmp_18_fu_343_p1;
wire   [14:0] tmp_16_fu_327_p2;
wire   [14:0] tmp_17_fu_335_p2;
wire   [14:0] tmp_18_fu_343_p2;
reg    ap_sig_cseq_ST_st7_fsm_2;
reg    ap_sig_bdd_256;
reg   [2:0] ap_NS_fsm;
wire   [31:0] bound_fu_230_p00;
wire   [31:0] bound_fu_230_p10;
wire   [14:0] tmp_16_fu_327_p00;
wire   [14:0] tmp_17_fu_335_p00;
wire   [14:0] tmp_18_fu_343_p00;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_236_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_176 <= indvar_flatten_next_fu_241_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten_reg_176 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_419 == ap_const_lv1_0))) begin
        x_reg_187 <= x_mid2_reg_433;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        x_reg_187 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
        y_reg_198 <= y_2_fu_274_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        y_reg_198 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it1 == ap_const_lv1_0)) begin
        U_reg_472 <= in_channels_ch2_q0;
        V_reg_477 <= in_channels_ch3_q0;
        Y_reg_467 <= in_channels_ch1_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it1 <= exitcond_flatten_reg_419;
        exitcond_flatten_reg_419 <= exitcond_flatten_fu_236_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it1;
        ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it2;
        ap_reg_ppstg_tmp_6_reg_445_pp0_it2[0] <= tmp_6_reg_445[0];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[1] <= tmp_6_reg_445[1];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[2] <= tmp_6_reg_445[2];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[3] <= tmp_6_reg_445[3];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[4] <= tmp_6_reg_445[4];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[5] <= tmp_6_reg_445[5];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[6] <= tmp_6_reg_445[6];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[7] <= tmp_6_reg_445[7];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[8] <= tmp_6_reg_445[8];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[9] <= tmp_6_reg_445[9];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[10] <= tmp_6_reg_445[10];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[11] <= tmp_6_reg_445[11];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[12] <= tmp_6_reg_445[12];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[13] <= tmp_6_reg_445[13];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[14] <= tmp_6_reg_445[14];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[15] <= tmp_6_reg_445[15];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[16] <= tmp_6_reg_445[16];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[17] <= tmp_6_reg_445[17];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[18] <= tmp_6_reg_445[18];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[19] <= tmp_6_reg_445[19];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[20] <= tmp_6_reg_445[20];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[21] <= tmp_6_reg_445[21];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[22] <= tmp_6_reg_445[22];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[23] <= tmp_6_reg_445[23];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[24] <= tmp_6_reg_445[24];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[25] <= tmp_6_reg_445[25];
ap_reg_ppstg_tmp_6_reg_445_pp0_it2[26] <= tmp_6_reg_445[26];
        ap_reg_ppstg_tmp_6_reg_445_pp0_it3[0] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[0];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[1] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[1];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[2] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[2];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[3] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[3];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[4] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[4];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[5] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[5];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[6] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[6];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[7] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[7];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[8] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[8];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[9] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[9];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[10] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[10];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[11] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[11];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[12] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[12];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[13] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[13];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[14] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[14];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[15] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[15];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[16] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[16];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[17] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[17];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[18] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[18];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[19] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[19];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[20] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[20];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[21] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[21];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[22] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[22];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[23] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[23];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[24] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[24];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[25] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[25];
ap_reg_ppstg_tmp_6_reg_445_pp0_it3[26] <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2[26];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bound_reg_414 <= bound_fu_230_p2;
        tmp_28_cast_reg_409[0] <= tmp_28_cast_fu_218_p1[0];
tmp_28_cast_reg_409[1] <= tmp_28_cast_fu_218_p1[1];
tmp_28_cast_reg_409[2] <= tmp_28_cast_fu_218_p1[2];
tmp_28_cast_reg_409[3] <= tmp_28_cast_fu_218_p1[3];
tmp_28_cast_reg_409[4] <= tmp_28_cast_fu_218_p1[4];
tmp_28_cast_reg_409[5] <= tmp_28_cast_fu_218_p1[5];
tmp_28_cast_reg_409[6] <= tmp_28_cast_fu_218_p1[6];
tmp_28_cast_reg_409[7] <= tmp_28_cast_fu_218_p1[7];
        tmp_cast_15_reg_404[0] <= tmp_cast_15_fu_214_p1[0];
tmp_cast_15_reg_404[1] <= tmp_cast_15_fu_214_p1[1];
tmp_cast_15_reg_404[2] <= tmp_cast_15_fu_214_p1[2];
tmp_cast_15_reg_404[3] <= tmp_cast_15_fu_214_p1[3];
tmp_cast_15_reg_404[4] <= tmp_cast_15_fu_214_p1[4];
tmp_cast_15_reg_404[5] <= tmp_cast_15_fu_214_p1[5];
tmp_cast_15_reg_404[6] <= tmp_cast_15_fu_214_p1[6];
tmp_cast_15_reg_404[7] <= tmp_cast_15_fu_214_p1[7];
        tmp_cast_reg_399[0] <= tmp_cast_fu_210_p1[0];
tmp_cast_reg_399[1] <= tmp_cast_fu_210_p1[1];
tmp_cast_reg_399[2] <= tmp_cast_fu_210_p1[2];
tmp_cast_reg_399[3] <= tmp_cast_fu_210_p1[3];
tmp_cast_reg_399[4] <= tmp_cast_fu_210_p1[4];
tmp_cast_reg_399[5] <= tmp_cast_fu_210_p1[5];
tmp_cast_reg_399[6] <= tmp_cast_fu_210_p1[6];
tmp_cast_reg_399[7] <= tmp_cast_fu_210_p1[7];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it2 == ap_const_lv1_0)) begin
        tmp_19_reg_482 <= {{tmp_16_fu_327_p2[ap_const_lv32_E : ap_const_lv32_7]}};
        tmp_20_reg_487 <= {{tmp_17_fu_335_p2[ap_const_lv32_E : ap_const_lv32_7]}};
        tmp_21_reg_492 <= {{tmp_18_fu_343_p2[ap_const_lv32_E : ap_const_lv32_7]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_reg_419 == ap_const_lv1_0))) begin
        tmp_6_reg_445[0] <= tmp_6_fu_317_p1[0];
tmp_6_reg_445[1] <= tmp_6_fu_317_p1[1];
tmp_6_reg_445[2] <= tmp_6_fu_317_p1[2];
tmp_6_reg_445[3] <= tmp_6_fu_317_p1[3];
tmp_6_reg_445[4] <= tmp_6_fu_317_p1[4];
tmp_6_reg_445[5] <= tmp_6_fu_317_p1[5];
tmp_6_reg_445[6] <= tmp_6_fu_317_p1[6];
tmp_6_reg_445[7] <= tmp_6_fu_317_p1[7];
tmp_6_reg_445[8] <= tmp_6_fu_317_p1[8];
tmp_6_reg_445[9] <= tmp_6_fu_317_p1[9];
tmp_6_reg_445[10] <= tmp_6_fu_317_p1[10];
tmp_6_reg_445[11] <= tmp_6_fu_317_p1[11];
tmp_6_reg_445[12] <= tmp_6_fu_317_p1[12];
tmp_6_reg_445[13] <= tmp_6_fu_317_p1[13];
tmp_6_reg_445[14] <= tmp_6_fu_317_p1[14];
tmp_6_reg_445[15] <= tmp_6_fu_317_p1[15];
tmp_6_reg_445[16] <= tmp_6_fu_317_p1[16];
tmp_6_reg_445[17] <= tmp_6_fu_317_p1[17];
tmp_6_reg_445[18] <= tmp_6_fu_317_p1[18];
tmp_6_reg_445[19] <= tmp_6_fu_317_p1[19];
tmp_6_reg_445[20] <= tmp_6_fu_317_p1[20];
tmp_6_reg_445[21] <= tmp_6_fu_317_p1[21];
tmp_6_reg_445[22] <= tmp_6_fu_317_p1[22];
tmp_6_reg_445[23] <= tmp_6_fu_317_p1[23];
tmp_6_reg_445[24] <= tmp_6_fu_317_p1[24];
tmp_6_reg_445[25] <= tmp_6_fu_317_p1[25];
tmp_6_reg_445[26] <= tmp_6_fu_317_p1[26];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
        x_mid2_reg_433 <= x_mid2_fu_266_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_236_p2 == ap_const_lv1_0))) begin
        y_mid2_reg_428 <= y_mid2_fu_252_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st7_fsm_2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_101)
begin
    if (ap_sig_bdd_101) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_2 assign process. ///
always @ (ap_sig_bdd_256)
begin
    if (ap_sig_bdd_256) begin
        ap_sig_cseq_ST_st7_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_2 = ap_const_logic_0;
    end
end

/// in_channels_ch1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        in_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        in_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        in_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) begin
        out_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4 or ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it4) & (ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 == ap_const_lv1_0))) begin
        out_channels_ch1_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) begin
        out_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4 or ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it4) & (ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 == ap_const_lv1_0))) begin
        out_channels_ch2_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) begin
        out_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4 or ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it4) & (ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 == ap_const_lv1_0))) begin
        out_channels_ch3_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_we0 = ap_const_logic_0;
    end
end

/// x_phi_fu_191_p4 assign process. ///
always @ (x_reg_187 or exitcond_flatten_reg_419 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or x_mid2_reg_433)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_419 == ap_const_lv1_0))) begin
        x_phi_fu_191_p4 = x_mid2_reg_433;
    end else begin
        x_phi_fu_191_p4 = x_reg_187;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_flatten_fu_236_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it3 or ap_reg_ppiten_pp0_it4)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it4) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it3)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_236_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_236_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st7_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_2;
            end
        end
        ap_ST_st7_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return_0 = in_width_read;
assign ap_return_1 = in_height_read;

/// ap_sig_bdd_101 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_101 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_256 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_256 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign bound_fu_230_p0 = bound_fu_230_p00;
assign bound_fu_230_p00 = in_width_read;
assign bound_fu_230_p1 = bound_fu_230_p10;
assign bound_fu_230_p10 = in_height_read;
assign bound_fu_230_p2 = (bound_fu_230_p0 * bound_fu_230_p1);
assign exitcond_flatten_fu_236_p2 = (indvar_flatten_reg_176 == bound_reg_414? 1'b1: 1'b0);
assign exitcond_fu_247_p2 = (y_reg_198 == in_height_read? 1'b1: 1'b0);
assign in_channels_ch1_address0 = tmp_6_fu_317_p1;
assign in_channels_ch2_address0 = tmp_6_fu_317_p1;
assign in_channels_ch3_address0 = tmp_6_fu_317_p1;
assign indvar_flatten_next_fu_241_p2 = (indvar_flatten_reg_176 + ap_const_lv32_1);
assign out_channels_ch1_address0 = ap_reg_ppstg_tmp_6_reg_445_pp0_it3;
assign out_channels_ch1_d0 = tmp_19_reg_482;
assign out_channels_ch2_address0 = ap_reg_ppstg_tmp_6_reg_445_pp0_it3;
assign out_channels_ch2_d0 = tmp_20_reg_487;
assign out_channels_ch3_address0 = ap_reg_ppstg_tmp_6_reg_445_pp0_it3;
assign out_channels_ch3_d0 = tmp_21_reg_492;
assign p_addr1_fu_311_p2 = (p_addr_fu_305_p2 + tmp_21_trn_cast_fu_280_p1);
assign p_addr_fu_305_p2 = (p_shl_cast_fu_290_p1 + p_shl8_cast_fu_301_p1);
assign p_shl8_cast_fu_301_p1 = tmp_5_fu_294_p3;
assign p_shl_cast_fu_290_p1 = tmp_fu_283_p3;
assign tmp_16_fu_327_p0 = tmp_16_fu_327_p00;
assign tmp_16_fu_327_p00 = Y_reg_467;
assign tmp_16_fu_327_p1 = tmp_cast_reg_399;
assign tmp_16_fu_327_p2 = (tmp_16_fu_327_p0 * tmp_16_fu_327_p1);
assign tmp_17_fu_335_p0 = tmp_17_fu_335_p00;
assign tmp_17_fu_335_p00 = U_reg_472;
assign tmp_17_fu_335_p1 = tmp_cast_15_reg_404;
assign tmp_17_fu_335_p2 = (tmp_17_fu_335_p0 * tmp_17_fu_335_p1);
assign tmp_18_fu_343_p0 = tmp_18_fu_343_p00;
assign tmp_18_fu_343_p00 = V_reg_477;
assign tmp_18_fu_343_p1 = tmp_28_cast_reg_409;
assign tmp_18_fu_343_p2 = (tmp_18_fu_343_p0 * tmp_18_fu_343_p1);
assign tmp_21_trn_cast_fu_280_p1 = y_mid2_reg_428;
assign tmp_28_cast_fu_218_p1 = V_scale;
assign tmp_5_fu_294_p3 = {{x_mid2_reg_433}, {ap_const_lv8_0}};
assign tmp_6_fu_317_p1 = p_addr1_fu_311_p2;
assign tmp_cast_15_fu_214_p1 = U_scale;
assign tmp_cast_fu_210_p1 = Y_scale;
assign tmp_fu_283_p3 = {{x_mid2_reg_433}, {ap_const_lv10_0}};
assign x_mid2_fu_266_p3 = ((exitcond_fu_247_p2)? x_s_fu_260_p2: x_phi_fu_191_p4);
assign x_s_fu_260_p2 = (x_phi_fu_191_p4 + ap_const_lv16_1);
assign y_2_fu_274_p2 = (y_mid2_fu_252_p3 + ap_const_lv16_1);
assign y_mid2_fu_252_p3 = ((exitcond_fu_247_p2)? ap_const_lv16_0: y_reg_198);
always @ (posedge ap_clk)
begin
    tmp_cast_reg_399[14:8] <= 7'b0000000;
    tmp_cast_15_reg_404[14:8] <= 7'b0000000;
    tmp_28_cast_reg_409[14:8] <= 7'b0000000;
    tmp_6_reg_445[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2[63:27] <= 37'b0000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3[63:27] <= 37'b0000000000000000000000000000000000000;
end



endmodule //yuv_filter_yuv_scale

