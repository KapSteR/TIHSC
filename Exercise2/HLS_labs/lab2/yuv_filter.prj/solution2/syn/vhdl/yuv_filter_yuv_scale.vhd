-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv_scale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_yuv_scale is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st7_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal indvar_flatten_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_187 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_198 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_210_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_reg_399 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_15_fu_214_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_15_reg_404 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_cast_fu_218_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_cast_reg_409 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_101 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_fu_252_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_428 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_fu_266_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_reg_433 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_2_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_445 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_445_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_445_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_reg_467 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_482 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_phi_fu_191_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_230_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_283_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_5_fu_294_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl_cast_fu_290_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl8_cast_fu_301_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr_fu_305_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_21_trn_cast_fu_280_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr1_fu_311_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_16_fu_327_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_335_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_343_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_327_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_fu_335_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_343_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_256 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal bound_fu_230_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_230_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_327_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_fu_335_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_343_p00 : STD_LOGIC_VECTOR (14 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- indvar_flatten_reg_176 assign process. --
    indvar_flatten_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_176 <= indvar_flatten_next_fu_241_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_176 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- x_reg_187 assign process. --
    x_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_419 = ap_const_lv1_0))) then 
                x_reg_187 <= x_mid2_reg_433;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_187 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- y_reg_198 assign process. --
    y_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                y_reg_198 <= y_2_fu_274_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                y_reg_198 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it1 = ap_const_lv1_0)) then
                U_reg_472 <= in_channels_ch2_q0;
                V_reg_477 <= in_channels_ch3_q0;
                Y_reg_467 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it1 <= exitcond_flatten_reg_419;
                exitcond_flatten_reg_419 <= exitcond_flatten_fu_236_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it2;
                ap_reg_ppstg_tmp_6_reg_445_pp0_it2(0) <= tmp_6_reg_445(0);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(1) <= tmp_6_reg_445(1);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(2) <= tmp_6_reg_445(2);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(3) <= tmp_6_reg_445(3);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(4) <= tmp_6_reg_445(4);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(5) <= tmp_6_reg_445(5);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(6) <= tmp_6_reg_445(6);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(7) <= tmp_6_reg_445(7);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(8) <= tmp_6_reg_445(8);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(9) <= tmp_6_reg_445(9);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(10) <= tmp_6_reg_445(10);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(11) <= tmp_6_reg_445(11);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(12) <= tmp_6_reg_445(12);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(13) <= tmp_6_reg_445(13);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(14) <= tmp_6_reg_445(14);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(15) <= tmp_6_reg_445(15);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(16) <= tmp_6_reg_445(16);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(17) <= tmp_6_reg_445(17);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(18) <= tmp_6_reg_445(18);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(19) <= tmp_6_reg_445(19);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(20) <= tmp_6_reg_445(20);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(21) <= tmp_6_reg_445(21);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(22) <= tmp_6_reg_445(22);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(23) <= tmp_6_reg_445(23);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(24) <= tmp_6_reg_445(24);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(25) <= tmp_6_reg_445(25);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(26) <= tmp_6_reg_445(26);
                ap_reg_ppstg_tmp_6_reg_445_pp0_it3(0) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(0);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(1) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(1);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(2) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(2);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(3) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(3);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(4) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(4);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(5) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(5);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(6) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(6);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(7) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(7);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(8) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(8);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(9) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(9);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(10) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(10);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(11) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(11);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(12) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(12);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(13) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(13);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(14) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(14);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(15) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(15);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(16) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(16);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(17) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(17);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(18) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(18);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(19) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(19);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(20) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(20);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(21) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(21);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(22) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(22);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(23) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(23);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(24) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(24);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(25) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(25);
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(26) <= ap_reg_ppstg_tmp_6_reg_445_pp0_it2(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                bound_reg_414 <= bound_fu_230_p2;
                tmp_28_cast_reg_409(0) <= tmp_28_cast_fu_218_p1(0);
    tmp_28_cast_reg_409(1) <= tmp_28_cast_fu_218_p1(1);
    tmp_28_cast_reg_409(2) <= tmp_28_cast_fu_218_p1(2);
    tmp_28_cast_reg_409(3) <= tmp_28_cast_fu_218_p1(3);
    tmp_28_cast_reg_409(4) <= tmp_28_cast_fu_218_p1(4);
    tmp_28_cast_reg_409(5) <= tmp_28_cast_fu_218_p1(5);
    tmp_28_cast_reg_409(6) <= tmp_28_cast_fu_218_p1(6);
    tmp_28_cast_reg_409(7) <= tmp_28_cast_fu_218_p1(7);
                tmp_cast_15_reg_404(0) <= tmp_cast_15_fu_214_p1(0);
    tmp_cast_15_reg_404(1) <= tmp_cast_15_fu_214_p1(1);
    tmp_cast_15_reg_404(2) <= tmp_cast_15_fu_214_p1(2);
    tmp_cast_15_reg_404(3) <= tmp_cast_15_fu_214_p1(3);
    tmp_cast_15_reg_404(4) <= tmp_cast_15_fu_214_p1(4);
    tmp_cast_15_reg_404(5) <= tmp_cast_15_fu_214_p1(5);
    tmp_cast_15_reg_404(6) <= tmp_cast_15_fu_214_p1(6);
    tmp_cast_15_reg_404(7) <= tmp_cast_15_fu_214_p1(7);
                tmp_cast_reg_399(0) <= tmp_cast_fu_210_p1(0);
    tmp_cast_reg_399(1) <= tmp_cast_fu_210_p1(1);
    tmp_cast_reg_399(2) <= tmp_cast_fu_210_p1(2);
    tmp_cast_reg_399(3) <= tmp_cast_fu_210_p1(3);
    tmp_cast_reg_399(4) <= tmp_cast_fu_210_p1(4);
    tmp_cast_reg_399(5) <= tmp_cast_fu_210_p1(5);
    tmp_cast_reg_399(6) <= tmp_cast_fu_210_p1(6);
    tmp_cast_reg_399(7) <= tmp_cast_fu_210_p1(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it2 = ap_const_lv1_0)) then
                tmp_19_reg_482 <= tmp_16_fu_327_p2(14 downto 7);
                tmp_20_reg_487 <= tmp_17_fu_335_p2(14 downto 7);
                tmp_21_reg_492 <= tmp_18_fu_343_p2(14 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_419 = ap_const_lv1_0))) then
                tmp_6_reg_445(0) <= tmp_6_fu_317_p1(0);
    tmp_6_reg_445(1) <= tmp_6_fu_317_p1(1);
    tmp_6_reg_445(2) <= tmp_6_fu_317_p1(2);
    tmp_6_reg_445(3) <= tmp_6_fu_317_p1(3);
    tmp_6_reg_445(4) <= tmp_6_fu_317_p1(4);
    tmp_6_reg_445(5) <= tmp_6_fu_317_p1(5);
    tmp_6_reg_445(6) <= tmp_6_fu_317_p1(6);
    tmp_6_reg_445(7) <= tmp_6_fu_317_p1(7);
    tmp_6_reg_445(8) <= tmp_6_fu_317_p1(8);
    tmp_6_reg_445(9) <= tmp_6_fu_317_p1(9);
    tmp_6_reg_445(10) <= tmp_6_fu_317_p1(10);
    tmp_6_reg_445(11) <= tmp_6_fu_317_p1(11);
    tmp_6_reg_445(12) <= tmp_6_fu_317_p1(12);
    tmp_6_reg_445(13) <= tmp_6_fu_317_p1(13);
    tmp_6_reg_445(14) <= tmp_6_fu_317_p1(14);
    tmp_6_reg_445(15) <= tmp_6_fu_317_p1(15);
    tmp_6_reg_445(16) <= tmp_6_fu_317_p1(16);
    tmp_6_reg_445(17) <= tmp_6_fu_317_p1(17);
    tmp_6_reg_445(18) <= tmp_6_fu_317_p1(18);
    tmp_6_reg_445(19) <= tmp_6_fu_317_p1(19);
    tmp_6_reg_445(20) <= tmp_6_fu_317_p1(20);
    tmp_6_reg_445(21) <= tmp_6_fu_317_p1(21);
    tmp_6_reg_445(22) <= tmp_6_fu_317_p1(22);
    tmp_6_reg_445(23) <= tmp_6_fu_317_p1(23);
    tmp_6_reg_445(24) <= tmp_6_fu_317_p1(24);
    tmp_6_reg_445(25) <= tmp_6_fu_317_p1(25);
    tmp_6_reg_445(26) <= tmp_6_fu_317_p1(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then
                x_mid2_reg_433 <= x_mid2_fu_266_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then
                y_mid2_reg_428 <= y_mid2_fu_252_p3;
            end if;
        end if;
    end process;
    tmp_cast_reg_399(14 downto 8) <= "0000000";
    tmp_cast_15_reg_404(14 downto 8) <= "0000000";
    tmp_28_cast_reg_409(14 downto 8) <= "0000000";
    tmp_6_reg_445(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_445_pp0_it2(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_6_reg_445_pp0_it3(63 downto 27) <= "0000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_236_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_2;
                end if;
            when ap_ST_st7_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;

    -- ap_sig_bdd_101 assign process. --
    ap_sig_bdd_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_101 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_256 assign process. --
    ap_sig_bdd_256_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_256 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_101)
    begin
        if (ap_sig_bdd_101) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_2 assign process. --
    ap_sig_cseq_ST_st7_fsm_2_assign_proc : process(ap_sig_bdd_256)
    begin
        if (ap_sig_bdd_256) then 
            ap_sig_cseq_ST_st7_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_230_p0 <= bound_fu_230_p00(16 - 1 downto 0);
    bound_fu_230_p00 <= std_logic_vector(resize(unsigned(in_width_read),32));
    bound_fu_230_p1 <= bound_fu_230_p10(16 - 1 downto 0);
    bound_fu_230_p10 <= std_logic_vector(resize(unsigned(in_height_read),32));
    bound_fu_230_p2 <= std_logic_vector(resize(unsigned(bound_fu_230_p0) * unsigned(bound_fu_230_p1), 32));
    exitcond_flatten_fu_236_p2 <= "1" when (indvar_flatten_reg_176 = bound_reg_414) else "0";
    exitcond_fu_247_p2 <= "1" when (y_reg_198 = in_height_read) else "0";
    in_channels_ch1_address0 <= tmp_6_fu_317_p1(22 - 1 downto 0);

    -- in_channels_ch1_ce0 assign process. --
    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_6_fu_317_p1(22 - 1 downto 0);

    -- in_channels_ch2_ce0 assign process. --
    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_6_fu_317_p1(22 - 1 downto 0);

    -- in_channels_ch3_ce0 assign process. --
    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_241_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_176) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= ap_reg_ppstg_tmp_6_reg_445_pp0_it3(22 - 1 downto 0);

    -- out_channels_ch1_ce0 assign process. --
    out_channels_ch1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= tmp_19_reg_482;

    -- out_channels_ch1_we0 assign process. --
    out_channels_ch1_we0_assign_proc : process(ap_reg_ppiten_pp0_it4, ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 = ap_const_lv1_0)))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= ap_reg_ppstg_tmp_6_reg_445_pp0_it3(22 - 1 downto 0);

    -- out_channels_ch2_ce0 assign process. --
    out_channels_ch2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= tmp_20_reg_487;

    -- out_channels_ch2_we0 assign process. --
    out_channels_ch2_we0_assign_proc : process(ap_reg_ppiten_pp0_it4, ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 = ap_const_lv1_0)))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= ap_reg_ppstg_tmp_6_reg_445_pp0_it3(22 - 1 downto 0);

    -- out_channels_ch3_ce0 assign process. --
    out_channels_ch3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= tmp_21_reg_492;

    -- out_channels_ch3_we0 assign process. --
    out_channels_ch3_we0_assign_proc : process(ap_reg_ppiten_pp0_it4, ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_reg_ppstg_exitcond_flatten_reg_419_pp0_it3 = ap_const_lv1_0)))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_311_p2 <= std_logic_vector(unsigned(p_addr_fu_305_p2) + unsigned(tmp_21_trn_cast_fu_280_p1));
    p_addr_fu_305_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_290_p1) + unsigned(p_shl8_cast_fu_301_p1));
    p_shl8_cast_fu_301_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_294_p3),27));
    p_shl_cast_fu_290_p1 <= std_logic_vector(resize(unsigned(tmp_fu_283_p3),27));
    tmp_16_fu_327_p0 <= tmp_16_fu_327_p00(8 - 1 downto 0);
    tmp_16_fu_327_p00 <= std_logic_vector(resize(unsigned(Y_reg_467),15));
    tmp_16_fu_327_p1 <= tmp_cast_reg_399(8 - 1 downto 0);
    tmp_16_fu_327_p2 <= std_logic_vector(resize(unsigned(tmp_16_fu_327_p0) * unsigned(tmp_16_fu_327_p1), 15));
    tmp_17_fu_335_p0 <= tmp_17_fu_335_p00(8 - 1 downto 0);
    tmp_17_fu_335_p00 <= std_logic_vector(resize(unsigned(U_reg_472),15));
    tmp_17_fu_335_p1 <= tmp_cast_15_reg_404(8 - 1 downto 0);
    tmp_17_fu_335_p2 <= std_logic_vector(resize(unsigned(tmp_17_fu_335_p0) * unsigned(tmp_17_fu_335_p1), 15));
    tmp_18_fu_343_p0 <= tmp_18_fu_343_p00(8 - 1 downto 0);
    tmp_18_fu_343_p00 <= std_logic_vector(resize(unsigned(V_reg_477),15));
    tmp_18_fu_343_p1 <= tmp_28_cast_reg_409(8 - 1 downto 0);
    tmp_18_fu_343_p2 <= std_logic_vector(resize(unsigned(tmp_18_fu_343_p0) * unsigned(tmp_18_fu_343_p1), 15));
    tmp_21_trn_cast_fu_280_p1 <= std_logic_vector(resize(unsigned(y_mid2_reg_428),27));
    tmp_28_cast_fu_218_p1 <= std_logic_vector(resize(unsigned(V_scale),15));
    tmp_5_fu_294_p3 <= (x_mid2_reg_433 & ap_const_lv8_0);
    tmp_6_fu_317_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_311_p2),64));
    tmp_cast_15_fu_214_p1 <= std_logic_vector(resize(unsigned(U_scale),15));
    tmp_cast_fu_210_p1 <= std_logic_vector(resize(unsigned(Y_scale),15));
    tmp_fu_283_p3 <= (x_mid2_reg_433 & ap_const_lv10_0);
    x_mid2_fu_266_p3 <= 
        x_s_fu_260_p2 when (exitcond_fu_247_p2(0) = '1') else 
        x_phi_fu_191_p4;

    -- x_phi_fu_191_p4 assign process. --
    x_phi_fu_191_p4_assign_proc : process(x_reg_187, exitcond_flatten_reg_419, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, x_mid2_reg_433)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_419 = ap_const_lv1_0))) then 
            x_phi_fu_191_p4 <= x_mid2_reg_433;
        else 
            x_phi_fu_191_p4 <= x_reg_187;
        end if; 
    end process;

    x_s_fu_260_p2 <= std_logic_vector(unsigned(x_phi_fu_191_p4) + unsigned(ap_const_lv16_1));
    y_2_fu_274_p2 <= std_logic_vector(unsigned(y_mid2_fu_252_p3) + unsigned(ap_const_lv16_1));
    y_mid2_fu_252_p3 <= 
        ap_const_lv16_0 when (exitcond_fu_247_p2(0) = '1') else 
        y_reg_198;
end behav;
