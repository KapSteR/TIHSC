-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st9_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal indvar_flatten_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_205 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_fu_258_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_fu_272_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_3_fu_280_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_666 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_666_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_666_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_666_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_10_reg_666_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_695 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_D_reg_695_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_702 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_359_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_reg_708 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_715 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_reg_725 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_420_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_reg_730 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_reg_735 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp3_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_750 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_reg_760 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_phi_fu_209_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_236_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_289_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_7_fu_300_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl9_cast_fu_296_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl10_cast_fu_307_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr_fu_311_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_trn_cast_fu_286_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr1_fu_317_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_40_cast_fu_328_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_353_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_353_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_23_fu_371_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_371_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_fu_377_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_fu_410_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_410_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_29_cast_fu_416_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_425_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_436_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_443_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp2_fu_447_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp2_fu_447_p2 : signal is "no";
    signal tmp2_cast_fu_452_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_cast_fu_432_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_29_fu_456_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp_fu_495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_519_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_519_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_cast_fu_525_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_28_fu_529_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp2_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_567_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp2_fu_593_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_392 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal bound_fu_236_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_236_p10 : STD_LOGIC_VECTOR (31 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_242_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_242_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_242_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    -- indvar_flatten_reg_194 assign process. --
    indvar_flatten_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_242_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_194 <= indvar_flatten_next_fu_247_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- x_reg_205 assign process. --
    x_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_640 = ap_const_lv1_0))) then 
                x_reg_205 <= x_mid2_reg_654;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_205 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- y_reg_216 assign process. --
    y_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_242_p2 = ap_const_lv1_0))) then 
                y_reg_216 <= y_3_fu_280_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                y_reg_216 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it2 = ap_const_lv1_0)) then
                D_reg_695 <= D_fu_337_p2;
                E_reg_702 <= E_fu_343_p2;
                tmp_24_reg_708(1) <= tmp_24_fu_359_p2(1);
    tmp_24_reg_708(2) <= tmp_24_fu_359_p2(2);
    tmp_24_reg_708(3) <= tmp_24_fu_359_p2(3);
    tmp_24_reg_708(4) <= tmp_24_fu_359_p2(4);
    tmp_24_reg_708(5) <= tmp_24_fu_359_p2(5);
    tmp_24_reg_708(6) <= tmp_24_fu_359_p2(6);
    tmp_24_reg_708(7) <= tmp_24_fu_359_p2(7);
    tmp_24_reg_708(8) <= tmp_24_fu_359_p2(8);
    tmp_24_reg_708(9) <= tmp_24_fu_359_p2(9);
    tmp_24_reg_708(10) <= tmp_24_fu_359_p2(10);
    tmp_24_reg_708(11) <= tmp_24_fu_359_p2(11);
    tmp_24_reg_708(12) <= tmp_24_fu_359_p2(12);
    tmp_24_reg_708(13) <= tmp_24_fu_359_p2(13);
    tmp_24_reg_708(14) <= tmp_24_fu_359_p2(14);
    tmp_24_reg_708(15) <= tmp_24_fu_359_p2(15);
    tmp_24_reg_708(16) <= tmp_24_fu_359_p2(16);
    tmp_24_reg_708(17) <= tmp_24_fu_359_p2(17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it1 = ap_const_lv1_0)) then
                Y_reg_680 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_D_reg_695_pp0_it4 <= D_reg_695;
                ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it3;
                ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it5 <= ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4;
                ap_reg_ppstg_tmp_10_reg_666_pp0_it2(0) <= tmp_10_reg_666(0);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(1) <= tmp_10_reg_666(1);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(2) <= tmp_10_reg_666(2);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(3) <= tmp_10_reg_666(3);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(4) <= tmp_10_reg_666(4);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(5) <= tmp_10_reg_666(5);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(6) <= tmp_10_reg_666(6);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(7) <= tmp_10_reg_666(7);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(8) <= tmp_10_reg_666(8);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(9) <= tmp_10_reg_666(9);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(10) <= tmp_10_reg_666(10);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(11) <= tmp_10_reg_666(11);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(12) <= tmp_10_reg_666(12);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(13) <= tmp_10_reg_666(13);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(14) <= tmp_10_reg_666(14);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(15) <= tmp_10_reg_666(15);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(16) <= tmp_10_reg_666(16);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(17) <= tmp_10_reg_666(17);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(18) <= tmp_10_reg_666(18);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(19) <= tmp_10_reg_666(19);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(20) <= tmp_10_reg_666(20);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(21) <= tmp_10_reg_666(21);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(22) <= tmp_10_reg_666(22);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(23) <= tmp_10_reg_666(23);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(24) <= tmp_10_reg_666(24);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(25) <= tmp_10_reg_666(25);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(26) <= tmp_10_reg_666(26);
                ap_reg_ppstg_tmp_10_reg_666_pp0_it3(0) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(0);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(1) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(1);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(2) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(2);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(3) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(3);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(4) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(4);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(5) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(5);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(6) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(6);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(7) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(7);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(8) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(8);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(9) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(9);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(10) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(10);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(11) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(11);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(12) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(12);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(13) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(13);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(14) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(14);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(15) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(15);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(16) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(16);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(17) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(17);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(18) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(18);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(19) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(19);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(20) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(20);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(21) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(21);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(22) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(22);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(23) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(23);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(24) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(24);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(25) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(25);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(26) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it2(26);
                ap_reg_ppstg_tmp_10_reg_666_pp0_it4(0) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(0);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(1) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(1);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(2) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(2);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(3) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(3);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(4) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(4);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(5) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(5);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(6) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(6);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(7) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(7);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(8) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(8);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(9) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(9);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(10) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(10);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(11) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(11);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(12) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(12);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(13) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(13);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(14) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(14);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(15) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(15);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(16) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(16);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(17) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(17);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(18) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(18);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(19) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(19);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(20) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(20);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(21) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(21);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(22) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(22);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(23) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(23);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(24) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(24);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(25) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(25);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(26) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it3(26);
                ap_reg_ppstg_tmp_10_reg_666_pp0_it5(0) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(0);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(1) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(1);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(2) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(2);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(3) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(3);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(4) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(4);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(5) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(5);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(6) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(6);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(7) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(7);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(8) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(8);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(9) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(9);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(10) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(10);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(11) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(11);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(12) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(12);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(13) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(13);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(14) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(14);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(15) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(15);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(16) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(16);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(17) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(17);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(18) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(18);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(19) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(19);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(20) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(20);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(21) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(21);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(22) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(22);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(23) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(23);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(24) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(24);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(25) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(25);
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(26) <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it1 <= exitcond_flatten_reg_640;
                exitcond_flatten_reg_640 <= exitcond_flatten_fu_242_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                bound_reg_635 <= bound_fu_236_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 = ap_const_lv1_0)) then
                phitmp2_reg_760 <= tmp_28_fu_529_p2(15 downto 8);
                tmp_4_reg_750 <= tmp_28_fu_529_p2(17 downto 16);
                tmp_5_reg_755 <= tmp_28_fu_529_p2(17 downto 17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it3 = ap_const_lv1_0)) then
                phitmp3_reg_745 <= tmp_29_fu_456_p2(15 downto 8);
                phitmp_reg_725 <= tmp_25_fu_377_p2(15 downto 8);
                tmp1_reg_730(1) <= tmp1_fu_420_p2(1);
    tmp1_reg_730(2) <= tmp1_fu_420_p2(2);
    tmp1_reg_730(3) <= tmp1_fu_420_p2(3);
    tmp1_reg_730(4) <= tmp1_fu_420_p2(4);
    tmp1_reg_730(5) <= tmp1_fu_420_p2(5);
    tmp1_reg_730(6) <= tmp1_fu_420_p2(6);
    tmp1_reg_730(7) <= tmp1_fu_420_p2(7);
    tmp1_reg_730(8) <= tmp1_fu_420_p2(8);
    tmp1_reg_730(9) <= tmp1_fu_420_p2(9);
    tmp1_reg_730(10) <= tmp1_fu_420_p2(10);
    tmp1_reg_730(11) <= tmp1_fu_420_p2(11);
    tmp1_reg_730(12) <= tmp1_fu_420_p2(12);
    tmp1_reg_730(13) <= tmp1_fu_420_p2(13);
    tmp1_reg_730(14) <= tmp1_fu_420_p2(14);
    tmp1_reg_730(15) <= tmp1_fu_420_p2(15);
    tmp1_reg_730(16) <= tmp1_fu_420_p2(16);
    tmp1_reg_730(17) <= tmp1_fu_420_p2(17);
                tmp_11_reg_740 <= tmp_29_fu_456_p2(18 downto 18);
                tmp_1_reg_715 <= tmp_25_fu_377_p2(17 downto 16);
                tmp_2_reg_720 <= tmp_25_fu_377_p2(17 downto 17);
                tmp_8_reg_735 <= tmp_29_fu_456_p2(18 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_640 = ap_const_lv1_0))) then
                tmp_10_reg_666(0) <= tmp_10_fu_323_p1(0);
    tmp_10_reg_666(1) <= tmp_10_fu_323_p1(1);
    tmp_10_reg_666(2) <= tmp_10_fu_323_p1(2);
    tmp_10_reg_666(3) <= tmp_10_fu_323_p1(3);
    tmp_10_reg_666(4) <= tmp_10_fu_323_p1(4);
    tmp_10_reg_666(5) <= tmp_10_fu_323_p1(5);
    tmp_10_reg_666(6) <= tmp_10_fu_323_p1(6);
    tmp_10_reg_666(7) <= tmp_10_fu_323_p1(7);
    tmp_10_reg_666(8) <= tmp_10_fu_323_p1(8);
    tmp_10_reg_666(9) <= tmp_10_fu_323_p1(9);
    tmp_10_reg_666(10) <= tmp_10_fu_323_p1(10);
    tmp_10_reg_666(11) <= tmp_10_fu_323_p1(11);
    tmp_10_reg_666(12) <= tmp_10_fu_323_p1(12);
    tmp_10_reg_666(13) <= tmp_10_fu_323_p1(13);
    tmp_10_reg_666(14) <= tmp_10_fu_323_p1(14);
    tmp_10_reg_666(15) <= tmp_10_fu_323_p1(15);
    tmp_10_reg_666(16) <= tmp_10_fu_323_p1(16);
    tmp_10_reg_666(17) <= tmp_10_fu_323_p1(17);
    tmp_10_reg_666(18) <= tmp_10_fu_323_p1(18);
    tmp_10_reg_666(19) <= tmp_10_fu_323_p1(19);
    tmp_10_reg_666(20) <= tmp_10_fu_323_p1(20);
    tmp_10_reg_666(21) <= tmp_10_fu_323_p1(21);
    tmp_10_reg_666(22) <= tmp_10_fu_323_p1(22);
    tmp_10_reg_666(23) <= tmp_10_fu_323_p1(23);
    tmp_10_reg_666(24) <= tmp_10_fu_323_p1(24);
    tmp_10_reg_666(25) <= tmp_10_fu_323_p1(25);
    tmp_10_reg_666(26) <= tmp_10_fu_323_p1(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_242_p2 = ap_const_lv1_0))) then
                x_mid2_reg_654 <= x_mid2_fu_272_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_242_p2 = ap_const_lv1_0))) then
                y_mid2_reg_649 <= y_mid2_fu_258_p3;
            end if;
        end if;
    end process;
    tmp_10_reg_666(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_10_reg_666_pp0_it2(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_10_reg_666_pp0_it3(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_10_reg_666_pp0_it4(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_10_reg_666_pp0_it5(63 downto 27) <= "0000000000000000000000000000000000000";
    tmp_24_reg_708(0) <= '0';
    tmp1_reg_730(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_242_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_242_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_242_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_2;
                end if;
            when ap_ST_st9_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    C_fu_331_p2 <= std_logic_vector(unsigned(tmp_40_cast_fu_328_p1) + unsigned(ap_const_lv9_1F0));
    D_fu_337_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_343_p2 <= (in_channels_ch3_q0 xor ap_const_lv8_80);

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st9_fsm_2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;

    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_392 assign process. --
    ap_sig_bdd_392_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_392 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_2 assign process. --
    ap_sig_cseq_ST_st9_fsm_2_assign_proc : process(ap_sig_bdd_392)
    begin
        if (ap_sig_bdd_392) then 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_236_p0 <= bound_fu_236_p00(16 - 1 downto 0);
    bound_fu_236_p00 <= std_logic_vector(resize(unsigned(in_width_read),32));
    bound_fu_236_p1 <= bound_fu_236_p10(16 - 1 downto 0);
    bound_fu_236_p10 <= std_logic_vector(resize(unsigned(in_height_read),32));
    bound_fu_236_p2 <= std_logic_vector(resize(unsigned(bound_fu_236_p0) * unsigned(bound_fu_236_p1), 32));
    exitcond_flatten_fu_242_p2 <= "1" when (indvar_flatten_reg_194 = bound_reg_635) else "0";
    exitcond_fu_253_p2 <= "1" when (y_reg_216 = in_height_read) else "0";
    icmp1_fu_588_p2 <= "1" when (tmp_4_reg_750 = ap_const_lv2_1) else "0";
    icmp2_fu_562_p2 <= "1" when (signed(tmp_8_reg_735) > signed(ap_const_lv3_0)) else "0";
    icmp_fu_490_p2 <= "1" when (tmp_1_reg_715 = ap_const_lv2_1) else "0";
    in_channels_ch1_address0 <= tmp_10_fu_323_p1(22 - 1 downto 0);

    -- in_channels_ch1_ce0 assign process. --
    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_10_reg_666(22 - 1 downto 0);

    -- in_channels_ch2_ce0 assign process. --
    in_channels_ch2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_10_reg_666(22 - 1 downto 0);

    -- in_channels_ch3_ce0 assign process. --
    in_channels_ch3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_247_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_194) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(22 - 1 downto 0);

    -- out_channels_ch1_ce0 assign process. --
    out_channels_ch1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it5)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= 
        p_phitmp_fu_495_p3 when (tmp_3_fu_503_p2(0) = '1') else 
        phitmp_reg_725;

    -- out_channels_ch1_we0 assign process. --
    out_channels_ch1_we0_assign_proc : process(ap_reg_ppiten_pp0_it5, ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 = ap_const_lv1_0)))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= ap_reg_ppstg_tmp_10_reg_666_pp0_it5(22 - 1 downto 0);

    -- out_channels_ch2_ce0 assign process. --
    out_channels_ch2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= 
        p_phitmp2_fu_593_p3 when (tmp_6_fu_601_p2(0) = '1') else 
        phitmp2_reg_760;

    -- out_channels_ch2_we0 assign process. --
    out_channels_ch2_we0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it5 = ap_const_lv1_0)))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= ap_reg_ppstg_tmp_10_reg_666_pp0_it4(22 - 1 downto 0);

    -- out_channels_ch3_ce0 assign process. --
    out_channels_ch3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it5)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= 
        p_phitmp3_fu_567_p3 when (tmp_9_fu_575_p2(0) = '1') else 
        phitmp3_reg_745;

    -- out_channels_ch3_we0 assign process. --
    out_channels_ch3_we0_assign_proc : process(ap_reg_ppiten_pp0_it5, ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_reg_ppstg_exitcond_flatten_reg_640_pp0_it4 = ap_const_lv1_0)))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_317_p2 <= std_logic_vector(unsigned(p_addr_fu_311_p2) + unsigned(tmp_trn_cast_fu_286_p1));
    p_addr_fu_311_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_296_p1) + unsigned(p_shl10_cast_fu_307_p1));
    p_phitmp2_fu_593_p3 <= 
        ap_const_lv8_FF when (icmp1_fu_588_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp3_fu_567_p3 <= 
        ap_const_lv8_FF when (icmp2_fu_562_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp_fu_495_p3 <= 
        ap_const_lv8_FF when (icmp_fu_490_p2(0) = '1') else 
        ap_const_lv8_0;
    p_shl10_cast_fu_307_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_300_p3),27));
        p_shl1_cast_fu_443_p1 <= std_logic_vector(resize(signed(p_shl1_fu_436_p3),18));

    p_shl1_fu_436_p3 <= (D_reg_695 & ap_const_lv2_0);
    p_shl9_cast_fu_296_p1 <= std_logic_vector(resize(unsigned(tmp_fu_289_p3),27));
        p_shl_cast_fu_432_p1 <= std_logic_vector(resize(signed(p_shl_fu_425_p3),19));

    p_shl_fu_425_p3 <= (D_reg_695 & ap_const_lv9_0);
    tmp1_fu_420_p2 <= std_logic_vector(signed(tmp_24_reg_708) + signed(tmp_29_cast_fu_416_p1));
        tmp2_cast_fu_452_p1 <= std_logic_vector(resize(signed(tmp2_fu_447_p2),19));

    tmp2_fu_447_p2 <= std_logic_vector(signed(p_shl1_cast_fu_443_p1) + signed(tmp_24_reg_708));
    tmp_10_fu_323_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_317_p2),64));
    tmp_22_fu_353_p0 <= C_fu_331_p2;
    tmp_22_fu_353_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_22_fu_353_p0) * signed('0' &ap_const_lv18_12A))), 18));
    tmp_23_fu_371_p0 <= E_reg_702;
    tmp_23_fu_371_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_23_fu_371_p0) * signed('0' &ap_const_lv18_199))), 18));
    tmp_24_fu_359_p2 <= std_logic_vector(signed(tmp_22_fu_353_p2) + signed(ap_const_lv18_80));
    tmp_25_fu_377_p2 <= std_logic_vector(signed(tmp_23_fu_371_p2) + signed(tmp_24_reg_708));
    tmp_26_fu_519_p0 <= ap_reg_ppstg_D_reg_695_pp0_it4;
    tmp_26_fu_519_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_26_fu_519_p0) * signed(ap_const_lv16_FF9C))), 16));
    tmp_27_fu_410_p0 <= E_reg_702;
    tmp_27_fu_410_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_27_fu_410_p0) * signed(ap_const_lv17_1FF30))), 17));
        tmp_28_cast_fu_525_p1 <= std_logic_vector(resize(signed(tmp_26_fu_519_p2),18));

    tmp_28_fu_529_p2 <= std_logic_vector(signed(tmp1_reg_730) + signed(tmp_28_cast_fu_525_p1));
        tmp_29_cast_fu_416_p1 <= std_logic_vector(resize(signed(tmp_27_fu_410_p2),18));

    tmp_29_fu_456_p2 <= std_logic_vector(signed(tmp2_cast_fu_452_p1) + signed(p_shl_cast_fu_432_p1));
    tmp_3_fu_503_p2 <= (icmp_fu_490_p2 or tmp_2_reg_720);
    tmp_40_cast_fu_328_p1 <= std_logic_vector(resize(unsigned(Y_reg_680),9));
    tmp_6_fu_601_p2 <= (icmp1_fu_588_p2 or tmp_5_reg_755);
    tmp_7_fu_300_p3 <= (x_mid2_reg_654 & ap_const_lv8_0);
    tmp_9_fu_575_p2 <= (icmp2_fu_562_p2 or tmp_11_reg_740);
    tmp_fu_289_p3 <= (x_mid2_reg_654 & ap_const_lv10_0);
    tmp_trn_cast_fu_286_p1 <= std_logic_vector(resize(unsigned(y_mid2_reg_649),27));
    x_mid2_fu_272_p3 <= 
        x_s_fu_266_p2 when (exitcond_fu_253_p2(0) = '1') else 
        x_phi_fu_209_p4;

    -- x_phi_fu_209_p4 assign process. --
    x_phi_fu_209_p4_assign_proc : process(x_reg_205, exitcond_flatten_reg_640, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, x_mid2_reg_654)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_640 = ap_const_lv1_0))) then 
            x_phi_fu_209_p4 <= x_mid2_reg_654;
        else 
            x_phi_fu_209_p4 <= x_reg_205;
        end if; 
    end process;

    x_s_fu_266_p2 <= std_logic_vector(unsigned(x_phi_fu_209_p4) + unsigned(ap_const_lv16_1));
    y_3_fu_280_p2 <= std_logic_vector(unsigned(y_mid2_fu_258_p3) + unsigned(ap_const_lv16_1));
    y_mid2_fu_258_p3 <= 
        ap_const_lv16_0 when (exitcond_fu_253_p2(0) = '1') else 
        y_reg_216;
end behav;
