-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_rgb2yuv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_rgb2yuv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st9_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv16_7A : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal indvar_flatten_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_199 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_210 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_fu_252_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_618 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_fu_266_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_reg_623 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_635_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_635_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_635_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_635_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal R_reg_657 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_R_reg_657_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_G_reg_665_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_672 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_B_reg_672_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast2_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_cast2_reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_cast_fu_358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_cast_reg_685 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_690 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_368_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_695 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_473_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_710 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_reg_715 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_521_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_reg_720 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_10_reg_725 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_730 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_phi_fu_203_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_230_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_283_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_2_fu_294_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl_cast_fu_290_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl7_cast_fu_301_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr_fu_305_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_trn_cast_fu_280_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr1_fu_311_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_8_fu_336_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast1_fu_327_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_342_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_cast_fu_348_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_336_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_352_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_fu_362_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_368_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_377_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_fu_388_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_399_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_cast_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl5_cast_fu_384_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_1_fu_422_p2 : signal is "no";
    signal tmp_6_fu_437_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_437_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_fu_447_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_fu_458_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_454_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_469_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_cast_fu_443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_484_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast9_fu_465_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_fu_489_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_499_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_cast_fu_495_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_506_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_510_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp6_fu_533_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_538_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_s_fu_538_p2 : signal is "no";
    signal tmp8_cast_fu_553_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_556_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_14_fu_556_p2 : signal is "no";
    signal ap_sig_cseq_ST_st9_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_384 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal bound_fu_230_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_230_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_368_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_437_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_362_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_336_p00 : STD_LOGIC_VECTOR (12 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    -- indvar_flatten_reg_188 assign process. --
    indvar_flatten_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_188 <= indvar_flatten_next_fu_241_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_188 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- x_reg_199 assign process. --
    x_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_609 = ap_const_lv1_0))) then 
                x_reg_199 <= x_mid2_reg_623;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_199 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- y_reg_210 assign process. --
    y_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then 
                y_reg_210 <= y_1_fu_274_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                y_reg_210 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it1 = ap_const_lv1_0)) then
                B_reg_672 <= in_channels_ch3_q0;
                G_reg_665 <= in_channels_ch2_q0;
                R_reg_657 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_B_reg_672_pp0_it3 <= B_reg_672;
                ap_reg_ppstg_G_reg_665_pp0_it3 <= G_reg_665;
                ap_reg_ppstg_R_reg_657_pp0_it3 <= R_reg_657;
                ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it3;
                ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5 <= ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4;
                ap_reg_ppstg_tmp_4_reg_635_pp0_it2(0) <= tmp_4_reg_635(0);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(1) <= tmp_4_reg_635(1);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(2) <= tmp_4_reg_635(2);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(3) <= tmp_4_reg_635(3);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(4) <= tmp_4_reg_635(4);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(5) <= tmp_4_reg_635(5);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(6) <= tmp_4_reg_635(6);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(7) <= tmp_4_reg_635(7);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(8) <= tmp_4_reg_635(8);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(9) <= tmp_4_reg_635(9);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(10) <= tmp_4_reg_635(10);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(11) <= tmp_4_reg_635(11);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(12) <= tmp_4_reg_635(12);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(13) <= tmp_4_reg_635(13);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(14) <= tmp_4_reg_635(14);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(15) <= tmp_4_reg_635(15);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(16) <= tmp_4_reg_635(16);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(17) <= tmp_4_reg_635(17);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(18) <= tmp_4_reg_635(18);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(19) <= tmp_4_reg_635(19);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(20) <= tmp_4_reg_635(20);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(21) <= tmp_4_reg_635(21);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(22) <= tmp_4_reg_635(22);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(23) <= tmp_4_reg_635(23);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(24) <= tmp_4_reg_635(24);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(25) <= tmp_4_reg_635(25);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(26) <= tmp_4_reg_635(26);
                ap_reg_ppstg_tmp_4_reg_635_pp0_it3(0) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(0);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(1) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(1);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(2) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(2);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(3) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(3);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(4) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(4);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(5) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(5);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(6) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(6);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(7) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(7);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(8) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(8);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(9) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(9);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(10) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(10);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(11) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(11);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(12) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(12);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(13) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(13);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(14) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(14);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(15) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(15);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(16) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(16);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(17) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(17);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(18) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(18);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(19) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(19);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(20) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(20);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(21) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(21);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(22) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(22);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(23) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(23);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(24) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(24);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(25) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(25);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(26) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it2(26);
                ap_reg_ppstg_tmp_4_reg_635_pp0_it4(0) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(0);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(1) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(1);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(2) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(2);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(3) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(3);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(4) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(4);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(5) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(5);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(6) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(6);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(7) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(7);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(8) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(8);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(9) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(9);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(10) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(10);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(11) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(11);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(12) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(12);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(13) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(13);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(14) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(14);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(15) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(15);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(16) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(16);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(17) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(17);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(18) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(18);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(19) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(19);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(20) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(20);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(21) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(21);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(22) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(22);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(23) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(23);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(24) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(24);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(25) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(25);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(26) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it3(26);
                ap_reg_ppstg_tmp_4_reg_635_pp0_it5(0) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(0);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(1) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(1);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(2) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(2);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(3) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(3);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(4) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(4);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(5) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(5);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(6) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(6);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(7) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(7);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(8) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(8);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(9) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(9);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(10) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(10);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(11) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(11);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(12) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(12);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(13) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(13);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(14) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(14);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(15) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(15);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(16) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(16);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(17) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(17);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(18) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(18);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(19) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(19);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(20) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(20);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(21) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(21);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(22) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(22);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(23) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(23);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(24) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(24);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(25) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(25);
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(26) <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it1 <= exitcond_flatten_reg_609;
                exitcond_flatten_reg_609 <= exitcond_flatten_fu_236_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                bound_reg_604 <= bound_fu_230_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it2 = ap_const_lv1_0)) then
                tmp3_cast_reg_685(0) <= tmp3_cast_fu_358_p1(0);
    tmp3_cast_reg_685(1) <= tmp3_cast_fu_358_p1(1);
    tmp3_cast_reg_685(2) <= tmp3_cast_fu_358_p1(2);
    tmp3_cast_reg_685(3) <= tmp3_cast_fu_358_p1(3);
    tmp3_cast_reg_685(4) <= tmp3_cast_fu_358_p1(4);
    tmp3_cast_reg_685(5) <= tmp3_cast_fu_358_p1(5);
    tmp3_cast_reg_685(6) <= tmp3_cast_fu_358_p1(6);
    tmp3_cast_reg_685(7) <= tmp3_cast_fu_358_p1(7);
    tmp3_cast_reg_685(8) <= tmp3_cast_fu_358_p1(8);
    tmp3_cast_reg_685(9) <= tmp3_cast_fu_358_p1(9);
    tmp3_cast_reg_685(10) <= tmp3_cast_fu_358_p1(10);
    tmp3_cast_reg_685(11) <= tmp3_cast_fu_358_p1(11);
    tmp3_cast_reg_685(12) <= tmp3_cast_fu_358_p1(12);
                tmp_11_reg_695(1) <= tmp_11_fu_368_p2(1);
    tmp_11_reg_695(2) <= tmp_11_fu_368_p2(2);
    tmp_11_reg_695(3) <= tmp_11_fu_368_p2(3);
    tmp_11_reg_695(4) <= tmp_11_fu_368_p2(4);
    tmp_11_reg_695(5) <= tmp_11_fu_368_p2(5);
    tmp_11_reg_695(6) <= tmp_11_fu_368_p2(6);
    tmp_11_reg_695(7) <= tmp_11_fu_368_p2(7);
    tmp_11_reg_695(8) <= tmp_11_fu_368_p2(8);
    tmp_11_reg_695(9) <= tmp_11_fu_368_p2(9);
    tmp_11_reg_695(10) <= tmp_11_fu_368_p2(10);
    tmp_11_reg_695(11) <= tmp_11_fu_368_p2(11);
    tmp_11_reg_695(12) <= tmp_11_fu_368_p2(12);
    tmp_11_reg_695(13) <= tmp_11_fu_368_p2(13);
    tmp_11_reg_695(14) <= tmp_11_fu_368_p2(14);
    tmp_11_reg_695(15) <= tmp_11_fu_368_p2(15);
                tmp_5_cast2_reg_680(0) <= tmp_5_cast2_fu_330_p1(0);
    tmp_5_cast2_reg_680(1) <= tmp_5_cast2_fu_330_p1(1);
    tmp_5_cast2_reg_680(2) <= tmp_5_cast2_fu_330_p1(2);
    tmp_5_cast2_reg_680(3) <= tmp_5_cast2_fu_330_p1(3);
    tmp_5_cast2_reg_680(4) <= tmp_5_cast2_fu_330_p1(4);
    tmp_5_cast2_reg_680(5) <= tmp_5_cast2_fu_330_p1(5);
    tmp_5_cast2_reg_680(6) <= tmp_5_cast2_fu_330_p1(6);
    tmp_5_cast2_reg_680(7) <= tmp_5_cast2_fu_330_p1(7);
                tmp_7_reg_690(1) <= tmp_7_fu_362_p2(1);
    tmp_7_reg_690(2) <= tmp_7_fu_362_p2(2);
    tmp_7_reg_690(3) <= tmp_7_fu_362_p2(3);
    tmp_7_reg_690(4) <= tmp_7_fu_362_p2(4);
    tmp_7_reg_690(5) <= tmp_7_fu_362_p2(5);
    tmp_7_reg_690(6) <= tmp_7_fu_362_p2(6);
    tmp_7_reg_690(7) <= tmp_7_fu_362_p2(7);
    tmp_7_reg_690(8) <= tmp_7_fu_362_p2(8);
    tmp_7_reg_690(9) <= tmp_7_fu_362_p2(9);
    tmp_7_reg_690(10) <= tmp_7_fu_362_p2(10);
    tmp_7_reg_690(11) <= tmp_7_fu_362_p2(11);
    tmp_7_reg_690(12) <= tmp_7_fu_362_p2(12);
    tmp_7_reg_690(13) <= tmp_7_fu_362_p2(13);
    tmp_7_reg_690(14) <= tmp_7_fu_362_p2(14);
    tmp_7_reg_690(15) <= tmp_7_fu_362_p2(15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it3 = ap_const_lv1_0)) then
                tmp5_reg_710(1) <= tmp5_fu_479_p2(1);
    tmp5_reg_710(2) <= tmp5_fu_479_p2(2);
    tmp5_reg_710(3) <= tmp5_fu_479_p2(3);
    tmp5_reg_710(4) <= tmp5_fu_479_p2(4);
    tmp5_reg_710(5) <= tmp5_fu_479_p2(5);
    tmp5_reg_710(6) <= tmp5_fu_479_p2(6);
    tmp5_reg_710(7) <= tmp5_fu_479_p2(7);
    tmp5_reg_710(8) <= tmp5_fu_479_p2(8);
    tmp5_reg_710(9) <= tmp5_fu_479_p2(9);
    tmp5_reg_710(10) <= tmp5_fu_479_p2(10);
    tmp5_reg_710(11) <= tmp5_fu_479_p2(11);
    tmp5_reg_710(12) <= tmp5_fu_479_p2(12);
    tmp5_reg_710(13) <= tmp5_fu_479_p2(13);
    tmp5_reg_710(14) <= tmp5_fu_479_p2(14);
    tmp5_reg_710(15) <= tmp5_fu_479_p2(15);
                tmp7_reg_715(1) <= tmp7_fu_516_p2(1);
    tmp7_reg_715(2) <= tmp7_fu_516_p2(2);
    tmp7_reg_715(3) <= tmp7_fu_516_p2(3);
    tmp7_reg_715(4) <= tmp7_fu_516_p2(4);
    tmp7_reg_715(5) <= tmp7_fu_516_p2(5);
    tmp7_reg_715(6) <= tmp7_fu_516_p2(6);
    tmp7_reg_715(7) <= tmp7_fu_516_p2(7);
    tmp7_reg_715(8) <= tmp7_fu_516_p2(8);
    tmp7_reg_715(9) <= tmp7_fu_516_p2(9);
    tmp7_reg_715(10) <= tmp7_fu_516_p2(10);
    tmp7_reg_715(11) <= tmp7_fu_516_p2(11);
    tmp7_reg_715(12) <= tmp7_fu_516_p2(12);
    tmp7_reg_715(13) <= tmp7_fu_516_p2(13);
    tmp7_reg_715(14) <= tmp7_fu_516_p2(14);
    tmp7_reg_715(15) <= tmp7_fu_516_p2(15);
                tmp8_reg_720(1) <= tmp8_fu_521_p2(1);
    tmp8_reg_720(2) <= tmp8_fu_521_p2(2);
    tmp8_reg_720(3) <= tmp8_fu_521_p2(3);
    tmp8_reg_720(4) <= tmp8_fu_521_p2(4);
    tmp8_reg_720(5) <= tmp8_fu_521_p2(5);
    tmp8_reg_720(6) <= tmp8_fu_521_p2(6);
    tmp8_reg_720(7) <= tmp8_fu_521_p2(7);
    tmp8_reg_720(8) <= tmp8_fu_521_p2(8);
    tmp8_reg_720(9) <= tmp8_fu_521_p2(9);
    tmp8_reg_720(10) <= tmp8_fu_521_p2(10);
    tmp8_reg_720(11) <= tmp8_fu_521_p2(11);
    tmp8_reg_720(12) <= tmp8_fu_521_p2(12);
    tmp8_reg_720(13) <= tmp8_fu_521_p2(13);
                tmp_5_reg_700 <= tmp_1_fu_422_p2(15 downto 8);
                tmp_9_reg_705(4) <= tmp_9_fu_473_p2(4);
    tmp_9_reg_705(5) <= tmp_9_fu_473_p2(5);
    tmp_9_reg_705(6) <= tmp_9_fu_473_p2(6);
    tmp_9_reg_705(7) <= tmp_9_fu_473_p2(7);
    tmp_9_reg_705(8) <= tmp_9_fu_473_p2(8);
    tmp_9_reg_705(9) <= tmp_9_fu_473_p2(9);
    tmp_9_reg_705(10) <= tmp_9_fu_473_p2(10);
    tmp_9_reg_705(11) <= tmp_9_fu_473_p2(11);
    tmp_9_reg_705(12) <= tmp_9_fu_473_p2(12);
    tmp_9_reg_705(13) <= tmp_9_fu_473_p2(13);
    tmp_9_reg_705(14) <= tmp_9_fu_473_p2(14);
    tmp_9_reg_705(15) <= tmp_9_fu_473_p2(15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4 = ap_const_lv1_0)) then
                tmp_10_reg_725 <= tmp_s_fu_538_p2(15 downto 8);
                tmp_15_reg_730 <= tmp_14_fu_556_p2(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_609 = ap_const_lv1_0))) then
                tmp_4_reg_635(0) <= tmp_4_fu_317_p1(0);
    tmp_4_reg_635(1) <= tmp_4_fu_317_p1(1);
    tmp_4_reg_635(2) <= tmp_4_fu_317_p1(2);
    tmp_4_reg_635(3) <= tmp_4_fu_317_p1(3);
    tmp_4_reg_635(4) <= tmp_4_fu_317_p1(4);
    tmp_4_reg_635(5) <= tmp_4_fu_317_p1(5);
    tmp_4_reg_635(6) <= tmp_4_fu_317_p1(6);
    tmp_4_reg_635(7) <= tmp_4_fu_317_p1(7);
    tmp_4_reg_635(8) <= tmp_4_fu_317_p1(8);
    tmp_4_reg_635(9) <= tmp_4_fu_317_p1(9);
    tmp_4_reg_635(10) <= tmp_4_fu_317_p1(10);
    tmp_4_reg_635(11) <= tmp_4_fu_317_p1(11);
    tmp_4_reg_635(12) <= tmp_4_fu_317_p1(12);
    tmp_4_reg_635(13) <= tmp_4_fu_317_p1(13);
    tmp_4_reg_635(14) <= tmp_4_fu_317_p1(14);
    tmp_4_reg_635(15) <= tmp_4_fu_317_p1(15);
    tmp_4_reg_635(16) <= tmp_4_fu_317_p1(16);
    tmp_4_reg_635(17) <= tmp_4_fu_317_p1(17);
    tmp_4_reg_635(18) <= tmp_4_fu_317_p1(18);
    tmp_4_reg_635(19) <= tmp_4_fu_317_p1(19);
    tmp_4_reg_635(20) <= tmp_4_fu_317_p1(20);
    tmp_4_reg_635(21) <= tmp_4_fu_317_p1(21);
    tmp_4_reg_635(22) <= tmp_4_fu_317_p1(22);
    tmp_4_reg_635(23) <= tmp_4_fu_317_p1(23);
    tmp_4_reg_635(24) <= tmp_4_fu_317_p1(24);
    tmp_4_reg_635(25) <= tmp_4_fu_317_p1(25);
    tmp_4_reg_635(26) <= tmp_4_fu_317_p1(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then
                x_mid2_reg_623 <= x_mid2_fu_266_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_236_p2 = ap_const_lv1_0))) then
                y_mid2_reg_618 <= y_mid2_fu_252_p3;
            end if;
        end if;
    end process;
    tmp_4_reg_635(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_4_reg_635_pp0_it2(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_4_reg_635_pp0_it3(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_4_reg_635_pp0_it4(63 downto 27) <= "0000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_4_reg_635_pp0_it5(63 downto 27) <= "0000000000000000000000000000000000000";
    tmp_5_cast2_reg_680(15 downto 8) <= "00000000";
    tmp3_cast_reg_685(15 downto 13) <= "000";
    tmp_7_reg_690(0) <= '0';
    tmp_11_reg_695(0) <= '0';
    tmp_9_reg_705(3 downto 0) <= "0000";
    tmp5_reg_710(0) <= '0';
    tmp7_reg_715(0) <= '0';
    tmp8_reg_720(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_236_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_236_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_2;
                end if;
            when ap_ST_st9_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st9_fsm_2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;

    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_384 assign process. --
    ap_sig_bdd_384_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_384 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_2 assign process. --
    ap_sig_cseq_ST_st9_fsm_2_assign_proc : process(ap_sig_bdd_384)
    begin
        if (ap_sig_bdd_384) then 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_230_p0 <= bound_fu_230_p00(16 - 1 downto 0);
    bound_fu_230_p00 <= std_logic_vector(resize(unsigned(in_width_read),32));
    bound_fu_230_p1 <= bound_fu_230_p10(16 - 1 downto 0);
    bound_fu_230_p10 <= std_logic_vector(resize(unsigned(in_height_read),32));
    bound_fu_230_p2 <= std_logic_vector(resize(unsigned(bound_fu_230_p0) * unsigned(bound_fu_230_p1), 32));
    exitcond_flatten_fu_236_p2 <= "1" when (indvar_flatten_reg_188 = bound_reg_604) else "0";
    exitcond_fu_247_p2 <= "1" when (y_reg_210 = in_height_read) else "0";
    in_channels_ch1_address0 <= tmp_4_fu_317_p1(22 - 1 downto 0);

    -- in_channels_ch1_ce0 assign process. --
    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_4_fu_317_p1(22 - 1 downto 0);

    -- in_channels_ch2_ce0 assign process. --
    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_4_fu_317_p1(22 - 1 downto 0);

    -- in_channels_ch3_ce0 assign process. --
    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_241_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_188) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= ap_reg_ppstg_tmp_4_reg_635_pp0_it4(22 - 1 downto 0);

    -- out_channels_ch1_ce0 assign process. --
    out_channels_ch1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it5)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= std_logic_vector(unsigned(tmp_5_reg_700) + unsigned(ap_const_lv8_10));

    -- out_channels_ch1_we0 assign process. --
    out_channels_ch1_we0_assign_proc : process(ap_reg_ppiten_pp0_it5, ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it4 = ap_const_lv1_0)))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= ap_reg_ppstg_tmp_4_reg_635_pp0_it5(22 - 1 downto 0);

    -- out_channels_ch2_ce0 assign process. --
    out_channels_ch2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= (tmp_10_reg_725 xor ap_const_lv8_80);

    -- out_channels_ch2_we0 assign process. --
    out_channels_ch2_we0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5 = ap_const_lv1_0)))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= ap_reg_ppstg_tmp_4_reg_635_pp0_it5(22 - 1 downto 0);

    -- out_channels_ch3_ce0 assign process. --
    out_channels_ch3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= (tmp_15_reg_730 xor ap_const_lv8_80);

    -- out_channels_ch3_we0 assign process. --
    out_channels_ch3_we0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_609_pp0_it5 = ap_const_lv1_0)))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_311_p2 <= std_logic_vector(unsigned(p_addr_fu_305_p2) + unsigned(tmp_2_trn_cast_fu_280_p1));
    p_addr_fu_305_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_290_p1) + unsigned(p_shl7_cast_fu_301_p1));
        p_neg_cast_fu_495_p1 <= std_logic_vector(resize(signed(p_neg_fu_489_p2),14));

    p_neg_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_shl3_cast9_fu_465_p1));
    p_shl1_cast_fu_506_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_499_p3),14));
    p_shl1_fu_499_p3 <= (ap_reg_ppstg_B_reg_672_pp0_it3 & ap_const_lv1_0);
    p_shl2_cast_fu_454_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_447_p3),16));
    p_shl2_fu_447_p3 <= (ap_reg_ppstg_B_reg_672_pp0_it3 & ap_const_lv7_0);
    p_shl3_cast9_fu_465_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_458_p3),13));
    p_shl3_cast_fu_469_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_458_p3),16));
    p_shl3_fu_458_p3 <= (ap_reg_ppstg_B_reg_672_pp0_it3 & ap_const_lv4_0);
    p_shl4_cast_fu_406_p1 <= std_logic_vector(resize(unsigned(p_shl4_fu_399_p3),16));
    p_shl4_fu_399_p3 <= (ap_reg_ppstg_G_reg_665_pp0_it3 & ap_const_lv7_0);
    p_shl5_cast_fu_384_p1 <= std_logic_vector(resize(unsigned(p_shl5_fu_377_p3),16));
    p_shl5_fu_377_p3 <= (ap_reg_ppstg_R_reg_657_pp0_it3 & ap_const_lv6_0);
    p_shl6_cast_fu_395_p1 <= std_logic_vector(resize(unsigned(p_shl6_fu_388_p3),16));
    p_shl6_fu_388_p3 <= (ap_reg_ppstg_R_reg_657_pp0_it3 & ap_const_lv1_0);
    p_shl7_cast_fu_301_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_294_p3),27));
    p_shl_cast_fu_290_p1 <= std_logic_vector(resize(unsigned(tmp_fu_283_p3),27));
    tmp1_fu_416_p2 <= std_logic_vector(unsigned(tmp2_fu_410_p2) + unsigned(p_shl5_cast_fu_384_p1));
    tmp2_fu_410_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_395_p1) + unsigned(p_shl4_cast_fu_406_p1));
    tmp3_cast_fu_358_p1 <= std_logic_vector(resize(unsigned(tmp3_fu_352_p2),16));
    tmp3_fu_352_p2 <= std_logic_vector(unsigned(tmp4_cast_fu_348_p1) + unsigned(tmp_8_fu_336_p2));
    tmp4_cast_fu_348_p1 <= std_logic_vector(resize(unsigned(tmp4_fu_342_p2),13));
    tmp4_fu_342_p2 <= std_logic_vector(unsigned(tmp_5_cast1_fu_327_p1) + unsigned(ap_const_lv9_80));
    tmp5_fu_479_p2 <= std_logic_vector(signed(tmp_12_cast_fu_443_p1) + signed(tmp_7_reg_690));
    tmp6_fu_533_p2 <= std_logic_vector(unsigned(tmp_9_reg_705) + unsigned(ap_const_lv16_80));
    tmp7_fu_516_p2 <= std_logic_vector(unsigned(tmp_11_reg_695) + unsigned(tmp_12_fu_484_p2));
        tmp8_cast_fu_553_p1 <= std_logic_vector(resize(signed(tmp8_reg_720),16));

    tmp8_fu_521_p2 <= std_logic_vector(signed(tmp_13_fu_510_p2) + signed(ap_const_lv14_80));
    tmp_11_fu_368_p0 <= tmp_11_fu_368_p00(8 - 1 downto 0);
    tmp_11_fu_368_p00 <= std_logic_vector(resize(unsigned(R_reg_657),16));
    tmp_11_fu_368_p2 <= std_logic_vector(resize(unsigned(tmp_11_fu_368_p0) * unsigned(ap_const_lv16_7A), 16));
        tmp_12_cast_fu_443_p1 <= std_logic_vector(resize(signed(tmp_6_fu_437_p2),16));

    tmp_12_fu_484_p0 <= tmp_5_cast2_reg_680(8 - 1 downto 0);
    tmp_12_fu_484_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_12_fu_484_p0) * signed(ap_const_lv16_FFA2))), 16));
    tmp_13_fu_510_p2 <= std_logic_vector(signed(p_neg_cast_fu_495_p1) - signed(p_shl1_cast_fu_506_p1));
    tmp_14_fu_556_p2 <= std_logic_vector(signed(tmp8_cast_fu_553_p1) + signed(tmp7_reg_715));
    tmp_1_fu_422_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_685) + unsigned(tmp1_fu_416_p2));
    tmp_2_fu_294_p3 <= (x_mid2_reg_623 & ap_const_lv8_0);
    tmp_2_trn_cast_fu_280_p1 <= std_logic_vector(resize(unsigned(y_mid2_reg_618),27));
    tmp_4_fu_317_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_311_p2),64));
    tmp_5_cast1_fu_327_p1 <= std_logic_vector(resize(unsigned(G_reg_665),9));
    tmp_5_cast2_fu_330_p1 <= std_logic_vector(resize(unsigned(G_reg_665),16));
    tmp_6_fu_437_p0 <= tmp_6_fu_437_p00(8 - 1 downto 0);
    tmp_6_fu_437_p00 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_R_reg_657_pp0_it3),15));
    tmp_6_fu_437_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_6_fu_437_p0) * signed(ap_const_lv15_7FDA))), 15));
    tmp_7_fu_362_p0 <= tmp_7_fu_362_p00(8 - 1 downto 0);
    tmp_7_fu_362_p00 <= std_logic_vector(resize(unsigned(G_reg_665),16));
    tmp_7_fu_362_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_7_fu_362_p0) * signed(ap_const_lv16_FFB6))), 16));
    tmp_8_fu_336_p0 <= tmp_8_fu_336_p00(8 - 1 downto 0);
    tmp_8_fu_336_p00 <= std_logic_vector(resize(unsigned(B_reg_672),13));
    tmp_8_fu_336_p2 <= std_logic_vector(resize(unsigned(tmp_8_fu_336_p0) * unsigned(ap_const_lv13_19), 13));
    tmp_9_fu_473_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_454_p1) - unsigned(p_shl3_cast_fu_469_p1));
    tmp_fu_283_p3 <= (x_mid2_reg_623 & ap_const_lv10_0);
    tmp_s_fu_538_p2 <= std_logic_vector(unsigned(tmp6_fu_533_p2) + unsigned(tmp5_reg_710));
    x_mid2_fu_266_p3 <= 
        x_s_fu_260_p2 when (exitcond_fu_247_p2(0) = '1') else 
        x_phi_fu_203_p4;

    -- x_phi_fu_203_p4 assign process. --
    x_phi_fu_203_p4_assign_proc : process(x_reg_199, exitcond_flatten_reg_609, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, x_mid2_reg_623)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_609 = ap_const_lv1_0))) then 
            x_phi_fu_203_p4 <= x_mid2_reg_623;
        else 
            x_phi_fu_203_p4 <= x_reg_199;
        end if; 
    end process;

    x_s_fu_260_p2 <= std_logic_vector(unsigned(x_phi_fu_203_p4) + unsigned(ap_const_lv16_1));
    y_1_fu_274_p2 <= std_logic_vector(unsigned(y_mid2_fu_252_p3) + unsigned(ap_const_lv16_1));
    y_mid2_fu_252_p3 <= 
        ap_const_lv16_0 when (exitcond_fu_247_p2(0) = '1') else 
        y_reg_210;
end behav;
