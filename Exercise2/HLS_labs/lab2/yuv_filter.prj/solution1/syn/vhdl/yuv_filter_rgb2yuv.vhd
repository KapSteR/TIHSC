-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_rgb2yuv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_rgb2yuv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv16_7A : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal x_1_fu_214_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_1_reg_561 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal p_addr_fu_244_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr_reg_566 : STD_LOGIC_VECTOR (26 downto 0);
    signal exitcond1_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_265_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_reg_574 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal tmp_11_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_579 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal R_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal G_reg_609 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_616 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast2_fu_293_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_cast2_reg_624 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal tmp3_cast_fu_321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_cast_reg_629 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_325_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_634 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_331_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_639 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_644 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal tmp_9_fu_436_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_442_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_reg_659 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_484_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_reg_664 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_10_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal tmp_16_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_186 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_197 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal tmp_fu_220_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_fu_232_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl_cast_fu_228_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl7_cast_fu_240_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_trn_cast_fu_271_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr1_fu_275_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_8_fu_299_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast1_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_305_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_cast_fu_311_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_299_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_315_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_fu_325_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_331_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_340_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_fu_351_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_362_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_cast_fu_358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_373_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl5_cast_fu_347_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_379_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_385_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_1_fu_385_p2 : signal is "no";
    signal tmp_6_fu_400_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_400_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_fu_410_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_fu_421_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_cast_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_447_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast9_fu_428_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_fu_452_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_462_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_cast_fu_458_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_469_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_fu_447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_473_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp6_fu_496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_2_fu_501_p2 : signal is "no";
    signal tmp8_cast_fu_516_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_519_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_15_fu_519_p2 : signal is "no";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_331_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_400_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_325_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_299_p00 : STD_LOGIC_VECTOR (12 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- x_reg_186 assign process. --
    x_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_260_p2)))) then 
                x_reg_186 <= x_1_reg_561;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_186 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- y_reg_197 assign process. --
    y_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                y_reg_197 <= y_1_reg_574;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_209_p2 = ap_const_lv1_0))) then 
                y_reg_197 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                B_reg_616 <= in_channels_ch3_q0;
                G_reg_609 <= in_channels_ch2_q0;
                R_reg_601 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_209_p2 = ap_const_lv1_0))) then
                p_addr_reg_566(8) <= p_addr_fu_244_p2(8);
    p_addr_reg_566(9) <= p_addr_fu_244_p2(9);
    p_addr_reg_566(10) <= p_addr_fu_244_p2(10);
    p_addr_reg_566(11) <= p_addr_fu_244_p2(11);
    p_addr_reg_566(12) <= p_addr_fu_244_p2(12);
    p_addr_reg_566(13) <= p_addr_fu_244_p2(13);
    p_addr_reg_566(14) <= p_addr_fu_244_p2(14);
    p_addr_reg_566(15) <= p_addr_fu_244_p2(15);
    p_addr_reg_566(16) <= p_addr_fu_244_p2(16);
    p_addr_reg_566(17) <= p_addr_fu_244_p2(17);
    p_addr_reg_566(18) <= p_addr_fu_244_p2(18);
    p_addr_reg_566(19) <= p_addr_fu_244_p2(19);
    p_addr_reg_566(20) <= p_addr_fu_244_p2(20);
    p_addr_reg_566(21) <= p_addr_fu_244_p2(21);
    p_addr_reg_566(22) <= p_addr_fu_244_p2(22);
    p_addr_reg_566(23) <= p_addr_fu_244_p2(23);
    p_addr_reg_566(24) <= p_addr_fu_244_p2(24);
    p_addr_reg_566(25) <= p_addr_fu_244_p2(25);
    p_addr_reg_566(26) <= p_addr_fu_244_p2(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp3_cast_reg_629(0) <= tmp3_cast_fu_321_p1(0);
    tmp3_cast_reg_629(1) <= tmp3_cast_fu_321_p1(1);
    tmp3_cast_reg_629(2) <= tmp3_cast_fu_321_p1(2);
    tmp3_cast_reg_629(3) <= tmp3_cast_fu_321_p1(3);
    tmp3_cast_reg_629(4) <= tmp3_cast_fu_321_p1(4);
    tmp3_cast_reg_629(5) <= tmp3_cast_fu_321_p1(5);
    tmp3_cast_reg_629(6) <= tmp3_cast_fu_321_p1(6);
    tmp3_cast_reg_629(7) <= tmp3_cast_fu_321_p1(7);
    tmp3_cast_reg_629(8) <= tmp3_cast_fu_321_p1(8);
    tmp3_cast_reg_629(9) <= tmp3_cast_fu_321_p1(9);
    tmp3_cast_reg_629(10) <= tmp3_cast_fu_321_p1(10);
    tmp3_cast_reg_629(11) <= tmp3_cast_fu_321_p1(11);
    tmp3_cast_reg_629(12) <= tmp3_cast_fu_321_p1(12);
                tmp_12_reg_639(1) <= tmp_12_fu_331_p2(1);
    tmp_12_reg_639(2) <= tmp_12_fu_331_p2(2);
    tmp_12_reg_639(3) <= tmp_12_fu_331_p2(3);
    tmp_12_reg_639(4) <= tmp_12_fu_331_p2(4);
    tmp_12_reg_639(5) <= tmp_12_fu_331_p2(5);
    tmp_12_reg_639(6) <= tmp_12_fu_331_p2(6);
    tmp_12_reg_639(7) <= tmp_12_fu_331_p2(7);
    tmp_12_reg_639(8) <= tmp_12_fu_331_p2(8);
    tmp_12_reg_639(9) <= tmp_12_fu_331_p2(9);
    tmp_12_reg_639(10) <= tmp_12_fu_331_p2(10);
    tmp_12_reg_639(11) <= tmp_12_fu_331_p2(11);
    tmp_12_reg_639(12) <= tmp_12_fu_331_p2(12);
    tmp_12_reg_639(13) <= tmp_12_fu_331_p2(13);
    tmp_12_reg_639(14) <= tmp_12_fu_331_p2(14);
    tmp_12_reg_639(15) <= tmp_12_fu_331_p2(15);
                tmp_5_cast2_reg_624(0) <= tmp_5_cast2_fu_293_p1(0);
    tmp_5_cast2_reg_624(1) <= tmp_5_cast2_fu_293_p1(1);
    tmp_5_cast2_reg_624(2) <= tmp_5_cast2_fu_293_p1(2);
    tmp_5_cast2_reg_624(3) <= tmp_5_cast2_fu_293_p1(3);
    tmp_5_cast2_reg_624(4) <= tmp_5_cast2_fu_293_p1(4);
    tmp_5_cast2_reg_624(5) <= tmp_5_cast2_fu_293_p1(5);
    tmp_5_cast2_reg_624(6) <= tmp_5_cast2_fu_293_p1(6);
    tmp_5_cast2_reg_624(7) <= tmp_5_cast2_fu_293_p1(7);
                tmp_7_reg_634(1) <= tmp_7_fu_325_p2(1);
    tmp_7_reg_634(2) <= tmp_7_fu_325_p2(2);
    tmp_7_reg_634(3) <= tmp_7_fu_325_p2(3);
    tmp_7_reg_634(4) <= tmp_7_fu_325_p2(4);
    tmp_7_reg_634(5) <= tmp_7_fu_325_p2(5);
    tmp_7_reg_634(6) <= tmp_7_fu_325_p2(6);
    tmp_7_reg_634(7) <= tmp_7_fu_325_p2(7);
    tmp_7_reg_634(8) <= tmp_7_fu_325_p2(8);
    tmp_7_reg_634(9) <= tmp_7_fu_325_p2(9);
    tmp_7_reg_634(10) <= tmp_7_fu_325_p2(10);
    tmp_7_reg_634(11) <= tmp_7_fu_325_p2(11);
    tmp_7_reg_634(12) <= tmp_7_fu_325_p2(12);
    tmp_7_reg_634(13) <= tmp_7_fu_325_p2(13);
    tmp_7_reg_634(14) <= tmp_7_fu_325_p2(14);
    tmp_7_reg_634(15) <= tmp_7_fu_325_p2(15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp5_reg_654(1) <= tmp5_fu_442_p2(1);
    tmp5_reg_654(2) <= tmp5_fu_442_p2(2);
    tmp5_reg_654(3) <= tmp5_fu_442_p2(3);
    tmp5_reg_654(4) <= tmp5_fu_442_p2(4);
    tmp5_reg_654(5) <= tmp5_fu_442_p2(5);
    tmp5_reg_654(6) <= tmp5_fu_442_p2(6);
    tmp5_reg_654(7) <= tmp5_fu_442_p2(7);
    tmp5_reg_654(8) <= tmp5_fu_442_p2(8);
    tmp5_reg_654(9) <= tmp5_fu_442_p2(9);
    tmp5_reg_654(10) <= tmp5_fu_442_p2(10);
    tmp5_reg_654(11) <= tmp5_fu_442_p2(11);
    tmp5_reg_654(12) <= tmp5_fu_442_p2(12);
    tmp5_reg_654(13) <= tmp5_fu_442_p2(13);
    tmp5_reg_654(14) <= tmp5_fu_442_p2(14);
    tmp5_reg_654(15) <= tmp5_fu_442_p2(15);
                tmp7_reg_659(1) <= tmp7_fu_479_p2(1);
    tmp7_reg_659(2) <= tmp7_fu_479_p2(2);
    tmp7_reg_659(3) <= tmp7_fu_479_p2(3);
    tmp7_reg_659(4) <= tmp7_fu_479_p2(4);
    tmp7_reg_659(5) <= tmp7_fu_479_p2(5);
    tmp7_reg_659(6) <= tmp7_fu_479_p2(6);
    tmp7_reg_659(7) <= tmp7_fu_479_p2(7);
    tmp7_reg_659(8) <= tmp7_fu_479_p2(8);
    tmp7_reg_659(9) <= tmp7_fu_479_p2(9);
    tmp7_reg_659(10) <= tmp7_fu_479_p2(10);
    tmp7_reg_659(11) <= tmp7_fu_479_p2(11);
    tmp7_reg_659(12) <= tmp7_fu_479_p2(12);
    tmp7_reg_659(13) <= tmp7_fu_479_p2(13);
    tmp7_reg_659(14) <= tmp7_fu_479_p2(14);
    tmp7_reg_659(15) <= tmp7_fu_479_p2(15);
                tmp8_reg_664(1) <= tmp8_fu_484_p2(1);
    tmp8_reg_664(2) <= tmp8_fu_484_p2(2);
    tmp8_reg_664(3) <= tmp8_fu_484_p2(3);
    tmp8_reg_664(4) <= tmp8_fu_484_p2(4);
    tmp8_reg_664(5) <= tmp8_fu_484_p2(5);
    tmp8_reg_664(6) <= tmp8_fu_484_p2(6);
    tmp8_reg_664(7) <= tmp8_fu_484_p2(7);
    tmp8_reg_664(8) <= tmp8_fu_484_p2(8);
    tmp8_reg_664(9) <= tmp8_fu_484_p2(9);
    tmp8_reg_664(10) <= tmp8_fu_484_p2(10);
    tmp8_reg_664(11) <= tmp8_fu_484_p2(11);
    tmp8_reg_664(12) <= tmp8_fu_484_p2(12);
    tmp8_reg_664(13) <= tmp8_fu_484_p2(13);
                tmp_5_reg_644 <= tmp_1_fu_385_p2(15 downto 8);
                tmp_9_reg_649(4) <= tmp_9_fu_436_p2(4);
    tmp_9_reg_649(5) <= tmp_9_fu_436_p2(5);
    tmp_9_reg_649(6) <= tmp_9_fu_436_p2(6);
    tmp_9_reg_649(7) <= tmp_9_fu_436_p2(7);
    tmp_9_reg_649(8) <= tmp_9_fu_436_p2(8);
    tmp_9_reg_649(9) <= tmp_9_fu_436_p2(9);
    tmp_9_reg_649(10) <= tmp_9_fu_436_p2(10);
    tmp_9_reg_649(11) <= tmp_9_fu_436_p2(11);
    tmp_9_reg_649(12) <= tmp_9_fu_436_p2(12);
    tmp_9_reg_649(13) <= tmp_9_fu_436_p2(13);
    tmp_9_reg_649(14) <= tmp_9_fu_436_p2(14);
    tmp_9_reg_649(15) <= tmp_9_fu_436_p2(15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_10_reg_669 <= tmp_2_fu_501_p2(15 downto 8);
                tmp_16_reg_674 <= tmp_15_fu_519_p2(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_260_p2))) then
                tmp_11_reg_579(0) <= tmp_11_fu_280_p1(0);
    tmp_11_reg_579(1) <= tmp_11_fu_280_p1(1);
    tmp_11_reg_579(2) <= tmp_11_fu_280_p1(2);
    tmp_11_reg_579(3) <= tmp_11_fu_280_p1(3);
    tmp_11_reg_579(4) <= tmp_11_fu_280_p1(4);
    tmp_11_reg_579(5) <= tmp_11_fu_280_p1(5);
    tmp_11_reg_579(6) <= tmp_11_fu_280_p1(6);
    tmp_11_reg_579(7) <= tmp_11_fu_280_p1(7);
    tmp_11_reg_579(8) <= tmp_11_fu_280_p1(8);
    tmp_11_reg_579(9) <= tmp_11_fu_280_p1(9);
    tmp_11_reg_579(10) <= tmp_11_fu_280_p1(10);
    tmp_11_reg_579(11) <= tmp_11_fu_280_p1(11);
    tmp_11_reg_579(12) <= tmp_11_fu_280_p1(12);
    tmp_11_reg_579(13) <= tmp_11_fu_280_p1(13);
    tmp_11_reg_579(14) <= tmp_11_fu_280_p1(14);
    tmp_11_reg_579(15) <= tmp_11_fu_280_p1(15);
    tmp_11_reg_579(16) <= tmp_11_fu_280_p1(16);
    tmp_11_reg_579(17) <= tmp_11_fu_280_p1(17);
    tmp_11_reg_579(18) <= tmp_11_fu_280_p1(18);
    tmp_11_reg_579(19) <= tmp_11_fu_280_p1(19);
    tmp_11_reg_579(20) <= tmp_11_fu_280_p1(20);
    tmp_11_reg_579(21) <= tmp_11_fu_280_p1(21);
    tmp_11_reg_579(22) <= tmp_11_fu_280_p1(22);
    tmp_11_reg_579(23) <= tmp_11_fu_280_p1(23);
    tmp_11_reg_579(24) <= tmp_11_fu_280_p1(24);
    tmp_11_reg_579(25) <= tmp_11_fu_280_p1(25);
    tmp_11_reg_579(26) <= tmp_11_fu_280_p1(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                x_1_reg_561 <= x_1_fu_214_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                y_1_reg_574 <= y_1_fu_265_p2;
            end if;
        end if;
    end process;
    p_addr_reg_566(7 downto 0) <= "00000000";
    tmp_11_reg_579(63 downto 27) <= "0000000000000000000000000000000000000";
    tmp_5_cast2_reg_624(15 downto 8) <= "00000000";
    tmp3_cast_reg_629(15 downto 13) <= "000";
    tmp_7_reg_634(0) <= '0';
    tmp_12_reg_639(0) <= '0';
    tmp_9_reg_649(3 downto 0) <= "0000";
    tmp5_reg_654(0) <= '0';
    tmp7_reg_659(0) <= '0';
    tmp8_reg_664(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_209_p2, exitcond_fu_260_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_209_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_260_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_209_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_209_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_209_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_209_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;

    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_104 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_123 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_123)
    begin
        if (ap_sig_bdd_123) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_209_p2 <= "1" when (x_reg_186 = in_width_read) else "0";
    exitcond_fu_260_p2 <= "1" when (y_reg_197 = in_height_read) else "0";
    in_channels_ch1_address0 <= tmp_11_fu_280_p1(22 - 1 downto 0);

    -- in_channels_ch1_ce0 assign process. --
    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_11_fu_280_p1(22 - 1 downto 0);

    -- in_channels_ch2_ce0 assign process. --
    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_11_fu_280_p1(22 - 1 downto 0);

    -- in_channels_ch3_ce0 assign process. --
    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_address0 <= tmp_11_reg_579(22 - 1 downto 0);

    -- out_channels_ch1_ce0 assign process. --
    out_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= std_logic_vector(unsigned(tmp_5_reg_644) + unsigned(ap_const_lv8_10));

    -- out_channels_ch1_we0 assign process. --
    out_channels_ch1_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= tmp_11_reg_579(22 - 1 downto 0);

    -- out_channels_ch2_ce0 assign process. --
    out_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= (tmp_10_reg_669 xor ap_const_lv8_80);

    -- out_channels_ch2_we0 assign process. --
    out_channels_ch2_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= tmp_11_reg_579(22 - 1 downto 0);

    -- out_channels_ch3_ce0 assign process. --
    out_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= (tmp_16_reg_674 xor ap_const_lv8_80);

    -- out_channels_ch3_we0 assign process. --
    out_channels_ch3_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_275_p2 <= std_logic_vector(unsigned(p_addr_reg_566) + unsigned(tmp_2_trn_cast_fu_271_p1));
    p_addr_fu_244_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_228_p1) + unsigned(p_shl7_cast_fu_240_p1));
        p_neg_cast_fu_458_p1 <= std_logic_vector(resize(signed(p_neg_fu_452_p2),14));

    p_neg_fu_452_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_shl3_cast9_fu_428_p1));
    p_shl1_cast_fu_469_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_462_p3),14));
    p_shl1_fu_462_p3 <= (B_reg_616 & ap_const_lv1_0);
    p_shl2_cast_fu_417_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_410_p3),16));
    p_shl2_fu_410_p3 <= (B_reg_616 & ap_const_lv7_0);
    p_shl3_cast9_fu_428_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_421_p3),13));
    p_shl3_cast_fu_432_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_421_p3),16));
    p_shl3_fu_421_p3 <= (B_reg_616 & ap_const_lv4_0);
    p_shl4_cast_fu_369_p1 <= std_logic_vector(resize(unsigned(p_shl4_fu_362_p3),16));
    p_shl4_fu_362_p3 <= (G_reg_609 & ap_const_lv7_0);
    p_shl5_cast_fu_347_p1 <= std_logic_vector(resize(unsigned(p_shl5_fu_340_p3),16));
    p_shl5_fu_340_p3 <= (R_reg_601 & ap_const_lv6_0);
    p_shl6_cast_fu_358_p1 <= std_logic_vector(resize(unsigned(p_shl6_fu_351_p3),16));
    p_shl6_fu_351_p3 <= (R_reg_601 & ap_const_lv1_0);
    p_shl7_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_232_p3),27));
    p_shl_cast_fu_228_p1 <= std_logic_vector(resize(unsigned(tmp_fu_220_p3),27));
    tmp1_fu_379_p2 <= std_logic_vector(unsigned(tmp2_fu_373_p2) + unsigned(p_shl5_cast_fu_347_p1));
    tmp2_fu_373_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_358_p1) + unsigned(p_shl4_cast_fu_369_p1));
    tmp3_cast_fu_321_p1 <= std_logic_vector(resize(unsigned(tmp3_fu_315_p2),16));
    tmp3_fu_315_p2 <= std_logic_vector(unsigned(tmp4_cast_fu_311_p1) + unsigned(tmp_8_fu_299_p2));
    tmp4_cast_fu_311_p1 <= std_logic_vector(resize(unsigned(tmp4_fu_305_p2),13));
    tmp4_fu_305_p2 <= std_logic_vector(unsigned(tmp_5_cast1_fu_290_p1) + unsigned(ap_const_lv9_80));
    tmp5_fu_442_p2 <= std_logic_vector(signed(tmp_12_cast_fu_406_p1) + signed(tmp_7_reg_634));
    tmp6_fu_496_p2 <= std_logic_vector(unsigned(tmp_9_reg_649) + unsigned(ap_const_lv16_80));
    tmp7_fu_479_p2 <= std_logic_vector(unsigned(tmp_12_reg_639) + unsigned(tmp_13_fu_447_p2));
        tmp8_cast_fu_516_p1 <= std_logic_vector(resize(signed(tmp8_reg_664),16));

    tmp8_fu_484_p2 <= std_logic_vector(signed(tmp_14_fu_473_p2) + signed(ap_const_lv14_80));
    tmp_11_fu_280_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_275_p2),64));
        tmp_12_cast_fu_406_p1 <= std_logic_vector(resize(signed(tmp_6_fu_400_p2),16));

    tmp_12_fu_331_p0 <= tmp_12_fu_331_p00(8 - 1 downto 0);
    tmp_12_fu_331_p00 <= std_logic_vector(resize(unsigned(R_reg_601),16));
    tmp_12_fu_331_p2 <= std_logic_vector(resize(unsigned(tmp_12_fu_331_p0) * unsigned(ap_const_lv16_7A), 16));
    tmp_13_fu_447_p0 <= tmp_5_cast2_reg_624(8 - 1 downto 0);
    tmp_13_fu_447_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_13_fu_447_p0) * signed(ap_const_lv16_FFA2))), 16));
    tmp_14_fu_473_p2 <= std_logic_vector(signed(p_neg_cast_fu_458_p1) - signed(p_shl1_cast_fu_469_p1));
    tmp_15_fu_519_p2 <= std_logic_vector(signed(tmp8_cast_fu_516_p1) + signed(tmp7_reg_659));
    tmp_1_fu_385_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_629) + unsigned(tmp1_fu_379_p2));
    tmp_2_fu_501_p2 <= std_logic_vector(unsigned(tmp6_fu_496_p2) + unsigned(tmp5_reg_654));
    tmp_2_trn_cast_fu_271_p1 <= std_logic_vector(resize(unsigned(y_reg_197),27));
    tmp_4_fu_232_p3 <= (x_reg_186 & ap_const_lv8_0);
    tmp_5_cast1_fu_290_p1 <= std_logic_vector(resize(unsigned(G_reg_609),9));
    tmp_5_cast2_fu_293_p1 <= std_logic_vector(resize(unsigned(G_reg_609),16));
    tmp_6_fu_400_p0 <= tmp_6_fu_400_p00(8 - 1 downto 0);
    tmp_6_fu_400_p00 <= std_logic_vector(resize(unsigned(R_reg_601),15));
    tmp_6_fu_400_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_6_fu_400_p0) * signed(ap_const_lv15_7FDA))), 15));
    tmp_7_fu_325_p0 <= tmp_7_fu_325_p00(8 - 1 downto 0);
    tmp_7_fu_325_p00 <= std_logic_vector(resize(unsigned(G_reg_609),16));
    tmp_7_fu_325_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_7_fu_325_p0) * signed(ap_const_lv16_FFB6))), 16));
    tmp_8_fu_299_p0 <= tmp_8_fu_299_p00(8 - 1 downto 0);
    tmp_8_fu_299_p00 <= std_logic_vector(resize(unsigned(B_reg_616),13));
    tmp_8_fu_299_p2 <= std_logic_vector(resize(unsigned(tmp_8_fu_299_p0) * unsigned(ap_const_lv13_19), 13));
    tmp_9_fu_436_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_417_p1) - unsigned(p_shl3_cast_fu_432_p1));
    tmp_fu_220_p3 <= (x_reg_186 & ap_const_lv10_0);
    x_1_fu_214_p2 <= std_logic_vector(unsigned(x_reg_186) + unsigned(ap_const_lv16_1));
    y_1_fu_265_p2 <= std_logic_vector(unsigned(y_reg_197) + unsigned(ap_const_lv16_1));
end behav;
