-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal x_2_fu_220_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_2_reg_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal p_addr_fu_250_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr_reg_597 : STD_LOGIC_VECTOR (26 downto 0);
    signal exitcond1_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_271_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_2_reg_605 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal tmp_13_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_610 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Y_reg_624 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_119 : BOOLEAN;
    signal D_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_639 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal E_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_646 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_322_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_reg_652 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_659 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal tmp_2_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_383_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_reg_674 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_reg_679 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp3_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_694 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal tmp_5_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_203 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_184 : BOOLEAN;
    signal tmp_fu_226_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_12_fu_238_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl8_cast_fu_234_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl9_cast_fu_246_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_trn_cast_fu_277_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr1_fu_281_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_32_cast_fu_291_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C_fu_294_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_316_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_316_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_fu_334_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_334_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_fu_340_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_23_fu_373_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_373_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_cast_fu_379_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_388_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_399_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_406_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp2_fu_410_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp2_fu_410_p2 : signal is "no";
    signal tmp2_cast_fu_415_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_cast_fu_395_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_25_fu_419_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp_fu_458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_482_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_482_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_cast_fu_488_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_fu_492_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp2_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_530_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp2_fu_556_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- x_reg_192 assign process. --
    x_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_266_p2)))) then 
                x_reg_192 <= x_2_reg_592;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_192 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- y_reg_203 assign process. --
    y_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                y_reg_203 <= y_2_reg_605;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_215_p2 = ap_const_lv1_0))) then 
                y_reg_203 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                D_reg_639 <= D_fu_300_p2;
                E_reg_646 <= E_fu_306_p2;
                tmp_20_reg_652(1) <= tmp_20_fu_322_p2(1);
    tmp_20_reg_652(2) <= tmp_20_fu_322_p2(2);
    tmp_20_reg_652(3) <= tmp_20_fu_322_p2(3);
    tmp_20_reg_652(4) <= tmp_20_fu_322_p2(4);
    tmp_20_reg_652(5) <= tmp_20_fu_322_p2(5);
    tmp_20_reg_652(6) <= tmp_20_fu_322_p2(6);
    tmp_20_reg_652(7) <= tmp_20_fu_322_p2(7);
    tmp_20_reg_652(8) <= tmp_20_fu_322_p2(8);
    tmp_20_reg_652(9) <= tmp_20_fu_322_p2(9);
    tmp_20_reg_652(10) <= tmp_20_fu_322_p2(10);
    tmp_20_reg_652(11) <= tmp_20_fu_322_p2(11);
    tmp_20_reg_652(12) <= tmp_20_fu_322_p2(12);
    tmp_20_reg_652(13) <= tmp_20_fu_322_p2(13);
    tmp_20_reg_652(14) <= tmp_20_fu_322_p2(14);
    tmp_20_reg_652(15) <= tmp_20_fu_322_p2(15);
    tmp_20_reg_652(16) <= tmp_20_fu_322_p2(16);
    tmp_20_reg_652(17) <= tmp_20_fu_322_p2(17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                Y_reg_624 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_215_p2 = ap_const_lv1_0))) then
                p_addr_reg_597(8) <= p_addr_fu_250_p2(8);
    p_addr_reg_597(9) <= p_addr_fu_250_p2(9);
    p_addr_reg_597(10) <= p_addr_fu_250_p2(10);
    p_addr_reg_597(11) <= p_addr_fu_250_p2(11);
    p_addr_reg_597(12) <= p_addr_fu_250_p2(12);
    p_addr_reg_597(13) <= p_addr_fu_250_p2(13);
    p_addr_reg_597(14) <= p_addr_fu_250_p2(14);
    p_addr_reg_597(15) <= p_addr_fu_250_p2(15);
    p_addr_reg_597(16) <= p_addr_fu_250_p2(16);
    p_addr_reg_597(17) <= p_addr_fu_250_p2(17);
    p_addr_reg_597(18) <= p_addr_fu_250_p2(18);
    p_addr_reg_597(19) <= p_addr_fu_250_p2(19);
    p_addr_reg_597(20) <= p_addr_fu_250_p2(20);
    p_addr_reg_597(21) <= p_addr_fu_250_p2(21);
    p_addr_reg_597(22) <= p_addr_fu_250_p2(22);
    p_addr_reg_597(23) <= p_addr_fu_250_p2(23);
    p_addr_reg_597(24) <= p_addr_fu_250_p2(24);
    p_addr_reg_597(25) <= p_addr_fu_250_p2(25);
    p_addr_reg_597(26) <= p_addr_fu_250_p2(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                phitmp2_reg_704 <= tmp_24_fu_492_p2(15 downto 8);
                tmp_4_reg_694 <= tmp_24_fu_492_p2(17 downto 16);
                tmp_5_reg_699 <= tmp_24_fu_492_p2(17 downto 17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                phitmp3_reg_689 <= tmp_25_fu_419_p2(15 downto 8);
                phitmp_reg_669 <= tmp_21_fu_340_p2(15 downto 8);
                tmp1_reg_674(1) <= tmp1_fu_383_p2(1);
    tmp1_reg_674(2) <= tmp1_fu_383_p2(2);
    tmp1_reg_674(3) <= tmp1_fu_383_p2(3);
    tmp1_reg_674(4) <= tmp1_fu_383_p2(4);
    tmp1_reg_674(5) <= tmp1_fu_383_p2(5);
    tmp1_reg_674(6) <= tmp1_fu_383_p2(6);
    tmp1_reg_674(7) <= tmp1_fu_383_p2(7);
    tmp1_reg_674(8) <= tmp1_fu_383_p2(8);
    tmp1_reg_674(9) <= tmp1_fu_383_p2(9);
    tmp1_reg_674(10) <= tmp1_fu_383_p2(10);
    tmp1_reg_674(11) <= tmp1_fu_383_p2(11);
    tmp1_reg_674(12) <= tmp1_fu_383_p2(12);
    tmp1_reg_674(13) <= tmp1_fu_383_p2(13);
    tmp1_reg_674(14) <= tmp1_fu_383_p2(14);
    tmp1_reg_674(15) <= tmp1_fu_383_p2(15);
    tmp1_reg_674(16) <= tmp1_fu_383_p2(16);
    tmp1_reg_674(17) <= tmp1_fu_383_p2(17);
                tmp_1_reg_659 <= tmp_21_fu_340_p2(17 downto 16);
                tmp_2_reg_664 <= tmp_21_fu_340_p2(17 downto 17);
                tmp_7_reg_679 <= tmp_25_fu_419_p2(18 downto 16);
                tmp_8_reg_684 <= tmp_25_fu_419_p2(18 downto 18);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_266_p2))) then
                tmp_13_reg_610(0) <= tmp_13_fu_286_p1(0);
    tmp_13_reg_610(1) <= tmp_13_fu_286_p1(1);
    tmp_13_reg_610(2) <= tmp_13_fu_286_p1(2);
    tmp_13_reg_610(3) <= tmp_13_fu_286_p1(3);
    tmp_13_reg_610(4) <= tmp_13_fu_286_p1(4);
    tmp_13_reg_610(5) <= tmp_13_fu_286_p1(5);
    tmp_13_reg_610(6) <= tmp_13_fu_286_p1(6);
    tmp_13_reg_610(7) <= tmp_13_fu_286_p1(7);
    tmp_13_reg_610(8) <= tmp_13_fu_286_p1(8);
    tmp_13_reg_610(9) <= tmp_13_fu_286_p1(9);
    tmp_13_reg_610(10) <= tmp_13_fu_286_p1(10);
    tmp_13_reg_610(11) <= tmp_13_fu_286_p1(11);
    tmp_13_reg_610(12) <= tmp_13_fu_286_p1(12);
    tmp_13_reg_610(13) <= tmp_13_fu_286_p1(13);
    tmp_13_reg_610(14) <= tmp_13_fu_286_p1(14);
    tmp_13_reg_610(15) <= tmp_13_fu_286_p1(15);
    tmp_13_reg_610(16) <= tmp_13_fu_286_p1(16);
    tmp_13_reg_610(17) <= tmp_13_fu_286_p1(17);
    tmp_13_reg_610(18) <= tmp_13_fu_286_p1(18);
    tmp_13_reg_610(19) <= tmp_13_fu_286_p1(19);
    tmp_13_reg_610(20) <= tmp_13_fu_286_p1(20);
    tmp_13_reg_610(21) <= tmp_13_fu_286_p1(21);
    tmp_13_reg_610(22) <= tmp_13_fu_286_p1(22);
    tmp_13_reg_610(23) <= tmp_13_fu_286_p1(23);
    tmp_13_reg_610(24) <= tmp_13_fu_286_p1(24);
    tmp_13_reg_610(25) <= tmp_13_fu_286_p1(25);
    tmp_13_reg_610(26) <= tmp_13_fu_286_p1(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                x_2_reg_592 <= x_2_fu_220_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                y_2_reg_605 <= y_2_fu_271_p2;
            end if;
        end if;
    end process;
    p_addr_reg_597(7 downto 0) <= "00000000";
    tmp_13_reg_610(63 downto 27) <= "0000000000000000000000000000000000000";
    tmp_20_reg_652(0) <= '0';
    tmp1_reg_674(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_215_p2, exitcond_fu_266_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_215_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_266_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    C_fu_294_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_291_p1) + unsigned(ap_const_lv9_1F0));
    D_fu_300_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_306_p2 <= (in_channels_ch3_q0 xor ap_const_lv8_80);

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_215_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_215_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_215_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_215_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;

    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_104 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_119 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_184 assign process. --
    ap_sig_bdd_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_184 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_119)
    begin
        if (ap_sig_bdd_119) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_184)
    begin
        if (ap_sig_bdd_184) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_215_p2 <= "1" when (x_reg_192 = in_width_read) else "0";
    exitcond_fu_266_p2 <= "1" when (y_reg_203 = in_height_read) else "0";
    icmp1_fu_551_p2 <= "1" when (tmp_4_reg_694 = ap_const_lv2_1) else "0";
    icmp2_fu_525_p2 <= "1" when (signed(tmp_7_reg_679) > signed(ap_const_lv3_0)) else "0";
    icmp_fu_453_p2 <= "1" when (tmp_1_reg_659 = ap_const_lv2_1) else "0";
    in_channels_ch1_address0 <= tmp_13_fu_286_p1(22 - 1 downto 0);

    -- in_channels_ch1_ce0 assign process. --
    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_13_reg_610(22 - 1 downto 0);

    -- in_channels_ch2_ce0 assign process. --
    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_13_reg_610(22 - 1 downto 0);

    -- in_channels_ch3_ce0 assign process. --
    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_address0 <= tmp_13_reg_610(22 - 1 downto 0);

    -- out_channels_ch1_ce0 assign process. --
    out_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= 
        p_phitmp_fu_458_p3 when (tmp_3_fu_466_p2(0) = '1') else 
        phitmp_reg_669;

    -- out_channels_ch1_we0 assign process. --
    out_channels_ch1_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= tmp_13_reg_610(22 - 1 downto 0);

    -- out_channels_ch2_ce0 assign process. --
    out_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= 
        p_phitmp2_fu_556_p3 when (tmp_6_fu_564_p2(0) = '1') else 
        phitmp2_reg_704;

    -- out_channels_ch2_we0 assign process. --
    out_channels_ch2_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= tmp_13_reg_610(22 - 1 downto 0);

    -- out_channels_ch3_ce0 assign process. --
    out_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= 
        p_phitmp3_fu_530_p3 when (tmp_9_fu_538_p2(0) = '1') else 
        phitmp3_reg_689;

    -- out_channels_ch3_we0 assign process. --
    out_channels_ch3_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_281_p2 <= std_logic_vector(unsigned(p_addr_reg_597) + unsigned(tmp_trn_cast_fu_277_p1));
    p_addr_fu_250_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_234_p1) + unsigned(p_shl9_cast_fu_246_p1));
    p_phitmp2_fu_556_p3 <= 
        ap_const_lv8_FF when (icmp1_fu_551_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp3_fu_530_p3 <= 
        ap_const_lv8_FF when (icmp2_fu_525_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp_fu_458_p3 <= 
        ap_const_lv8_FF when (icmp_fu_453_p2(0) = '1') else 
        ap_const_lv8_0;
        p_shl1_cast_fu_406_p1 <= std_logic_vector(resize(signed(p_shl1_fu_399_p3),18));

    p_shl1_fu_399_p3 <= (D_reg_639 & ap_const_lv2_0);
    p_shl8_cast_fu_234_p1 <= std_logic_vector(resize(unsigned(tmp_fu_226_p3),27));
    p_shl9_cast_fu_246_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_238_p3),27));
        p_shl_cast_fu_395_p1 <= std_logic_vector(resize(signed(p_shl_fu_388_p3),19));

    p_shl_fu_388_p3 <= (D_reg_639 & ap_const_lv9_0);
    tmp1_fu_383_p2 <= std_logic_vector(signed(tmp_20_reg_652) + signed(tmp_25_cast_fu_379_p1));
        tmp2_cast_fu_415_p1 <= std_logic_vector(resize(signed(tmp2_fu_410_p2),19));

    tmp2_fu_410_p2 <= std_logic_vector(signed(p_shl1_cast_fu_406_p1) + signed(tmp_20_reg_652));
    tmp_12_fu_238_p3 <= (x_reg_192 & ap_const_lv8_0);
    tmp_13_fu_286_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_281_p2),64));
    tmp_18_fu_316_p0 <= C_fu_294_p2;
    tmp_18_fu_316_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_18_fu_316_p0) * signed('0' &ap_const_lv18_12A))), 18));
    tmp_19_fu_334_p0 <= E_reg_646;
    tmp_19_fu_334_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_19_fu_334_p0) * signed('0' &ap_const_lv18_199))), 18));
    tmp_20_fu_322_p2 <= std_logic_vector(signed(tmp_18_fu_316_p2) + signed(ap_const_lv18_80));
    tmp_21_fu_340_p2 <= std_logic_vector(signed(tmp_19_fu_334_p2) + signed(tmp_20_reg_652));
    tmp_22_fu_482_p0 <= D_reg_639;
    tmp_22_fu_482_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_22_fu_482_p0) * signed(ap_const_lv16_FF9C))), 16));
    tmp_23_fu_373_p0 <= E_reg_646;
    tmp_23_fu_373_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_23_fu_373_p0) * signed(ap_const_lv17_1FF30))), 17));
        tmp_24_cast_fu_488_p1 <= std_logic_vector(resize(signed(tmp_22_fu_482_p2),18));

    tmp_24_fu_492_p2 <= std_logic_vector(signed(tmp1_reg_674) + signed(tmp_24_cast_fu_488_p1));
        tmp_25_cast_fu_379_p1 <= std_logic_vector(resize(signed(tmp_23_fu_373_p2),18));

    tmp_25_fu_419_p2 <= std_logic_vector(signed(tmp2_cast_fu_415_p1) + signed(p_shl_cast_fu_395_p1));
    tmp_32_cast_fu_291_p1 <= std_logic_vector(resize(unsigned(Y_reg_624),9));
    tmp_3_fu_466_p2 <= (icmp_fu_453_p2 or tmp_2_reg_664);
    tmp_6_fu_564_p2 <= (icmp1_fu_551_p2 or tmp_5_reg_699);
    tmp_9_fu_538_p2 <= (icmp2_fu_525_p2 or tmp_8_reg_684);
    tmp_fu_226_p3 <= (x_reg_192 & ap_const_lv10_0);
    tmp_trn_cast_fu_277_p1 <= std_logic_vector(resize(unsigned(y_reg_203),27));
    x_2_fu_220_p2 <= std_logic_vector(unsigned(x_reg_192) + unsigned(ap_const_lv16_1));
    y_2_fu_271_p2 <= std_logic_vector(unsigned(y_reg_203) + unsigned(ap_const_lv16_1));
end behav;
