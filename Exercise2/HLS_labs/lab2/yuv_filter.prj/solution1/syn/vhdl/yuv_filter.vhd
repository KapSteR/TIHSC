-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_width : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_ap_vld : OUT STD_LOGIC;
    out_height : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_ap_vld : OUT STD_LOGIC;
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of yuv_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "yuv_filter,hls_ip_2014_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.748500,HLS_SYN_LAT=12556765,HLS_SYN_TPT=none,HLS_SYN_MEM=7200,HLS_SYN_DSP=12,HLS_SYN_FF=706,HLS_SYN_LUT=857}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_24 : BOOLEAN;
    signal p_yuv_width_reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal grp_yuv_filter_rgb2yuv_fu_245_ap_done : STD_LOGIC;
    signal p_yuv_height_reg_448 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_cast_fu_288_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_cast_reg_454 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_cast_15_fu_292_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_cast_15_reg_459 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_i_cast_fu_296_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_i_cast_reg_464 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_fu_305_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_reg_472 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_114 : BOOLEAN;
    signal p_addr_fu_335_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr_reg_477 : STD_LOGIC_VECTOR (26 downto 0);
    signal exitcond1_i_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_346_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_485 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal tmp_2_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_490 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_yuv_channels_ch1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Y_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal p_yuv_channels_ch2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_522 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_i_reg_527 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal tmp_38_i_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_i_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_yuv_channels_ch1_ce0 : STD_LOGIC;
    signal p_yuv_channels_ch1_we0 : STD_LOGIC;
    signal p_yuv_channels_ch1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_yuv_channels_ch2_ce0 : STD_LOGIC;
    signal p_yuv_channels_ch2_we0 : STD_LOGIC;
    signal p_yuv_channels_ch2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_yuv_channels_ch3_ce0 : STD_LOGIC;
    signal p_yuv_channels_ch3_we0 : STD_LOGIC;
    signal p_yuv_channels_ch3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_scale_channels_ch1_ce0 : STD_LOGIC;
    signal p_scale_channels_ch1_we0 : STD_LOGIC;
    signal p_scale_channels_ch1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_scale_channels_ch2_ce0 : STD_LOGIC;
    signal p_scale_channels_ch2_we0 : STD_LOGIC;
    signal p_scale_channels_ch2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_scale_channels_ch3_ce0 : STD_LOGIC;
    signal p_scale_channels_ch3_we0 : STD_LOGIC;
    signal p_scale_channels_ch3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_ap_start : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_ap_idle : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_ap_ready : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_ce0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_ce0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_ce0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_in_width_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_in_height_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_ce0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_we0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_ce0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_we0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_ce0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_we0 : STD_LOGIC;
    signal grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_yuv_filter_rgb2yuv_fu_245_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_ap_start : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_ap_done : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_ap_idle : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_ap_ready : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_ce0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_ce0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_ce0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_in_width_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_in_height_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_ce0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_we0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_ce0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_we0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_ce0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_we0 : STD_LOGIC;
    signal grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_yuv_filter_yuv2rgb_fu_265_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_i_reg_222 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_i_reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_293 : BOOLEAN;
    signal grp_yuv_filter_rgb2yuv_fu_245_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_yuv_filter_yuv2rgb_fu_265_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_306 : BOOLEAN;
    signal tmp_fu_311_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_1_fu_323_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl_cast_fu_319_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl1_cast_fu_331_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_30_i_trn_cast_fu_352_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr1_fu_356_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_32_i_fu_371_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_i_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_i_fu_379_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_i_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_i_fu_387_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_i_fu_387_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_i_fu_371_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_34_i_fu_379_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_36_i_fu_387_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_i_fu_371_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_34_i_fu_379_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_36_i_fu_387_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component yuv_filter_rgb2yuv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch1_ce0 : OUT STD_LOGIC;
        in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch2_ce0 : OUT STD_LOGIC;
        in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch3_ce0 : OUT STD_LOGIC;
        in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
        in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
        out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch1_ce0 : OUT STD_LOGIC;
        out_channels_ch1_we0 : OUT STD_LOGIC;
        out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch2_ce0 : OUT STD_LOGIC;
        out_channels_ch2_we0 : OUT STD_LOGIC;
        out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch3_ce0 : OUT STD_LOGIC;
        out_channels_ch3_we0 : OUT STD_LOGIC;
        out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_yuv2rgb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch1_ce0 : OUT STD_LOGIC;
        in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch2_ce0 : OUT STD_LOGIC;
        in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch3_ce0 : OUT STD_LOGIC;
        in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
        in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
        out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch1_ce0 : OUT STD_LOGIC;
        out_channels_ch1_we0 : OUT STD_LOGIC;
        out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch2_ce0 : OUT STD_LOGIC;
        out_channels_ch2_we0 : OUT STD_LOGIC;
        out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch3_ce0 : OUT STD_LOGIC;
        out_channels_ch3_we0 : OUT STD_LOGIC;
        out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_p_yuv_channels_ch1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    p_yuv_channels_ch1_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_yuv_channels_ch1_address0,
        ce0 => p_yuv_channels_ch1_ce0,
        we0 => p_yuv_channels_ch1_we0,
        d0 => p_yuv_channels_ch1_d0,
        q0 => p_yuv_channels_ch1_q0);

    p_yuv_channels_ch2_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_yuv_channels_ch2_address0,
        ce0 => p_yuv_channels_ch2_ce0,
        we0 => p_yuv_channels_ch2_we0,
        d0 => p_yuv_channels_ch2_d0,
        q0 => p_yuv_channels_ch2_q0);

    p_yuv_channels_ch3_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_yuv_channels_ch3_address0,
        ce0 => p_yuv_channels_ch3_ce0,
        we0 => p_yuv_channels_ch3_we0,
        d0 => p_yuv_channels_ch3_d0,
        q0 => p_yuv_channels_ch3_q0);

    p_scale_channels_ch1_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_scale_channels_ch1_address0,
        ce0 => p_scale_channels_ch1_ce0,
        we0 => p_scale_channels_ch1_we0,
        d0 => p_scale_channels_ch1_d0,
        q0 => p_scale_channels_ch1_q0);

    p_scale_channels_ch2_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_scale_channels_ch2_address0,
        ce0 => p_scale_channels_ch2_ce0,
        we0 => p_scale_channels_ch2_we0,
        d0 => p_scale_channels_ch2_d0,
        q0 => p_scale_channels_ch2_q0);

    p_scale_channels_ch3_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_scale_channels_ch3_address0,
        ce0 => p_scale_channels_ch3_ce0,
        we0 => p_scale_channels_ch3_we0,
        d0 => p_scale_channels_ch3_d0,
        q0 => p_scale_channels_ch3_q0);

    grp_yuv_filter_rgb2yuv_fu_245 : component yuv_filter_rgb2yuv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_yuv_filter_rgb2yuv_fu_245_ap_start,
        ap_done => grp_yuv_filter_rgb2yuv_fu_245_ap_done,
        ap_idle => grp_yuv_filter_rgb2yuv_fu_245_ap_idle,
        ap_ready => grp_yuv_filter_rgb2yuv_fu_245_ap_ready,
        in_channels_ch1_address0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_address0,
        in_channels_ch1_ce0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_ce0,
        in_channels_ch1_q0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_q0,
        in_channels_ch2_address0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_address0,
        in_channels_ch2_ce0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_ce0,
        in_channels_ch2_q0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_q0,
        in_channels_ch3_address0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_address0,
        in_channels_ch3_ce0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_ce0,
        in_channels_ch3_q0 => grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_q0,
        in_width_read => grp_yuv_filter_rgb2yuv_fu_245_in_width_read,
        in_height_read => grp_yuv_filter_rgb2yuv_fu_245_in_height_read,
        out_channels_ch1_address0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_address0,
        out_channels_ch1_ce0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_ce0,
        out_channels_ch1_we0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_we0,
        out_channels_ch1_d0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_d0,
        out_channels_ch2_address0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_address0,
        out_channels_ch2_ce0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_ce0,
        out_channels_ch2_we0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_we0,
        out_channels_ch2_d0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_d0,
        out_channels_ch3_address0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_address0,
        out_channels_ch3_ce0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_ce0,
        out_channels_ch3_we0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_we0,
        out_channels_ch3_d0 => grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_d0,
        ap_return_0 => grp_yuv_filter_rgb2yuv_fu_245_ap_return_0,
        ap_return_1 => grp_yuv_filter_rgb2yuv_fu_245_ap_return_1);

    grp_yuv_filter_yuv2rgb_fu_265 : component yuv_filter_yuv2rgb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_yuv_filter_yuv2rgb_fu_265_ap_start,
        ap_done => grp_yuv_filter_yuv2rgb_fu_265_ap_done,
        ap_idle => grp_yuv_filter_yuv2rgb_fu_265_ap_idle,
        ap_ready => grp_yuv_filter_yuv2rgb_fu_265_ap_ready,
        in_channels_ch1_address0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_address0,
        in_channels_ch1_ce0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_ce0,
        in_channels_ch1_q0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_q0,
        in_channels_ch2_address0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_address0,
        in_channels_ch2_ce0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_ce0,
        in_channels_ch2_q0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_q0,
        in_channels_ch3_address0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_address0,
        in_channels_ch3_ce0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_ce0,
        in_channels_ch3_q0 => grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_q0,
        in_width_read => grp_yuv_filter_yuv2rgb_fu_265_in_width_read,
        in_height_read => grp_yuv_filter_yuv2rgb_fu_265_in_height_read,
        out_channels_ch1_address0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_address0,
        out_channels_ch1_ce0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_ce0,
        out_channels_ch1_we0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_we0,
        out_channels_ch1_d0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_d0,
        out_channels_ch2_address0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_address0,
        out_channels_ch2_ce0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_ce0,
        out_channels_ch2_we0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_we0,
        out_channels_ch2_d0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_d0,
        out_channels_ch3_address0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_address0,
        out_channels_ch3_ce0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_ce0,
        out_channels_ch3_we0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_we0,
        out_channels_ch3_d0 => grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_d0,
        ap_return_0 => grp_yuv_filter_yuv2rgb_fu_265_ap_return_0,
        ap_return_1 => grp_yuv_filter_yuv2rgb_fu_265_ap_return_1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_yuv_filter_rgb2yuv_fu_245_ap_start_ap_start_reg assign process. --
    grp_yuv_filter_rgb2yuv_fu_245_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_yuv_filter_rgb2yuv_fu_245_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    grp_yuv_filter_rgb2yuv_fu_245_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_yuv_filter_rgb2yuv_fu_245_ap_ready)) then 
                    grp_yuv_filter_rgb2yuv_fu_245_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_yuv_filter_yuv2rgb_fu_265_ap_start_ap_start_reg assign process. --
    grp_yuv_filter_yuv2rgb_fu_265_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_yuv_filter_yuv2rgb_fu_265_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_i_fu_300_p2 = ap_const_lv1_0)))) then 
                    grp_yuv_filter_yuv2rgb_fu_265_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_yuv_filter_yuv2rgb_fu_265_ap_ready)) then 
                    grp_yuv_filter_yuv2rgb_fu_265_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- x_i_reg_222 assign process. --
    x_i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_i_fu_341_p2)))) then 
                x_i_reg_222 <= x_reg_472;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_yuv_filter_rgb2yuv_fu_245_ap_done)))) then 
                x_i_reg_222 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- y_i_reg_233 assign process. --
    y_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                y_i_reg_233 <= y_reg_485;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_i_fu_300_p2 = ap_const_lv1_0))) then 
                y_i_reg_233 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                U_reg_517 <= p_yuv_channels_ch2_q0;
                V_reg_522 <= p_yuv_channels_ch3_q0;
                Y_reg_512 <= p_yuv_channels_ch1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_i_fu_300_p2 = ap_const_lv1_0))) then
                p_addr_reg_477(8) <= p_addr_fu_335_p2(8);
    p_addr_reg_477(9) <= p_addr_fu_335_p2(9);
    p_addr_reg_477(10) <= p_addr_fu_335_p2(10);
    p_addr_reg_477(11) <= p_addr_fu_335_p2(11);
    p_addr_reg_477(12) <= p_addr_fu_335_p2(12);
    p_addr_reg_477(13) <= p_addr_fu_335_p2(13);
    p_addr_reg_477(14) <= p_addr_fu_335_p2(14);
    p_addr_reg_477(15) <= p_addr_fu_335_p2(15);
    p_addr_reg_477(16) <= p_addr_fu_335_p2(16);
    p_addr_reg_477(17) <= p_addr_fu_335_p2(17);
    p_addr_reg_477(18) <= p_addr_fu_335_p2(18);
    p_addr_reg_477(19) <= p_addr_fu_335_p2(19);
    p_addr_reg_477(20) <= p_addr_fu_335_p2(20);
    p_addr_reg_477(21) <= p_addr_fu_335_p2(21);
    p_addr_reg_477(22) <= p_addr_fu_335_p2(22);
    p_addr_reg_477(23) <= p_addr_fu_335_p2(23);
    p_addr_reg_477(24) <= p_addr_fu_335_p2(24);
    p_addr_reg_477(25) <= p_addr_fu_335_p2(25);
    p_addr_reg_477(26) <= p_addr_fu_335_p2(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_yuv_filter_rgb2yuv_fu_245_ap_done)))) then
                p_yuv_height_reg_448 <= grp_yuv_filter_rgb2yuv_fu_245_ap_return_1;
                p_yuv_width_reg_442 <= grp_yuv_filter_rgb2yuv_fu_245_ap_return_0;
                tmp_28_i_cast_reg_464(0) <= tmp_28_i_cast_fu_296_p1(0);
    tmp_28_i_cast_reg_464(1) <= tmp_28_i_cast_fu_296_p1(1);
    tmp_28_i_cast_reg_464(2) <= tmp_28_i_cast_fu_296_p1(2);
    tmp_28_i_cast_reg_464(3) <= tmp_28_i_cast_fu_296_p1(3);
    tmp_28_i_cast_reg_464(4) <= tmp_28_i_cast_fu_296_p1(4);
    tmp_28_i_cast_reg_464(5) <= tmp_28_i_cast_fu_296_p1(5);
    tmp_28_i_cast_reg_464(6) <= tmp_28_i_cast_fu_296_p1(6);
    tmp_28_i_cast_reg_464(7) <= tmp_28_i_cast_fu_296_p1(7);
                tmp_i_cast_15_reg_459(0) <= tmp_i_cast_15_fu_292_p1(0);
    tmp_i_cast_15_reg_459(1) <= tmp_i_cast_15_fu_292_p1(1);
    tmp_i_cast_15_reg_459(2) <= tmp_i_cast_15_fu_292_p1(2);
    tmp_i_cast_15_reg_459(3) <= tmp_i_cast_15_fu_292_p1(3);
    tmp_i_cast_15_reg_459(4) <= tmp_i_cast_15_fu_292_p1(4);
    tmp_i_cast_15_reg_459(5) <= tmp_i_cast_15_fu_292_p1(5);
    tmp_i_cast_15_reg_459(6) <= tmp_i_cast_15_fu_292_p1(6);
    tmp_i_cast_15_reg_459(7) <= tmp_i_cast_15_fu_292_p1(7);
                tmp_i_cast_reg_454(0) <= tmp_i_cast_fu_288_p1(0);
    tmp_i_cast_reg_454(1) <= tmp_i_cast_fu_288_p1(1);
    tmp_i_cast_reg_454(2) <= tmp_i_cast_fu_288_p1(2);
    tmp_i_cast_reg_454(3) <= tmp_i_cast_fu_288_p1(3);
    tmp_i_cast_reg_454(4) <= tmp_i_cast_fu_288_p1(4);
    tmp_i_cast_reg_454(5) <= tmp_i_cast_fu_288_p1(5);
    tmp_i_cast_reg_454(6) <= tmp_i_cast_fu_288_p1(6);
    tmp_i_cast_reg_454(7) <= tmp_i_cast_fu_288_p1(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_341_p2))) then
                tmp_2_reg_490(0) <= tmp_2_fu_361_p1(0);
    tmp_2_reg_490(1) <= tmp_2_fu_361_p1(1);
    tmp_2_reg_490(2) <= tmp_2_fu_361_p1(2);
    tmp_2_reg_490(3) <= tmp_2_fu_361_p1(3);
    tmp_2_reg_490(4) <= tmp_2_fu_361_p1(4);
    tmp_2_reg_490(5) <= tmp_2_fu_361_p1(5);
    tmp_2_reg_490(6) <= tmp_2_fu_361_p1(6);
    tmp_2_reg_490(7) <= tmp_2_fu_361_p1(7);
    tmp_2_reg_490(8) <= tmp_2_fu_361_p1(8);
    tmp_2_reg_490(9) <= tmp_2_fu_361_p1(9);
    tmp_2_reg_490(10) <= tmp_2_fu_361_p1(10);
    tmp_2_reg_490(11) <= tmp_2_fu_361_p1(11);
    tmp_2_reg_490(12) <= tmp_2_fu_361_p1(12);
    tmp_2_reg_490(13) <= tmp_2_fu_361_p1(13);
    tmp_2_reg_490(14) <= tmp_2_fu_361_p1(14);
    tmp_2_reg_490(15) <= tmp_2_fu_361_p1(15);
    tmp_2_reg_490(16) <= tmp_2_fu_361_p1(16);
    tmp_2_reg_490(17) <= tmp_2_fu_361_p1(17);
    tmp_2_reg_490(18) <= tmp_2_fu_361_p1(18);
    tmp_2_reg_490(19) <= tmp_2_fu_361_p1(19);
    tmp_2_reg_490(20) <= tmp_2_fu_361_p1(20);
    tmp_2_reg_490(21) <= tmp_2_fu_361_p1(21);
    tmp_2_reg_490(22) <= tmp_2_fu_361_p1(22);
    tmp_2_reg_490(23) <= tmp_2_fu_361_p1(23);
    tmp_2_reg_490(24) <= tmp_2_fu_361_p1(24);
    tmp_2_reg_490(25) <= tmp_2_fu_361_p1(25);
    tmp_2_reg_490(26) <= tmp_2_fu_361_p1(26);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_37_i_reg_527 <= tmp_32_i_fu_371_p2(14 downto 7);
                tmp_38_i_reg_532 <= tmp_34_i_fu_379_p2(14 downto 7);
                tmp_39_i_reg_537 <= tmp_36_i_fu_387_p2(14 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                x_reg_472 <= x_fu_305_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                y_reg_485 <= y_fu_346_p2;
            end if;
        end if;
    end process;
    tmp_i_cast_reg_454(14 downto 8) <= "0000000";
    tmp_i_cast_15_reg_459(14 downto 8) <= "0000000";
    tmp_28_i_cast_reg_464(14 downto 8) <= "0000000";
    p_addr_reg_477(7 downto 0) <= "00000000";
    tmp_2_reg_490(63 downto 27) <= "0000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_yuv_filter_rgb2yuv_fu_245_ap_done, exitcond1_i_fu_300_p2, exitcond_i_fu_341_p2, grp_yuv_filter_yuv2rgb_fu_265_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_yuv_filter_rgb2yuv_fu_245_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond1_i_fu_300_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_341_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = grp_yuv_filter_yuv2rgb_fu_265_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_ap_done, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_logic_0 = grp_yuv_filter_yuv2rgb_fu_265_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_ap_done, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_logic_0 = grp_yuv_filter_yuv2rgb_fu_265_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_114 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_162 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_24 assign process. --
    ap_sig_bdd_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_293 assign process. --
    ap_sig_bdd_293_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_293 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_306 assign process. --
    ap_sig_bdd_306_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_306 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_24)
    begin
        if (ap_sig_bdd_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_114)
    begin
        if (ap_sig_bdd_114) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_162)
    begin
        if (ap_sig_bdd_162) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_293)
    begin
        if (ap_sig_bdd_293) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_306)
    begin
        if (ap_sig_bdd_306) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_300_p2 <= "1" when (x_i_reg_222 = p_yuv_width_reg_442) else "0";
    exitcond_i_fu_341_p2 <= "1" when (y_i_reg_233 = p_yuv_height_reg_448) else "0";
    grp_yuv_filter_rgb2yuv_fu_245_ap_start <= grp_yuv_filter_rgb2yuv_fu_245_ap_start_ap_start_reg;
    grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_q0 <= in_channels_ch1_q0;
    grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_q0 <= in_channels_ch2_q0;
    grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_q0 <= in_channels_ch3_q0;
    grp_yuv_filter_rgb2yuv_fu_245_in_height_read <= in_height;
    grp_yuv_filter_rgb2yuv_fu_245_in_width_read <= in_width;
    grp_yuv_filter_yuv2rgb_fu_265_ap_start <= grp_yuv_filter_yuv2rgb_fu_265_ap_start_ap_start_reg;
    grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_q0 <= p_scale_channels_ch1_q0;
    grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_q0 <= p_scale_channels_ch2_q0;
    grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_q0 <= p_scale_channels_ch3_q0;
    grp_yuv_filter_yuv2rgb_fu_265_in_height_read <= p_yuv_height_reg_448;
    grp_yuv_filter_yuv2rgb_fu_265_in_width_read <= p_yuv_width_reg_442;
    in_channels_ch1_address0 <= grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_address0;

    -- in_channels_ch1_ce0 assign process. --
    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            in_channels_ch1_ce0 <= grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch1_ce0;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_address0;

    -- in_channels_ch2_ce0 assign process. --
    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            in_channels_ch2_ce0 <= grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch2_ce0;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_address0;

    -- in_channels_ch3_ce0 assign process. --
    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            in_channels_ch3_ce0 <= grp_yuv_filter_rgb2yuv_fu_245_in_channels_ch3_ce0;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_address0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_address0;

    -- out_channels_ch1_ce0 assign process. --
    out_channels_ch1_ce0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_ce0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch1_ce0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_ce0;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_d0;

    -- out_channels_ch1_we0 assign process. --
    out_channels_ch1_we0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_we0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch1_we0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch1_we0;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_address0;

    -- out_channels_ch2_ce0 assign process. --
    out_channels_ch2_ce0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_ce0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch2_ce0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_ce0;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_d0;

    -- out_channels_ch2_we0 assign process. --
    out_channels_ch2_we0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_we0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch2_we0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch2_we0;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_address0;

    -- out_channels_ch3_ce0 assign process. --
    out_channels_ch3_ce0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_ce0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch3_ce0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_ce0;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_d0;

    -- out_channels_ch3_we0 assign process. --
    out_channels_ch3_we0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_we0, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_channels_ch3_we0 <= grp_yuv_filter_yuv2rgb_fu_265_out_channels_ch3_we0;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_height <= grp_yuv_filter_yuv2rgb_fu_265_ap_return_1;

    -- out_height_ap_vld assign process. --
    out_height_ap_vld_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_ap_done, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_logic_0 = grp_yuv_filter_yuv2rgb_fu_265_ap_done)))) then 
            out_height_ap_vld <= ap_const_logic_1;
        else 
            out_height_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_width <= grp_yuv_filter_yuv2rgb_fu_265_ap_return_0;

    -- out_width_ap_vld assign process. --
    out_width_ap_vld_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_ap_done, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_logic_0 = grp_yuv_filter_yuv2rgb_fu_265_ap_done)))) then 
            out_width_ap_vld <= ap_const_logic_1;
        else 
            out_width_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_356_p2 <= std_logic_vector(unsigned(p_addr_reg_477) + unsigned(tmp_30_i_trn_cast_fu_352_p1));
    p_addr_fu_335_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_319_p1) + unsigned(p_shl1_cast_fu_331_p1));

    -- p_scale_channels_ch1_address0 assign process. --
    p_scale_channels_ch1_address0_assign_proc : process(tmp_2_reg_490, grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            p_scale_channels_ch1_address0 <= tmp_2_reg_490(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            p_scale_channels_ch1_address0 <= grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_address0;
        else 
            p_scale_channels_ch1_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- p_scale_channels_ch1_ce0 assign process. --
    p_scale_channels_ch1_ce0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            p_scale_channels_ch1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            p_scale_channels_ch1_ce0 <= grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch1_ce0;
        else 
            p_scale_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_scale_channels_ch1_d0 <= tmp_37_i_reg_527;

    -- p_scale_channels_ch1_we0 assign process. --
    p_scale_channels_ch1_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            p_scale_channels_ch1_we0 <= ap_const_logic_1;
        else 
            p_scale_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- p_scale_channels_ch2_address0 assign process. --
    p_scale_channels_ch2_address0_assign_proc : process(tmp_2_reg_490, grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            p_scale_channels_ch2_address0 <= tmp_2_reg_490(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            p_scale_channels_ch2_address0 <= grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_address0;
        else 
            p_scale_channels_ch2_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- p_scale_channels_ch2_ce0 assign process. --
    p_scale_channels_ch2_ce0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            p_scale_channels_ch2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            p_scale_channels_ch2_ce0 <= grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch2_ce0;
        else 
            p_scale_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_scale_channels_ch2_d0 <= tmp_38_i_reg_532;

    -- p_scale_channels_ch2_we0 assign process. --
    p_scale_channels_ch2_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            p_scale_channels_ch2_we0 <= ap_const_logic_1;
        else 
            p_scale_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- p_scale_channels_ch3_address0 assign process. --
    p_scale_channels_ch3_address0_assign_proc : process(tmp_2_reg_490, grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            p_scale_channels_ch3_address0 <= tmp_2_reg_490(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            p_scale_channels_ch3_address0 <= grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_address0;
        else 
            p_scale_channels_ch3_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- p_scale_channels_ch3_ce0 assign process. --
    p_scale_channels_ch3_ce0_assign_proc : process(grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            p_scale_channels_ch3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            p_scale_channels_ch3_ce0 <= grp_yuv_filter_yuv2rgb_fu_265_in_channels_ch3_ce0;
        else 
            p_scale_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_scale_channels_ch3_d0 <= tmp_39_i_reg_537;

    -- p_scale_channels_ch3_we0 assign process. --
    p_scale_channels_ch3_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            p_scale_channels_ch3_we0 <= ap_const_logic_1;
        else 
            p_scale_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_331_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_323_p3),27));
    p_shl_cast_fu_319_p1 <= std_logic_vector(resize(unsigned(tmp_fu_311_p3),27));

    -- p_yuv_channels_ch1_address0 assign process. --
    p_yuv_channels_ch1_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, tmp_2_fu_361_p1, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_address0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            p_yuv_channels_ch1_address0 <= tmp_2_fu_361_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch1_address0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_address0;
        else 
            p_yuv_channels_ch1_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- p_yuv_channels_ch1_ce0 assign process. --
    p_yuv_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            p_yuv_channels_ch1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch1_ce0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_ce0;
        else 
            p_yuv_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_yuv_channels_ch1_d0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_d0;

    -- p_yuv_channels_ch1_we0 assign process. --
    p_yuv_channels_ch1_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch1_we0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch1_we0;
        else 
            p_yuv_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- p_yuv_channels_ch2_address0 assign process. --
    p_yuv_channels_ch2_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, tmp_2_fu_361_p1, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_address0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            p_yuv_channels_ch2_address0 <= tmp_2_fu_361_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch2_address0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_address0;
        else 
            p_yuv_channels_ch2_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- p_yuv_channels_ch2_ce0 assign process. --
    p_yuv_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            p_yuv_channels_ch2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch2_ce0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_ce0;
        else 
            p_yuv_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_yuv_channels_ch2_d0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_d0;

    -- p_yuv_channels_ch2_we0 assign process. --
    p_yuv_channels_ch2_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch2_we0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch2_we0;
        else 
            p_yuv_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- p_yuv_channels_ch3_address0 assign process. --
    p_yuv_channels_ch3_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, tmp_2_fu_361_p1, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_address0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            p_yuv_channels_ch3_address0 <= tmp_2_fu_361_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch3_address0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_address0;
        else 
            p_yuv_channels_ch3_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- p_yuv_channels_ch3_ce0 assign process. --
    p_yuv_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            p_yuv_channels_ch3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch3_ce0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_ce0;
        else 
            p_yuv_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_yuv_channels_ch3_d0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_d0;

    -- p_yuv_channels_ch3_we0 assign process. --
    p_yuv_channels_ch3_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            p_yuv_channels_ch3_we0 <= grp_yuv_filter_rgb2yuv_fu_245_out_channels_ch3_we0;
        else 
            p_yuv_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_323_p3 <= (x_i_reg_222 & ap_const_lv8_0);
    tmp_28_i_cast_fu_296_p1 <= std_logic_vector(resize(unsigned(V_scale),15));
    tmp_2_fu_361_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_356_p2),64));
    tmp_30_i_trn_cast_fu_352_p1 <= std_logic_vector(resize(unsigned(y_i_reg_233),27));
    tmp_32_i_fu_371_p0 <= tmp_32_i_fu_371_p00(8 - 1 downto 0);
    tmp_32_i_fu_371_p00 <= std_logic_vector(resize(unsigned(Y_reg_512),15));
    tmp_32_i_fu_371_p1 <= tmp_i_cast_reg_454(8 - 1 downto 0);
    tmp_32_i_fu_371_p2 <= std_logic_vector(resize(unsigned(tmp_32_i_fu_371_p0) * unsigned(tmp_32_i_fu_371_p1), 15));
    tmp_34_i_fu_379_p0 <= tmp_34_i_fu_379_p00(8 - 1 downto 0);
    tmp_34_i_fu_379_p00 <= std_logic_vector(resize(unsigned(U_reg_517),15));
    tmp_34_i_fu_379_p1 <= tmp_i_cast_15_reg_459(8 - 1 downto 0);
    tmp_34_i_fu_379_p2 <= std_logic_vector(resize(unsigned(tmp_34_i_fu_379_p0) * unsigned(tmp_34_i_fu_379_p1), 15));
    tmp_36_i_fu_387_p0 <= tmp_36_i_fu_387_p00(8 - 1 downto 0);
    tmp_36_i_fu_387_p00 <= std_logic_vector(resize(unsigned(V_reg_522),15));
    tmp_36_i_fu_387_p1 <= tmp_28_i_cast_reg_464(8 - 1 downto 0);
    tmp_36_i_fu_387_p2 <= std_logic_vector(resize(unsigned(tmp_36_i_fu_387_p0) * unsigned(tmp_36_i_fu_387_p1), 15));
    tmp_fu_311_p3 <= (x_i_reg_222 & ap_const_lv10_0);
    tmp_i_cast_15_fu_292_p1 <= std_logic_vector(resize(unsigned(U_scale),15));
    tmp_i_cast_fu_288_p1 <= std_logic_vector(resize(unsigned(Y_scale),15));
    x_fu_305_p2 <= std_logic_vector(unsigned(x_i_reg_222) + unsigned(ap_const_lv16_1));
    y_fu_346_p2 <= std_logic_vector(unsigned(y_i_reg_233) + unsigned(ap_const_lv16_1));
end behav;
