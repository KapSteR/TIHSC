// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv2rgb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_st4_fsm_3 = 8'b1000;
parameter    ap_ST_st5_fsm_4 = 8'b10000;
parameter    ap_ST_st6_fsm_5 = 8'b100000;
parameter    ap_ST_st7_fsm_6 = 8'b1000000;
parameter    ap_ST_st8_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv9_1F0 = 9'b111110000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv18_12A = 18'b100101010;
parameter    ap_const_lv18_80 = 18'b10000000;
parameter    ap_const_lv18_199 = 18'b110011001;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv17_1FF30 = 17'b11111111100110000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv16_FF9C = 16'b1111111110011100;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm = 8'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_26;
wire   [15:0] x_2_fu_220_p2;
reg   [15:0] x_2_reg_592;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_89;
wire   [26:0] p_addr_fu_250_p2;
reg   [26:0] p_addr_reg_597;
wire   [0:0] exitcond1_fu_215_p2;
wire   [15:0] y_2_fu_271_p2;
reg   [15:0] y_2_reg_605;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_104;
wire   [63:0] tmp_13_fu_286_p1;
reg   [63:0] tmp_13_reg_610;
wire   [0:0] exitcond_fu_266_p2;
reg   [7:0] Y_reg_624;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_119;
wire   [7:0] D_fu_300_p2;
reg   [7:0] D_reg_639;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_132;
wire   [7:0] E_fu_306_p2;
reg   [7:0] E_reg_646;
wire  signed [17:0] tmp_20_fu_322_p2;
reg  signed [17:0] tmp_20_reg_652;
reg   [1:0] tmp_1_reg_659;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_145;
reg   [0:0] tmp_2_reg_664;
reg   [7:0] phitmp_reg_669;
wire  signed [17:0] tmp1_fu_383_p2;
reg  signed [17:0] tmp1_reg_674;
reg   [2:0] tmp_7_reg_679;
reg   [0:0] tmp_8_reg_684;
reg   [7:0] phitmp3_reg_689;
reg   [1:0] tmp_4_reg_694;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_166;
reg   [0:0] tmp_5_reg_699;
reg   [7:0] phitmp2_reg_704;
reg   [15:0] x_reg_192;
reg   [15:0] y_reg_203;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_184;
wire   [25:0] tmp_fu_226_p3;
wire   [23:0] tmp_12_fu_238_p3;
wire   [26:0] p_shl8_cast_fu_234_p1;
wire   [26:0] p_shl9_cast_fu_246_p1;
wire   [26:0] tmp_trn_cast_fu_277_p1;
wire   [26:0] p_addr1_fu_281_p2;
wire   [8:0] tmp_32_cast_fu_291_p1;
wire   [8:0] C_fu_294_p2;
wire  signed [8:0] tmp_18_fu_316_p0;
wire  signed [17:0] tmp_18_fu_316_p2;
wire  signed [7:0] tmp_19_fu_334_p0;
wire  signed [17:0] tmp_19_fu_334_p2;
wire  signed [17:0] tmp_21_fu_340_p2;
wire  signed [7:0] tmp_23_fu_373_p0;
wire  signed [16:0] tmp_23_fu_373_p2;
wire  signed [17:0] tmp_25_cast_fu_379_p1;
wire   [16:0] p_shl_fu_388_p3;
wire   [9:0] p_shl1_fu_399_p3;
wire  signed [17:0] p_shl1_cast_fu_406_p1;
(* use_dsp48 = "no" *) wire  signed [17:0] tmp2_fu_410_p2;
wire  signed [18:0] tmp2_cast_fu_415_p1;
wire  signed [18:0] p_shl_cast_fu_395_p1;
wire  signed [18:0] tmp_25_fu_419_p2;
wire   [0:0] icmp_fu_453_p2;
wire   [0:0] tmp_3_fu_466_p2;
wire   [7:0] p_phitmp_fu_458_p3;
wire  signed [7:0] tmp_22_fu_482_p0;
wire  signed [15:0] tmp_22_fu_482_p2;
wire  signed [17:0] tmp_24_cast_fu_488_p1;
wire  signed [17:0] tmp_24_fu_492_p2;
wire   [0:0] icmp2_fu_525_p2;
wire   [0:0] tmp_9_fu_538_p2;
wire   [7:0] p_phitmp3_fu_530_p3;
wire   [0:0] icmp1_fu_551_p2;
wire   [0:0] tmp_6_fu_564_p2;
wire   [7:0] p_phitmp2_fu_556_p3;
reg   [7:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_266_p2))) begin
        x_reg_192 <= x_2_reg_592;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        x_reg_192 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        y_reg_203 <= y_2_reg_605;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_215_p2 == ap_const_lv1_0))) begin
        y_reg_203 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        D_reg_639 <= D_fu_300_p2;
        E_reg_646 <= E_fu_306_p2;
        tmp_20_reg_652[1] <= tmp_20_fu_322_p2[1];
tmp_20_reg_652[2] <= tmp_20_fu_322_p2[2];
tmp_20_reg_652[3] <= tmp_20_fu_322_p2[3];
tmp_20_reg_652[4] <= tmp_20_fu_322_p2[4];
tmp_20_reg_652[5] <= tmp_20_fu_322_p2[5];
tmp_20_reg_652[6] <= tmp_20_fu_322_p2[6];
tmp_20_reg_652[7] <= tmp_20_fu_322_p2[7];
tmp_20_reg_652[8] <= tmp_20_fu_322_p2[8];
tmp_20_reg_652[9] <= tmp_20_fu_322_p2[9];
tmp_20_reg_652[10] <= tmp_20_fu_322_p2[10];
tmp_20_reg_652[11] <= tmp_20_fu_322_p2[11];
tmp_20_reg_652[12] <= tmp_20_fu_322_p2[12];
tmp_20_reg_652[13] <= tmp_20_fu_322_p2[13];
tmp_20_reg_652[14] <= tmp_20_fu_322_p2[14];
tmp_20_reg_652[15] <= tmp_20_fu_322_p2[15];
tmp_20_reg_652[16] <= tmp_20_fu_322_p2[16];
tmp_20_reg_652[17] <= tmp_20_fu_322_p2[17];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        Y_reg_624 <= in_channels_ch1_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_215_p2 == ap_const_lv1_0))) begin
        p_addr_reg_597[8] <= p_addr_fu_250_p2[8];
p_addr_reg_597[9] <= p_addr_fu_250_p2[9];
p_addr_reg_597[10] <= p_addr_fu_250_p2[10];
p_addr_reg_597[11] <= p_addr_fu_250_p2[11];
p_addr_reg_597[12] <= p_addr_fu_250_p2[12];
p_addr_reg_597[13] <= p_addr_fu_250_p2[13];
p_addr_reg_597[14] <= p_addr_fu_250_p2[14];
p_addr_reg_597[15] <= p_addr_fu_250_p2[15];
p_addr_reg_597[16] <= p_addr_fu_250_p2[16];
p_addr_reg_597[17] <= p_addr_fu_250_p2[17];
p_addr_reg_597[18] <= p_addr_fu_250_p2[18];
p_addr_reg_597[19] <= p_addr_fu_250_p2[19];
p_addr_reg_597[20] <= p_addr_fu_250_p2[20];
p_addr_reg_597[21] <= p_addr_fu_250_p2[21];
p_addr_reg_597[22] <= p_addr_fu_250_p2[22];
p_addr_reg_597[23] <= p_addr_fu_250_p2[23];
p_addr_reg_597[24] <= p_addr_fu_250_p2[24];
p_addr_reg_597[25] <= p_addr_fu_250_p2[25];
p_addr_reg_597[26] <= p_addr_fu_250_p2[26];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        phitmp2_reg_704 <= {{tmp_24_fu_492_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_4_reg_694 <= {{tmp_24_fu_492_p2[ap_const_lv32_11 : ap_const_lv32_10]}};
        tmp_5_reg_699 <= tmp_24_fu_492_p2[ap_const_lv32_11];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        phitmp3_reg_689 <= {{tmp_25_fu_419_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        phitmp_reg_669 <= {{tmp_21_fu_340_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp1_reg_674[1] <= tmp1_fu_383_p2[1];
tmp1_reg_674[2] <= tmp1_fu_383_p2[2];
tmp1_reg_674[3] <= tmp1_fu_383_p2[3];
tmp1_reg_674[4] <= tmp1_fu_383_p2[4];
tmp1_reg_674[5] <= tmp1_fu_383_p2[5];
tmp1_reg_674[6] <= tmp1_fu_383_p2[6];
tmp1_reg_674[7] <= tmp1_fu_383_p2[7];
tmp1_reg_674[8] <= tmp1_fu_383_p2[8];
tmp1_reg_674[9] <= tmp1_fu_383_p2[9];
tmp1_reg_674[10] <= tmp1_fu_383_p2[10];
tmp1_reg_674[11] <= tmp1_fu_383_p2[11];
tmp1_reg_674[12] <= tmp1_fu_383_p2[12];
tmp1_reg_674[13] <= tmp1_fu_383_p2[13];
tmp1_reg_674[14] <= tmp1_fu_383_p2[14];
tmp1_reg_674[15] <= tmp1_fu_383_p2[15];
tmp1_reg_674[16] <= tmp1_fu_383_p2[16];
tmp1_reg_674[17] <= tmp1_fu_383_p2[17];
        tmp_1_reg_659 <= {{tmp_21_fu_340_p2[ap_const_lv32_11 : ap_const_lv32_10]}};
        tmp_2_reg_664 <= tmp_21_fu_340_p2[ap_const_lv32_11];
        tmp_7_reg_679 <= {{tmp_25_fu_419_p2[ap_const_lv32_12 : ap_const_lv32_10]}};
        tmp_8_reg_684 <= tmp_25_fu_419_p2[ap_const_lv32_12];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_266_p2))) begin
        tmp_13_reg_610[0] <= tmp_13_fu_286_p1[0];
tmp_13_reg_610[1] <= tmp_13_fu_286_p1[1];
tmp_13_reg_610[2] <= tmp_13_fu_286_p1[2];
tmp_13_reg_610[3] <= tmp_13_fu_286_p1[3];
tmp_13_reg_610[4] <= tmp_13_fu_286_p1[4];
tmp_13_reg_610[5] <= tmp_13_fu_286_p1[5];
tmp_13_reg_610[6] <= tmp_13_fu_286_p1[6];
tmp_13_reg_610[7] <= tmp_13_fu_286_p1[7];
tmp_13_reg_610[8] <= tmp_13_fu_286_p1[8];
tmp_13_reg_610[9] <= tmp_13_fu_286_p1[9];
tmp_13_reg_610[10] <= tmp_13_fu_286_p1[10];
tmp_13_reg_610[11] <= tmp_13_fu_286_p1[11];
tmp_13_reg_610[12] <= tmp_13_fu_286_p1[12];
tmp_13_reg_610[13] <= tmp_13_fu_286_p1[13];
tmp_13_reg_610[14] <= tmp_13_fu_286_p1[14];
tmp_13_reg_610[15] <= tmp_13_fu_286_p1[15];
tmp_13_reg_610[16] <= tmp_13_fu_286_p1[16];
tmp_13_reg_610[17] <= tmp_13_fu_286_p1[17];
tmp_13_reg_610[18] <= tmp_13_fu_286_p1[18];
tmp_13_reg_610[19] <= tmp_13_fu_286_p1[19];
tmp_13_reg_610[20] <= tmp_13_fu_286_p1[20];
tmp_13_reg_610[21] <= tmp_13_fu_286_p1[21];
tmp_13_reg_610[22] <= tmp_13_fu_286_p1[22];
tmp_13_reg_610[23] <= tmp_13_fu_286_p1[23];
tmp_13_reg_610[24] <= tmp_13_fu_286_p1[24];
tmp_13_reg_610[25] <= tmp_13_fu_286_p1[25];
tmp_13_reg_610[26] <= tmp_13_fu_286_p1[26];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_2_reg_592 <= x_2_fu_220_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        y_2_reg_605 <= y_2_fu_271_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_215_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_215_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_215_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_215_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_26)
begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_89)
begin
    if (ap_sig_bdd_89) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_104)
begin
    if (ap_sig_bdd_104) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_119)
begin
    if (ap_sig_bdd_119) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_132)
begin
    if (ap_sig_bdd_132) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_145)
begin
    if (ap_sig_bdd_145) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_166)
begin
    if (ap_sig_bdd_166) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_184)
begin
    if (ap_sig_bdd_184) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// in_channels_ch1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        in_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        in_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        in_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        out_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_we0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        out_channels_ch1_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        out_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_we0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        out_channels_ch2_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        out_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_we0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        out_channels_ch3_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_215_p2 or exitcond_fu_266_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond1_fu_215_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_266_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_fu_294_p2 = ($signed(tmp_32_cast_fu_291_p1) + $signed(ap_const_lv9_1F0));
assign D_fu_300_p2 = (in_channels_ch2_q0 ^ ap_const_lv8_80);
assign E_fu_306_p2 = (in_channels_ch3_q0 ^ ap_const_lv8_80);
assign ap_return_0 = in_width_read;
assign ap_return_1 = in_height_read;

/// ap_sig_bdd_104 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_104 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_119 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_119 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_132 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_132 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_145 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_145 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_166 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_166 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_184 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_184 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_26 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_26 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_89 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_89 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign exitcond1_fu_215_p2 = (x_reg_192 == in_width_read? 1'b1: 1'b0);
assign exitcond_fu_266_p2 = (y_reg_203 == in_height_read? 1'b1: 1'b0);
assign icmp1_fu_551_p2 = (tmp_4_reg_694 == ap_const_lv2_1? 1'b1: 1'b0);
assign icmp2_fu_525_p2 = ($signed(tmp_7_reg_679) > $signed(3'b000)? 1'b1: 1'b0);
assign icmp_fu_453_p2 = (tmp_1_reg_659 == ap_const_lv2_1? 1'b1: 1'b0);
assign in_channels_ch1_address0 = tmp_13_fu_286_p1;
assign in_channels_ch2_address0 = tmp_13_reg_610;
assign in_channels_ch3_address0 = tmp_13_reg_610;
assign out_channels_ch1_address0 = tmp_13_reg_610;
assign out_channels_ch1_d0 = ((tmp_3_fu_466_p2)? p_phitmp_fu_458_p3: phitmp_reg_669);
assign out_channels_ch2_address0 = tmp_13_reg_610;
assign out_channels_ch2_d0 = ((tmp_6_fu_564_p2)? p_phitmp2_fu_556_p3: phitmp2_reg_704);
assign out_channels_ch3_address0 = tmp_13_reg_610;
assign out_channels_ch3_d0 = ((tmp_9_fu_538_p2)? p_phitmp3_fu_530_p3: phitmp3_reg_689);
assign p_addr1_fu_281_p2 = (p_addr_reg_597 + tmp_trn_cast_fu_277_p1);
assign p_addr_fu_250_p2 = (p_shl8_cast_fu_234_p1 + p_shl9_cast_fu_246_p1);
assign p_phitmp2_fu_556_p3 = ((icmp1_fu_551_p2)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_phitmp3_fu_530_p3 = ((icmp2_fu_525_p2)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_phitmp_fu_458_p3 = ((icmp_fu_453_p2)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_shl1_cast_fu_406_p1 = $signed(p_shl1_fu_399_p3);
assign p_shl1_fu_399_p3 = {{D_reg_639}, {ap_const_lv2_0}};
assign p_shl8_cast_fu_234_p1 = tmp_fu_226_p3;
assign p_shl9_cast_fu_246_p1 = tmp_12_fu_238_p3;
assign p_shl_cast_fu_395_p1 = $signed(p_shl_fu_388_p3);
assign p_shl_fu_388_p3 = {{D_reg_639}, {ap_const_lv9_0}};
assign tmp1_fu_383_p2 = ($signed(tmp_20_reg_652) + $signed(tmp_25_cast_fu_379_p1));
assign tmp2_cast_fu_415_p1 = tmp2_fu_410_p2;
assign tmp2_fu_410_p2 = ($signed(p_shl1_cast_fu_406_p1) + $signed(tmp_20_reg_652));
assign tmp_12_fu_238_p3 = {{x_reg_192}, {ap_const_lv8_0}};
assign tmp_13_fu_286_p1 = p_addr1_fu_281_p2;
assign tmp_18_fu_316_p0 = C_fu_294_p2;
assign tmp_18_fu_316_p2 = ($signed(tmp_18_fu_316_p0) * $signed('h12A));
assign tmp_19_fu_334_p0 = E_reg_646;
assign tmp_19_fu_334_p2 = ($signed(tmp_19_fu_334_p0) * $signed('h199));
assign tmp_20_fu_322_p2 = ($signed(tmp_18_fu_316_p2) + $signed(ap_const_lv18_80));
assign tmp_21_fu_340_p2 = ($signed(tmp_19_fu_334_p2) + $signed(tmp_20_reg_652));
assign tmp_22_fu_482_p0 = D_reg_639;
assign tmp_22_fu_482_p2 = ($signed(tmp_22_fu_482_p0) * $signed(-'h64));
assign tmp_23_fu_373_p0 = E_reg_646;
assign tmp_23_fu_373_p2 = ($signed(tmp_23_fu_373_p0) * $signed(-'hD0));
assign tmp_24_cast_fu_488_p1 = tmp_22_fu_482_p2;
assign tmp_24_fu_492_p2 = ($signed(tmp1_reg_674) + $signed(tmp_24_cast_fu_488_p1));
assign tmp_25_cast_fu_379_p1 = tmp_23_fu_373_p2;
assign tmp_25_fu_419_p2 = ($signed(tmp2_cast_fu_415_p1) + $signed(p_shl_cast_fu_395_p1));
assign tmp_32_cast_fu_291_p1 = Y_reg_624;
assign tmp_3_fu_466_p2 = (icmp_fu_453_p2 | tmp_2_reg_664);
assign tmp_6_fu_564_p2 = (icmp1_fu_551_p2 | tmp_5_reg_699);
assign tmp_9_fu_538_p2 = (icmp2_fu_525_p2 | tmp_8_reg_684);
assign tmp_fu_226_p3 = {{x_reg_192}, {ap_const_lv10_0}};
assign tmp_trn_cast_fu_277_p1 = y_reg_203;
assign x_2_fu_220_p2 = (x_reg_192 + ap_const_lv16_1);
assign y_2_fu_271_p2 = (y_reg_203 + ap_const_lv16_1);
always @ (posedge ap_clk)
begin
    p_addr_reg_597[7:0] <= 8'b00000000;
    tmp_13_reg_610[63:27] <= 37'b0000000000000000000000000000000000000;
    tmp_20_reg_652[0] <= 1'b0;
    tmp1_reg_674[0] <= 1'b0;
end



endmodule //yuv_filter_yuv2rgb

