// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _yuv_filter_yuv_scale_HH_
#define _yuv_filter_yuv_scale_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct yuv_filter_yuv_scale : public sc_module {
    // Port declarations 40
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > in_channels_ch1_dout;
    sc_in< sc_logic > in_channels_ch1_empty_n;
    sc_out< sc_logic > in_channels_ch1_read;
    sc_in< sc_lv<8> > in_channels_ch2_dout;
    sc_in< sc_logic > in_channels_ch2_empty_n;
    sc_out< sc_logic > in_channels_ch2_read;
    sc_in< sc_lv<8> > in_channels_ch3_dout;
    sc_in< sc_logic > in_channels_ch3_empty_n;
    sc_out< sc_logic > in_channels_ch3_read;
    sc_in< sc_lv<16> > in_width_dout;
    sc_in< sc_logic > in_width_empty_n;
    sc_out< sc_logic > in_width_read;
    sc_in< sc_lv<16> > in_height_dout;
    sc_in< sc_logic > in_height_empty_n;
    sc_out< sc_logic > in_height_read;
    sc_out< sc_lv<8> > out_channels_ch1_din;
    sc_in< sc_logic > out_channels_ch1_full_n;
    sc_out< sc_logic > out_channels_ch1_write;
    sc_out< sc_lv<8> > out_channels_ch2_din;
    sc_in< sc_logic > out_channels_ch2_full_n;
    sc_out< sc_logic > out_channels_ch2_write;
    sc_out< sc_lv<8> > out_channels_ch3_din;
    sc_in< sc_logic > out_channels_ch3_full_n;
    sc_out< sc_logic > out_channels_ch3_write;
    sc_out< sc_lv<16> > out_width_din;
    sc_in< sc_logic > out_width_full_n;
    sc_out< sc_logic > out_width_write;
    sc_out< sc_lv<16> > out_height_din;
    sc_in< sc_logic > out_height_full_n;
    sc_out< sc_logic > out_height_write;
    sc_in< sc_lv<8> > Y_scale;
    sc_in< sc_lv<8> > U_scale;
    sc_in< sc_lv<8> > V_scale;


    // Module declarations
    yuv_filter_yuv_scale(sc_module_name name);
    SC_HAS_PROCESS(yuv_filter_yuv_scale);

    ~yuv_filter_yuv_scale();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_23;
    sc_signal< sc_lv<32> > indvar_flatten_reg_175;
    sc_signal< sc_lv<16> > width_reg_276;
    sc_signal< bool > ap_sig_bdd_88;
    sc_signal< sc_lv<16> > height_reg_281;
    sc_signal< sc_lv<15> > tmp_cast_fu_187_p1;
    sc_signal< sc_lv<15> > tmp_cast_reg_286;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_100;
    sc_signal< sc_lv<15> > tmp_cast_45_fu_191_p1;
    sc_signal< sc_lv<15> > tmp_cast_45_reg_291;
    sc_signal< sc_lv<15> > tmp_28_cast_fu_195_p1;
    sc_signal< sc_lv<15> > tmp_28_cast_reg_296;
    sc_signal< sc_lv<32> > bound_fu_205_p2;
    sc_signal< sc_lv<32> > bound_reg_301;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_211_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_306;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_2;
    sc_signal< bool > ap_sig_bdd_115;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_129;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2;
    sc_signal< bool > ap_sig_bdd_145;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1;
    sc_signal< sc_lv<32> > indvar_flatten_next_fu_216_p2;
    sc_signal< sc_lv<8> > Y_reg_315;
    sc_signal< sc_lv<8> > U_reg_320;
    sc_signal< sc_lv<8> > V_reg_325;
    sc_signal< sc_lv<8> > tmp_5_reg_330;
    sc_signal< sc_lv<8> > tmp_6_reg_335;
    sc_signal< sc_lv<8> > tmp_7_reg_340;
    sc_signal< sc_lv<16> > bound_fu_205_p0;
    sc_signal< sc_lv<16> > bound_fu_205_p1;
    sc_signal< sc_lv<8> > tmp_2_fu_225_p0;
    sc_signal< sc_lv<8> > tmp_2_fu_225_p1;
    sc_signal< sc_lv<8> > tmp_3_fu_233_p0;
    sc_signal< sc_lv<8> > tmp_3_fu_233_p1;
    sc_signal< sc_lv<8> > tmp_4_fu_241_p0;
    sc_signal< sc_lv<8> > tmp_4_fu_241_p1;
    sc_signal< sc_lv<15> > tmp_2_fu_225_p2;
    sc_signal< sc_lv<15> > tmp_3_fu_233_p2;
    sc_signal< sc_lv<15> > tmp_4_fu_241_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_3;
    sc_signal< bool > ap_sig_bdd_259;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_lv<32> > bound_fu_205_p00;
    sc_signal< sc_lv<32> > bound_fu_205_p10;
    sc_signal< sc_lv<15> > tmp_2_fu_225_p00;
    sc_signal< sc_lv<15> > tmp_3_fu_233_p00;
    sc_signal< sc_lv<15> > tmp_4_fu_241_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_pp0_stg0_fsm_2;
    static const sc_lv<4> ap_ST_st7_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_100();
    void thread_ap_sig_bdd_115();
    void thread_ap_sig_bdd_129();
    void thread_ap_sig_bdd_145();
    void thread_ap_sig_bdd_23();
    void thread_ap_sig_bdd_259();
    void thread_ap_sig_bdd_88();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_2();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st7_fsm_3();
    void thread_bound_fu_205_p0();
    void thread_bound_fu_205_p00();
    void thread_bound_fu_205_p1();
    void thread_bound_fu_205_p10();
    void thread_bound_fu_205_p2();
    void thread_exitcond_flatten_fu_211_p2();
    void thread_in_channels_ch1_read();
    void thread_in_channels_ch2_read();
    void thread_in_channels_ch3_read();
    void thread_in_height_read();
    void thread_in_width_read();
    void thread_indvar_flatten_next_fu_216_p2();
    void thread_out_channels_ch1_din();
    void thread_out_channels_ch1_write();
    void thread_out_channels_ch2_din();
    void thread_out_channels_ch2_write();
    void thread_out_channels_ch3_din();
    void thread_out_channels_ch3_write();
    void thread_out_height_din();
    void thread_out_height_write();
    void thread_out_width_din();
    void thread_out_width_write();
    void thread_tmp_28_cast_fu_195_p1();
    void thread_tmp_2_fu_225_p0();
    void thread_tmp_2_fu_225_p00();
    void thread_tmp_2_fu_225_p1();
    void thread_tmp_2_fu_225_p2();
    void thread_tmp_3_fu_233_p0();
    void thread_tmp_3_fu_233_p00();
    void thread_tmp_3_fu_233_p1();
    void thread_tmp_3_fu_233_p2();
    void thread_tmp_4_fu_241_p0();
    void thread_tmp_4_fu_241_p00();
    void thread_tmp_4_fu_241_p1();
    void thread_tmp_4_fu_241_p2();
    void thread_tmp_cast_45_fu_191_p1();
    void thread_tmp_cast_fu_187_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
