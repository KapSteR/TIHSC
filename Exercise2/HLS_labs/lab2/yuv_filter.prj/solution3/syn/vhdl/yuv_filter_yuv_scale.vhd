-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv_scale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_empty_n : IN STD_LOGIC;
    in_channels_ch1_read : OUT STD_LOGIC;
    in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_empty_n : IN STD_LOGIC;
    in_channels_ch2_read : OUT STD_LOGIC;
    in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_empty_n : IN STD_LOGIC;
    in_channels_ch3_read : OUT STD_LOGIC;
    in_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_width_empty_n : IN STD_LOGIC;
    in_width_read : OUT STD_LOGIC;
    in_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_empty_n : IN STD_LOGIC;
    in_height_read : OUT STD_LOGIC;
    out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_full_n : IN STD_LOGIC;
    out_channels_ch1_write : OUT STD_LOGIC;
    out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_full_n : IN STD_LOGIC;
    out_channels_ch2_write : OUT STD_LOGIC;
    out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_full_n : IN STD_LOGIC;
    out_channels_ch3_write : OUT STD_LOGIC;
    out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_full_n : IN STD_LOGIC;
    out_width_write : OUT STD_LOGIC;
    out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_full_n : IN STD_LOGIC;
    out_height_write : OUT STD_LOGIC;
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of yuv_filter_yuv_scale is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st7_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal indvar_flatten_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_reg_276 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_bdd_88 : BOOLEAN;
    signal height_reg_281 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_187_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_reg_286 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_100 : BOOLEAN;
    signal tmp_cast_45_fu_191_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_45_reg_291 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_cast_fu_195_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_cast_reg_296 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_129 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_145 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_320 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_325 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_335 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_205_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_205_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_225_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_225_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_233_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_241_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_225_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_fu_233_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_241_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_259 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal bound_fu_205_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_205_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_225_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_fu_233_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_241_p00 : STD_LOGIC_VECTOR (14 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_211_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_211_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_211_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar_flatten_reg_175 assign process. --
    indvar_flatten_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_211_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_175 <= indvar_flatten_next_fu_216_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                indvar_flatten_reg_175 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_306 = ap_const_lv1_0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                U_reg_320 <= in_channels_ch2_dout;
                V_reg_325 <= in_channels_ch3_dout;
                Y_reg_315 <= in_channels_ch1_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1 <= exitcond_flatten_reg_306;
                exitcond_flatten_reg_306 <= exitcond_flatten_fu_211_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then
                ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                bound_reg_301 <= bound_fu_205_p2;
                tmp_28_cast_reg_296(0) <= tmp_28_cast_fu_195_p1(0);
    tmp_28_cast_reg_296(1) <= tmp_28_cast_fu_195_p1(1);
    tmp_28_cast_reg_296(2) <= tmp_28_cast_fu_195_p1(2);
    tmp_28_cast_reg_296(3) <= tmp_28_cast_fu_195_p1(3);
    tmp_28_cast_reg_296(4) <= tmp_28_cast_fu_195_p1(4);
    tmp_28_cast_reg_296(5) <= tmp_28_cast_fu_195_p1(5);
    tmp_28_cast_reg_296(6) <= tmp_28_cast_fu_195_p1(6);
    tmp_28_cast_reg_296(7) <= tmp_28_cast_fu_195_p1(7);
                tmp_cast_45_reg_291(0) <= tmp_cast_45_fu_191_p1(0);
    tmp_cast_45_reg_291(1) <= tmp_cast_45_fu_191_p1(1);
    tmp_cast_45_reg_291(2) <= tmp_cast_45_fu_191_p1(2);
    tmp_cast_45_reg_291(3) <= tmp_cast_45_fu_191_p1(3);
    tmp_cast_45_reg_291(4) <= tmp_cast_45_fu_191_p1(4);
    tmp_cast_45_reg_291(5) <= tmp_cast_45_fu_191_p1(5);
    tmp_cast_45_reg_291(6) <= tmp_cast_45_fu_191_p1(6);
    tmp_cast_45_reg_291(7) <= tmp_cast_45_fu_191_p1(7);
                tmp_cast_reg_286(0) <= tmp_cast_fu_187_p1(0);
    tmp_cast_reg_286(1) <= tmp_cast_fu_187_p1(1);
    tmp_cast_reg_286(2) <= tmp_cast_fu_187_p1(2);
    tmp_cast_reg_286(3) <= tmp_cast_fu_187_p1(3);
    tmp_cast_reg_286(4) <= tmp_cast_fu_187_p1(4);
    tmp_cast_reg_286(5) <= tmp_cast_fu_187_p1(5);
    tmp_cast_reg_286(6) <= tmp_cast_fu_187_p1(6);
    tmp_cast_reg_286(7) <= tmp_cast_fu_187_p1(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_88))) then
                height_reg_281 <= in_height_dout;
                width_reg_276 <= in_width_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1))) then
                tmp_5_reg_330 <= tmp_2_fu_225_p2(14 downto 7);
                tmp_6_reg_335 <= tmp_3_fu_233_p2(14 downto 7);
                tmp_7_reg_340 <= tmp_4_fu_241_p2(14 downto 7);
            end if;
        end if;
    end process;
    tmp_cast_reg_286(14 downto 8) <= "0000000";
    tmp_cast_45_reg_291(14 downto 8) <= "0000000";
    tmp_28_cast_reg_296(14 downto 8) <= "0000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_88, exitcond_flatten_fu_211_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_129, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_145, ap_reg_ppiten_pp0_it3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_88)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_211_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_211_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st7_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st7_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_100 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, exitcond_flatten_reg_306)
    begin
                ap_sig_bdd_129 <= (((in_channels_ch1_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_306 = ap_const_lv1_0)) or ((exitcond_flatten_reg_306 = ap_const_lv1_0) and (in_channels_ch2_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_306 = ap_const_lv1_0) and (in_channels_ch3_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2)
    begin
                ap_sig_bdd_145 <= (((out_channels_ch1_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) and (out_channels_ch2_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) and (out_channels_ch3_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_259 assign process. --
    ap_sig_bdd_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_259 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_start, ap_done_reg, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n)
    begin
                ap_sig_bdd_88 <= ((in_width_empty_n = ap_const_logic_0) or (in_height_empty_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (out_height_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_100)
    begin
        if (ap_sig_bdd_100) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_3 assign process. --
    ap_sig_cseq_ST_st7_fsm_3_assign_proc : process(ap_sig_bdd_259)
    begin
        if (ap_sig_bdd_259) then 
            ap_sig_cseq_ST_st7_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_205_p0 <= bound_fu_205_p00(16 - 1 downto 0);
    bound_fu_205_p00 <= std_logic_vector(resize(unsigned(width_reg_276),32));
    bound_fu_205_p1 <= bound_fu_205_p10(16 - 1 downto 0);
    bound_fu_205_p10 <= std_logic_vector(resize(unsigned(height_reg_281),32));
    bound_fu_205_p2 <= std_logic_vector(resize(unsigned(bound_fu_205_p0) * unsigned(bound_fu_205_p1), 32));
    exitcond_flatten_fu_211_p2 <= "1" when (indvar_flatten_reg_175 = bound_reg_301) else "0";

    -- in_channels_ch1_read assign process. --
    in_channels_ch1_read_assign_proc : process(exitcond_flatten_reg_306, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_129, ap_reg_ppiten_pp0_it1, ap_sig_bdd_145, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_306 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            in_channels_ch1_read <= ap_const_logic_1;
        else 
            in_channels_ch1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- in_channels_ch2_read assign process. --
    in_channels_ch2_read_assign_proc : process(exitcond_flatten_reg_306, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_129, ap_reg_ppiten_pp0_it1, ap_sig_bdd_145, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_306 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            in_channels_ch2_read <= ap_const_logic_1;
        else 
            in_channels_ch2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- in_channels_ch3_read assign process. --
    in_channels_ch3_read_assign_proc : process(exitcond_flatten_reg_306, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_129, ap_reg_ppiten_pp0_it1, ap_sig_bdd_145, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_306 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            in_channels_ch3_read <= ap_const_logic_1;
        else 
            in_channels_ch3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- in_height_read assign process. --
    in_height_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_88))) then 
            in_height_read <= ap_const_logic_1;
        else 
            in_height_read <= ap_const_logic_0;
        end if; 
    end process;


    -- in_width_read assign process. --
    in_width_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_88))) then 
            in_width_read <= ap_const_logic_1;
        else 
            in_width_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_216_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_175) + unsigned(ap_const_lv32_1));
    out_channels_ch1_din <= tmp_5_reg_330;

    -- out_channels_ch1_write assign process. --
    out_channels_ch1_write_assign_proc : process(ap_sig_bdd_129, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2, ap_sig_bdd_145, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            out_channels_ch1_write <= ap_const_logic_1;
        else 
            out_channels_ch1_write <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_din <= tmp_6_reg_335;

    -- out_channels_ch2_write assign process. --
    out_channels_ch2_write_assign_proc : process(ap_sig_bdd_129, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2, ap_sig_bdd_145, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            out_channels_ch2_write <= ap_const_logic_1;
        else 
            out_channels_ch2_write <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_din <= tmp_7_reg_340;

    -- out_channels_ch3_write assign process. --
    out_channels_ch3_write_assign_proc : process(ap_sig_bdd_129, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2, ap_sig_bdd_145, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_129 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_145 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            out_channels_ch3_write <= ap_const_logic_1;
        else 
            out_channels_ch3_write <= ap_const_logic_0;
        end if; 
    end process;

    out_height_din <= in_height_dout;

    -- out_height_write assign process. --
    out_height_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_88))) then 
            out_height_write <= ap_const_logic_1;
        else 
            out_height_write <= ap_const_logic_0;
        end if; 
    end process;

    out_width_din <= in_width_dout;

    -- out_width_write assign process. --
    out_width_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_88))) then 
            out_width_write <= ap_const_logic_1;
        else 
            out_width_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_28_cast_fu_195_p1 <= std_logic_vector(resize(unsigned(V_scale),15));
    tmp_2_fu_225_p0 <= tmp_2_fu_225_p00(8 - 1 downto 0);
    tmp_2_fu_225_p00 <= std_logic_vector(resize(unsigned(Y_reg_315),15));
    tmp_2_fu_225_p1 <= tmp_cast_reg_286(8 - 1 downto 0);
    tmp_2_fu_225_p2 <= std_logic_vector(resize(unsigned(tmp_2_fu_225_p0) * unsigned(tmp_2_fu_225_p1), 15));
    tmp_3_fu_233_p0 <= tmp_3_fu_233_p00(8 - 1 downto 0);
    tmp_3_fu_233_p00 <= std_logic_vector(resize(unsigned(U_reg_320),15));
    tmp_3_fu_233_p1 <= tmp_cast_45_reg_291(8 - 1 downto 0);
    tmp_3_fu_233_p2 <= std_logic_vector(resize(unsigned(tmp_3_fu_233_p0) * unsigned(tmp_3_fu_233_p1), 15));
    tmp_4_fu_241_p0 <= tmp_4_fu_241_p00(8 - 1 downto 0);
    tmp_4_fu_241_p00 <= std_logic_vector(resize(unsigned(V_reg_325),15));
    tmp_4_fu_241_p1 <= tmp_28_cast_reg_296(8 - 1 downto 0);
    tmp_4_fu_241_p2 <= std_logic_vector(resize(unsigned(tmp_4_fu_241_p0) * unsigned(tmp_4_fu_241_p1), 15));
    tmp_cast_45_fu_191_p1 <= std_logic_vector(resize(unsigned(U_scale),15));
    tmp_cast_fu_187_p1 <= std_logic_vector(resize(unsigned(Y_scale),15));
end behav;
