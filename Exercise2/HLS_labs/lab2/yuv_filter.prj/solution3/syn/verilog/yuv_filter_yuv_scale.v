// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv_scale (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_channels_ch1_dout,
        in_channels_ch1_empty_n,
        in_channels_ch1_read,
        in_channels_ch2_dout,
        in_channels_ch2_empty_n,
        in_channels_ch2_read,
        in_channels_ch3_dout,
        in_channels_ch3_empty_n,
        in_channels_ch3_read,
        in_width_dout,
        in_width_empty_n,
        in_width_read,
        in_height_dout,
        in_height_empty_n,
        in_height_read,
        out_channels_ch1_din,
        out_channels_ch1_full_n,
        out_channels_ch1_write,
        out_channels_ch2_din,
        out_channels_ch2_full_n,
        out_channels_ch2_write,
        out_channels_ch3_din,
        out_channels_ch3_full_n,
        out_channels_ch3_write,
        out_width_din,
        out_width_full_n,
        out_width_write,
        out_height_din,
        out_height_full_n,
        out_height_write,
        Y_scale,
        U_scale,
        V_scale
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 4'b100;
parameter    ap_ST_st7_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] in_channels_ch1_dout;
input   in_channels_ch1_empty_n;
output   in_channels_ch1_read;
input  [7:0] in_channels_ch2_dout;
input   in_channels_ch2_empty_n;
output   in_channels_ch2_read;
input  [7:0] in_channels_ch3_dout;
input   in_channels_ch3_empty_n;
output   in_channels_ch3_read;
input  [15:0] in_width_dout;
input   in_width_empty_n;
output   in_width_read;
input  [15:0] in_height_dout;
input   in_height_empty_n;
output   in_height_read;
output  [7:0] out_channels_ch1_din;
input   out_channels_ch1_full_n;
output   out_channels_ch1_write;
output  [7:0] out_channels_ch2_din;
input   out_channels_ch2_full_n;
output   out_channels_ch2_write;
output  [7:0] out_channels_ch3_din;
input   out_channels_ch3_full_n;
output   out_channels_ch3_write;
output  [15:0] out_width_din;
input   out_width_full_n;
output   out_width_write;
output  [15:0] out_height_din;
input   out_height_full_n;
output   out_height_write;
input  [7:0] Y_scale;
input  [7:0] U_scale;
input  [7:0] V_scale;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_read;
reg in_channels_ch2_read;
reg in_channels_ch3_read;
reg in_width_read;
reg in_height_read;
reg out_channels_ch1_write;
reg out_channels_ch2_write;
reg out_channels_ch3_write;
reg out_width_write;
reg out_height_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_23;
reg   [31:0] indvar_flatten_reg_175;
reg   [15:0] width_reg_276;
reg    ap_sig_bdd_88;
reg   [15:0] height_reg_281;
wire   [14:0] tmp_cast_fu_187_p1;
reg   [14:0] tmp_cast_reg_286;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_100;
wire   [14:0] tmp_cast_45_fu_191_p1;
reg   [14:0] tmp_cast_45_reg_291;
wire   [14:0] tmp_28_cast_fu_195_p1;
reg   [14:0] tmp_28_cast_reg_296;
wire   [31:0] bound_fu_205_p2;
reg   [31:0] bound_reg_301;
wire   [0:0] exitcond_flatten_fu_211_p2;
reg   [0:0] exitcond_flatten_reg_306;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_bdd_115;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_129;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2;
reg    ap_sig_bdd_145;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1;
wire   [31:0] indvar_flatten_next_fu_216_p2;
reg   [7:0] Y_reg_315;
reg   [7:0] U_reg_320;
reg   [7:0] V_reg_325;
reg   [7:0] tmp_5_reg_330;
reg   [7:0] tmp_6_reg_335;
reg   [7:0] tmp_7_reg_340;
wire   [15:0] bound_fu_205_p0;
wire   [15:0] bound_fu_205_p1;
wire   [7:0] tmp_2_fu_225_p0;
wire   [7:0] tmp_2_fu_225_p1;
wire   [7:0] tmp_3_fu_233_p0;
wire   [7:0] tmp_3_fu_233_p1;
wire   [7:0] tmp_4_fu_241_p0;
wire   [7:0] tmp_4_fu_241_p1;
wire   [14:0] tmp_2_fu_225_p2;
wire   [14:0] tmp_3_fu_233_p2;
wire   [14:0] tmp_4_fu_241_p2;
reg    ap_sig_cseq_ST_st7_fsm_3;
reg    ap_sig_bdd_259;
reg   [3:0] ap_NS_fsm;
wire   [31:0] bound_fu_205_p00;
wire   [31:0] bound_fu_205_p10;
wire   [14:0] tmp_2_fu_225_p00;
wire   [14:0] tmp_3_fu_233_p00;
wire   [14:0] tmp_4_fu_241_p00;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_3)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(exitcond_flatten_fu_211_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & (exitcond_flatten_fu_211_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(exitcond_flatten_fu_211_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3)))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & (exitcond_flatten_fu_211_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_175 <= indvar_flatten_next_fu_216_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        indvar_flatten_reg_175 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_306 == ap_const_lv1_0) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        U_reg_320 <= in_channels_ch2_dout;
        V_reg_325 <= in_channels_ch3_dout;
        Y_reg_315 <= in_channels_ch1_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1 <= exitcond_flatten_reg_306;
        exitcond_flatten_reg_306 <= exitcond_flatten_fu_211_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3)))) begin
        ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        bound_reg_301 <= bound_fu_205_p2;
        tmp_28_cast_reg_296[0] <= tmp_28_cast_fu_195_p1[0];
tmp_28_cast_reg_296[1] <= tmp_28_cast_fu_195_p1[1];
tmp_28_cast_reg_296[2] <= tmp_28_cast_fu_195_p1[2];
tmp_28_cast_reg_296[3] <= tmp_28_cast_fu_195_p1[3];
tmp_28_cast_reg_296[4] <= tmp_28_cast_fu_195_p1[4];
tmp_28_cast_reg_296[5] <= tmp_28_cast_fu_195_p1[5];
tmp_28_cast_reg_296[6] <= tmp_28_cast_fu_195_p1[6];
tmp_28_cast_reg_296[7] <= tmp_28_cast_fu_195_p1[7];
        tmp_cast_45_reg_291[0] <= tmp_cast_45_fu_191_p1[0];
tmp_cast_45_reg_291[1] <= tmp_cast_45_fu_191_p1[1];
tmp_cast_45_reg_291[2] <= tmp_cast_45_fu_191_p1[2];
tmp_cast_45_reg_291[3] <= tmp_cast_45_fu_191_p1[3];
tmp_cast_45_reg_291[4] <= tmp_cast_45_fu_191_p1[4];
tmp_cast_45_reg_291[5] <= tmp_cast_45_fu_191_p1[5];
tmp_cast_45_reg_291[6] <= tmp_cast_45_fu_191_p1[6];
tmp_cast_45_reg_291[7] <= tmp_cast_45_fu_191_p1[7];
        tmp_cast_reg_286[0] <= tmp_cast_fu_187_p1[0];
tmp_cast_reg_286[1] <= tmp_cast_fu_187_p1[1];
tmp_cast_reg_286[2] <= tmp_cast_fu_187_p1[2];
tmp_cast_reg_286[3] <= tmp_cast_fu_187_p1[3];
tmp_cast_reg_286[4] <= tmp_cast_fu_187_p1[4];
tmp_cast_reg_286[5] <= tmp_cast_fu_187_p1[5];
tmp_cast_reg_286[6] <= tmp_cast_fu_187_p1[6];
tmp_cast_reg_286[7] <= tmp_cast_fu_187_p1[7];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_88)) begin
        height_reg_281 <= in_height_dout;
        width_reg_276 <= in_width_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it1))) begin
        tmp_5_reg_330 <= {{tmp_2_fu_225_p2[ap_const_lv32_E : ap_const_lv32_7]}};
        tmp_6_reg_335 <= {{tmp_3_fu_233_p2[ap_const_lv32_E : ap_const_lv32_7]}};
        tmp_7_reg_340 <= {{tmp_4_fu_241_p2[ap_const_lv32_E : ap_const_lv32_7]}};
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st7_fsm_3)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_3))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_3)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. ///
always @ (ap_sig_bdd_115)
begin
    if (ap_sig_bdd_115) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_23)
begin
    if (ap_sig_bdd_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_100)
begin
    if (ap_sig_bdd_100) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_3 assign process. ///
always @ (ap_sig_bdd_259)
begin
    if (ap_sig_bdd_259) begin
        ap_sig_cseq_ST_st7_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_3 = ap_const_logic_0;
    end
end

/// in_channels_ch1_read assign process. ///
always @ (exitcond_flatten_reg_306 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_129 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_145 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_306 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        in_channels_ch1_read = ap_const_logic_1;
    end else begin
        in_channels_ch1_read = ap_const_logic_0;
    end
end

/// in_channels_ch2_read assign process. ///
always @ (exitcond_flatten_reg_306 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_129 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_145 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_306 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        in_channels_ch2_read = ap_const_logic_1;
    end else begin
        in_channels_ch2_read = ap_const_logic_0;
    end
end

/// in_channels_ch3_read assign process. ///
always @ (exitcond_flatten_reg_306 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_129 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_145 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_306 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        in_channels_ch3_read = ap_const_logic_1;
    end else begin
        in_channels_ch3_read = ap_const_logic_0;
    end
end

/// in_height_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_88)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_88)) begin
        in_height_read = ap_const_logic_1;
    end else begin
        in_height_read = ap_const_logic_0;
    end
end

/// in_width_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_88)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_88)) begin
        in_width_read = ap_const_logic_1;
    end else begin
        in_width_read = ap_const_logic_0;
    end
end

/// out_channels_ch1_write assign process. ///
always @ (ap_sig_bdd_129 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2 or ap_sig_bdd_145 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        out_channels_ch1_write = ap_const_logic_1;
    end else begin
        out_channels_ch1_write = ap_const_logic_0;
    end
end

/// out_channels_ch2_write assign process. ///
always @ (ap_sig_bdd_129 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2 or ap_sig_bdd_145 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        out_channels_ch2_write = ap_const_logic_1;
    end else begin
        out_channels_ch2_write = ap_const_logic_0;
    end
end

/// out_channels_ch3_write assign process. ///
always @ (ap_sig_bdd_129 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2 or ap_sig_bdd_145 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        out_channels_ch3_write = ap_const_logic_1;
    end else begin
        out_channels_ch3_write = ap_const_logic_0;
    end
end

/// out_height_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_88)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_88)) begin
        out_height_write = ap_const_logic_1;
    end else begin
        out_height_write = ap_const_logic_0;
    end
end

/// out_width_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_88)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_88)) begin
        out_width_write = ap_const_logic_1;
    end else begin
        out_width_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_88 or exitcond_flatten_fu_211_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_129 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_sig_bdd_145 or ap_reg_ppiten_pp0_it3)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_88) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
        end
        ap_ST_pp0_stg0_fsm_2 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(exitcond_flatten_fu_211_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_129 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_145 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(exitcond_flatten_fu_211_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st7_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_st7_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_100 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_100 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_115 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_115 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_129 assign process. ///
always @ (in_channels_ch1_empty_n or in_channels_ch2_empty_n or in_channels_ch3_empty_n or exitcond_flatten_reg_306)
begin
    ap_sig_bdd_129 = (((in_channels_ch1_empty_n == ap_const_logic_0) & (exitcond_flatten_reg_306 == ap_const_lv1_0)) | ((exitcond_flatten_reg_306 == ap_const_lv1_0) & (in_channels_ch2_empty_n == ap_const_logic_0)) | ((exitcond_flatten_reg_306 == ap_const_lv1_0) & (in_channels_ch3_empty_n == ap_const_logic_0)));
end

/// ap_sig_bdd_145 assign process. ///
always @ (out_channels_ch1_full_n or out_channels_ch2_full_n or out_channels_ch3_full_n or ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2)
begin
    ap_sig_bdd_145 = (((out_channels_ch1_full_n == ap_const_logic_0) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) & (out_channels_ch2_full_n == ap_const_logic_0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_306_pp0_it2) & (out_channels_ch3_full_n == ap_const_logic_0)));
end

/// ap_sig_bdd_23 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_23 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_259 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_259 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_88 assign process. ///
always @ (ap_start or ap_done_reg or in_width_empty_n or in_height_empty_n or out_width_full_n or out_height_full_n)
begin
    ap_sig_bdd_88 = ((in_width_empty_n == ap_const_logic_0) | (in_height_empty_n == ap_const_logic_0) | (out_width_full_n == ap_const_logic_0) | (out_height_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign bound_fu_205_p0 = bound_fu_205_p00;
assign bound_fu_205_p00 = width_reg_276;
assign bound_fu_205_p1 = bound_fu_205_p10;
assign bound_fu_205_p10 = height_reg_281;
assign bound_fu_205_p2 = (bound_fu_205_p0 * bound_fu_205_p1);
assign exitcond_flatten_fu_211_p2 = (indvar_flatten_reg_175 == bound_reg_301? 1'b1: 1'b0);
assign indvar_flatten_next_fu_216_p2 = (indvar_flatten_reg_175 + ap_const_lv32_1);
assign out_channels_ch1_din = tmp_5_reg_330;
assign out_channels_ch2_din = tmp_6_reg_335;
assign out_channels_ch3_din = tmp_7_reg_340;
assign out_height_din = in_height_dout;
assign out_width_din = in_width_dout;
assign tmp_28_cast_fu_195_p1 = V_scale;
assign tmp_2_fu_225_p0 = tmp_2_fu_225_p00;
assign tmp_2_fu_225_p00 = Y_reg_315;
assign tmp_2_fu_225_p1 = tmp_cast_reg_286;
assign tmp_2_fu_225_p2 = (tmp_2_fu_225_p0 * tmp_2_fu_225_p1);
assign tmp_3_fu_233_p0 = tmp_3_fu_233_p00;
assign tmp_3_fu_233_p00 = U_reg_320;
assign tmp_3_fu_233_p1 = tmp_cast_45_reg_291;
assign tmp_3_fu_233_p2 = (tmp_3_fu_233_p0 * tmp_3_fu_233_p1);
assign tmp_4_fu_241_p0 = tmp_4_fu_241_p00;
assign tmp_4_fu_241_p00 = V_reg_325;
assign tmp_4_fu_241_p1 = tmp_28_cast_reg_296;
assign tmp_4_fu_241_p2 = (tmp_4_fu_241_p0 * tmp_4_fu_241_p1);
assign tmp_cast_45_fu_191_p1 = U_scale;
assign tmp_cast_fu_187_p1 = Y_scale;
always @ (posedge ap_clk)
begin
    tmp_cast_reg_286[14:8] <= 7'b0000000;
    tmp_cast_45_reg_291[14:8] <= 7'b0000000;
    tmp_28_cast_reg_296[14:8] <= 7'b0000000;
end



endmodule //yuv_filter_yuv_scale

