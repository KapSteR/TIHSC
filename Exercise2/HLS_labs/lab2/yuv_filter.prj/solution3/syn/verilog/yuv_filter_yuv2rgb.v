// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv2rgb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_channels_ch1_dout,
        in_channels_ch1_empty_n,
        in_channels_ch1_read,
        in_channels_ch2_dout,
        in_channels_ch2_empty_n,
        in_channels_ch2_read,
        in_channels_ch3_dout,
        in_channels_ch3_empty_n,
        in_channels_ch3_read,
        in_width_dout,
        in_width_empty_n,
        in_width_read,
        in_height_dout,
        in_height_empty_n,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        out_width,
        out_width_ap_vld,
        out_height,
        out_height_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 4'b100;
parameter    ap_ST_st9_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv9_1F0 = 9'b111110000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv18_12A = 18'b100101010;
parameter    ap_const_lv18_80 = 18'b10000000;
parameter    ap_const_lv18_199 = 18'b110011001;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv17_1FF30 = 17'b11111111100110000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv16_FF9C = 16'b1111111110011100;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] in_channels_ch1_dout;
input   in_channels_ch1_empty_n;
output   in_channels_ch1_read;
input  [7:0] in_channels_ch2_dout;
input   in_channels_ch2_empty_n;
output   in_channels_ch2_read;
input  [7:0] in_channels_ch3_dout;
input   in_channels_ch3_empty_n;
output   in_channels_ch3_read;
input  [15:0] in_width_dout;
input   in_width_empty_n;
output   in_width_read;
input  [15:0] in_height_dout;
input   in_height_empty_n;
output   in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] out_width;
output   out_width_ap_vld;
output  [15:0] out_height;
output   out_height_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_read;
reg in_channels_ch2_read;
reg in_channels_ch3_read;
reg in_width_read;
reg in_height_read;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
reg out_width_ap_vld;
reg out_height_ap_vld;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_23;
reg   [31:0] indvar_flatten_reg_208;
reg   [15:0] x_reg_219;
reg   [15:0] y_reg_230;
reg   [15:0] width_reg_626;
reg    ap_sig_bdd_90;
reg   [15:0] height_reg_632;
wire   [31:0] bound_fu_248_p2;
reg   [31:0] bound_reg_639;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_102;
wire   [0:0] exitcond_flatten_fu_254_p2;
reg   [0:0] exitcond_flatten_reg_644;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_bdd_111;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_125;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4;
wire   [31:0] indvar_flatten_next_fu_259_p2;
wire   [15:0] y_mid2_fu_270_p3;
reg   [15:0] y_mid2_reg_653;
wire   [15:0] x_mid2_fu_284_p3;
reg   [15:0] x_mid2_reg_658;
wire   [15:0] y_2_fu_292_p2;
reg   [7:0] Y_reg_670;
reg   [7:0] U_reg_675;
reg   [7:0] V_reg_680;
wire   [26:0] p_addr1_fu_329_p2;
reg   [26:0] p_addr1_reg_685;
reg   [26:0] ap_reg_ppstg_p_addr1_reg_685_pp0_it2;
reg   [26:0] ap_reg_ppstg_p_addr1_reg_685_pp0_it3;
reg   [26:0] ap_reg_ppstg_p_addr1_reg_685_pp0_it4;
wire   [7:0] D_fu_344_p2;
reg   [7:0] D_reg_690;
reg   [7:0] ap_reg_ppstg_D_reg_690_pp0_it3;
wire   [7:0] E_fu_349_p2;
reg   [7:0] E_reg_697;
wire  signed [17:0] tmp_21_fu_364_p2;
reg  signed [17:0] tmp_21_reg_703;
reg   [1:0] tmp_1_reg_710;
reg   [0:0] tmp_2_reg_715;
reg   [7:0] phitmp_reg_720;
wire  signed [17:0] tmp1_fu_428_p2;
reg  signed [17:0] tmp1_reg_725;
wire   [0:0] icmp2_fu_481_p2;
reg   [0:0] icmp2_reg_730;
reg   [0:0] tmp_11_reg_736;
reg   [7:0] phitmp3_reg_741;
wire   [7:0] R_fu_523_p3;
reg   [7:0] R_reg_746;
reg   [1:0] tmp_4_reg_751;
reg   [0:0] tmp_5_reg_756;
reg   [7:0] phitmp2_reg_761;
wire   [7:0] B_fu_587_p3;
reg   [7:0] B_reg_766;
reg   [15:0] x_phi_fu_223_p4;
wire   [63:0] tmp_10_fu_620_p1;
wire   [15:0] bound_fu_248_p0;
wire   [15:0] bound_fu_248_p1;
wire   [0:0] exitcond_fu_265_p2;
wire   [15:0] x_s_fu_278_p2;
wire   [25:0] tmp_fu_301_p3;
wire   [23:0] tmp_7_fu_312_p3;
wire   [26:0] p_shl8_cast_fu_308_p1;
wire   [26:0] p_shl9_cast_fu_319_p1;
wire   [26:0] p_addr_fu_323_p2;
wire   [26:0] tmp_trn_cast_fu_298_p1;
wire   [8:0] tmp_40_cast_fu_335_p1;
wire   [8:0] C_fu_338_p2;
wire  signed [8:0] tmp_19_fu_358_p0;
wire  signed [17:0] tmp_19_fu_358_p2;
wire  signed [7:0] tmp_20_fu_376_p0;
wire  signed [17:0] tmp_20_fu_376_p2;
wire  signed [17:0] tmp_22_fu_385_p2;
wire  signed [7:0] tmp_24_fu_418_p0;
wire  signed [16:0] tmp_24_fu_418_p2;
wire  signed [17:0] tmp_40_cast2_fu_424_p1;
wire   [16:0] p_shl_fu_433_p3;
wire   [9:0] p_shl1_fu_444_p3;
wire  signed [17:0] p_shl_cast_fu_440_p1;
wire  signed [17:0] p_shl1_cast_fu_451_p1;
wire  signed [17:0] tmp_26_fu_455_p2;
wire  signed [18:0] tmp_62_cast_fu_461_p1;
wire  signed [18:0] tmp_47_cast_fu_382_p1;
wire  signed [18:0] tmp_27_fu_465_p2;
wire   [2:0] tmp_8_fu_471_p4;
wire   [0:0] icmp_fu_505_p2;
wire   [0:0] tmp_3_fu_518_p2;
wire   [7:0] p_phitmp_fu_510_p3;
wire  signed [7:0] tmp_23_fu_533_p0;
wire  signed [15:0] tmp_23_fu_533_p2;
wire  signed [17:0] tmp_39_cast_fu_539_p1;
wire  signed [17:0] tmp_25_fu_543_p2;
wire   [0:0] tmp_9_fu_583_p2;
wire   [7:0] p_phitmp3_fu_576_p3;
wire   [0:0] icmp1_fu_594_p2;
wire   [0:0] tmp_6_fu_607_p2;
wire   [7:0] p_phitmp2_fu_599_p3;
reg    ap_sig_cseq_ST_st9_fsm_3;
reg    ap_sig_bdd_496;
reg   [3:0] ap_NS_fsm;
wire   [31:0] bound_fu_248_p00;
wire   [31:0] bound_fu_248_p10;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_3)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_254_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_254_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_254_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_254_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_208 <= indvar_flatten_next_fu_259_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        indvar_flatten_reg_208 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_644 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        x_reg_219 <= x_mid2_reg_658;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_reg_219 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_254_p2 == ap_const_lv1_0))) begin
        y_reg_230 <= y_2_fu_292_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_reg_230 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it3))) begin
        B_reg_766 <= B_fu_587_p3;
        R_reg_746 <= R_fu_523_p3;
        phitmp2_reg_761 <= {{tmp_25_fu_543_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_4_reg_751 <= {{tmp_25_fu_543_p2[ap_const_lv32_11 : ap_const_lv32_10]}};
        tmp_5_reg_756 <= tmp_25_fu_543_p2[ap_const_lv32_11];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it1))) begin
        D_reg_690 <= D_fu_344_p2;
        E_reg_697 <= E_fu_349_p2;
        tmp_21_reg_703[1] <= tmp_21_fu_364_p2[1];
tmp_21_reg_703[2] <= tmp_21_fu_364_p2[2];
tmp_21_reg_703[3] <= tmp_21_fu_364_p2[3];
tmp_21_reg_703[4] <= tmp_21_fu_364_p2[4];
tmp_21_reg_703[5] <= tmp_21_fu_364_p2[5];
tmp_21_reg_703[6] <= tmp_21_fu_364_p2[6];
tmp_21_reg_703[7] <= tmp_21_fu_364_p2[7];
tmp_21_reg_703[8] <= tmp_21_fu_364_p2[8];
tmp_21_reg_703[9] <= tmp_21_fu_364_p2[9];
tmp_21_reg_703[10] <= tmp_21_fu_364_p2[10];
tmp_21_reg_703[11] <= tmp_21_fu_364_p2[11];
tmp_21_reg_703[12] <= tmp_21_fu_364_p2[12];
tmp_21_reg_703[13] <= tmp_21_fu_364_p2[13];
tmp_21_reg_703[14] <= tmp_21_fu_364_p2[14];
tmp_21_reg_703[15] <= tmp_21_fu_364_p2[15];
tmp_21_reg_703[16] <= tmp_21_fu_364_p2[16];
tmp_21_reg_703[17] <= tmp_21_fu_364_p2[17];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_644 == ap_const_lv1_0) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        U_reg_675 <= in_channels_ch2_dout;
        V_reg_680 <= in_channels_ch3_dout;
        Y_reg_670 <= in_channels_ch1_dout;
        p_addr1_reg_685 <= p_addr1_fu_329_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        ap_reg_ppstg_D_reg_690_pp0_it3 <= D_reg_690;
        ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it1;
        ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it2;
        ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it3;
        ap_reg_ppstg_p_addr1_reg_685_pp0_it2 <= p_addr1_reg_685;
        ap_reg_ppstg_p_addr1_reg_685_pp0_it3 <= ap_reg_ppstg_p_addr1_reg_685_pp0_it2;
        ap_reg_ppstg_p_addr1_reg_685_pp0_it4 <= ap_reg_ppstg_p_addr1_reg_685_pp0_it3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it1 <= exitcond_flatten_reg_644;
        exitcond_flatten_reg_644 <= exitcond_flatten_fu_254_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        bound_reg_639 <= bound_fu_248_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_90)) begin
        height_reg_632 <= in_height_dout;
        width_reg_626 <= in_width_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it2))) begin
        icmp2_reg_730 <= icmp2_fu_481_p2;
        phitmp3_reg_741 <= {{tmp_27_fu_465_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        phitmp_reg_720 <= {{tmp_22_fu_385_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp1_reg_725[1] <= tmp1_fu_428_p2[1];
tmp1_reg_725[2] <= tmp1_fu_428_p2[2];
tmp1_reg_725[3] <= tmp1_fu_428_p2[3];
tmp1_reg_725[4] <= tmp1_fu_428_p2[4];
tmp1_reg_725[5] <= tmp1_fu_428_p2[5];
tmp1_reg_725[6] <= tmp1_fu_428_p2[6];
tmp1_reg_725[7] <= tmp1_fu_428_p2[7];
tmp1_reg_725[8] <= tmp1_fu_428_p2[8];
tmp1_reg_725[9] <= tmp1_fu_428_p2[9];
tmp1_reg_725[10] <= tmp1_fu_428_p2[10];
tmp1_reg_725[11] <= tmp1_fu_428_p2[11];
tmp1_reg_725[12] <= tmp1_fu_428_p2[12];
tmp1_reg_725[13] <= tmp1_fu_428_p2[13];
tmp1_reg_725[14] <= tmp1_fu_428_p2[14];
tmp1_reg_725[15] <= tmp1_fu_428_p2[15];
tmp1_reg_725[16] <= tmp1_fu_428_p2[16];
tmp1_reg_725[17] <= tmp1_fu_428_p2[17];
        tmp_11_reg_736 <= tmp_27_fu_465_p2[ap_const_lv32_12];
        tmp_1_reg_710 <= {{tmp_22_fu_385_p2[ap_const_lv32_11 : ap_const_lv32_10]}};
        tmp_2_reg_715 <= tmp_22_fu_385_p2[ap_const_lv32_11];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_254_p2 == ap_const_lv1_0))) begin
        x_mid2_reg_658 <= x_mid2_fu_284_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_254_p2 == ap_const_lv1_0))) begin
        y_mid2_reg_653 <= y_mid2_fu_270_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st9_fsm_3)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_3))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_3)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. ///
always @ (ap_sig_bdd_111)
begin
    if (ap_sig_bdd_111) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_23)
begin
    if (ap_sig_bdd_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_102)
begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_3 assign process. ///
always @ (ap_sig_bdd_496)
begin
    if (ap_sig_bdd_496) begin
        ap_sig_cseq_ST_st9_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_3 = ap_const_logic_0;
    end
end

/// in_channels_ch1_read assign process. ///
always @ (exitcond_flatten_reg_644 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_644 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        in_channels_ch1_read = ap_const_logic_1;
    end else begin
        in_channels_ch1_read = ap_const_logic_0;
    end
end

/// in_channels_ch2_read assign process. ///
always @ (exitcond_flatten_reg_644 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_644 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        in_channels_ch2_read = ap_const_logic_1;
    end else begin
        in_channels_ch2_read = ap_const_logic_0;
    end
end

/// in_channels_ch3_read assign process. ///
always @ (exitcond_flatten_reg_644 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_644 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        in_channels_ch3_read = ap_const_logic_1;
    end else begin
        in_channels_ch3_read = ap_const_logic_0;
    end
end

/// in_height_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_90)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_90)) begin
        in_height_read = ap_const_logic_1;
    end else begin
        in_height_read = ap_const_logic_0;
    end
end

/// in_width_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_90)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_90)) begin
        in_width_read = ap_const_logic_1;
    end else begin
        in_width_read = ap_const_logic_0;
    end
end

/// out_channels_ch1_ce0 assign process. ///
always @ (ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        out_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_we0 assign process. ///
always @ (ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5 or ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4))) begin
        out_channels_ch1_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch1_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_ce0 assign process. ///
always @ (ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        out_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch2_we0 assign process. ///
always @ (ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5 or ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4))) begin
        out_channels_ch2_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch2_we0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_ce0 assign process. ///
always @ (ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        out_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch3_we0 assign process. ///
always @ (ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it5 or ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4))) begin
        out_channels_ch3_we0 = ap_const_logic_1;
    end else begin
        out_channels_ch3_we0 = ap_const_logic_0;
    end
end

/// out_height_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        out_height_ap_vld = ap_const_logic_1;
    end else begin
        out_height_ap_vld = ap_const_logic_0;
    end
end

/// out_width_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        out_width_ap_vld = ap_const_logic_1;
    end else begin
        out_width_ap_vld = ap_const_logic_0;
    end
end

/// x_phi_fu_223_p4 assign process. ///
always @ (x_reg_219 or exitcond_flatten_reg_644 or ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it1 or x_mid2_reg_658)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_flatten_reg_644 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        x_phi_fu_223_p4 = x_mid2_reg_658;
    end else begin
        x_phi_fu_223_p4 = x_reg_219;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_90 or exitcond_flatten_fu_254_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_125 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it4 or ap_reg_ppiten_pp0_it5)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_90) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
        end
        ap_ST_pp0_stg0_fsm_2 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_254_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_254_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st9_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_st9_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_587_p3 = ((tmp_9_fu_583_p2)? p_phitmp3_fu_576_p3: phitmp3_reg_741);
assign C_fu_338_p2 = ($signed(tmp_40_cast_fu_335_p1) + $signed(ap_const_lv9_1F0));
assign D_fu_344_p2 = (U_reg_675 ^ ap_const_lv8_80);
assign E_fu_349_p2 = (V_reg_680 ^ ap_const_lv8_80);
assign R_fu_523_p3 = ((tmp_3_fu_518_p2)? p_phitmp_fu_510_p3: phitmp_reg_720);

/// ap_sig_bdd_102 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_111 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_111 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_125 assign process. ///
always @ (in_channels_ch1_empty_n or in_channels_ch2_empty_n or in_channels_ch3_empty_n or exitcond_flatten_reg_644)
begin
    ap_sig_bdd_125 = (((in_channels_ch1_empty_n == ap_const_logic_0) & (exitcond_flatten_reg_644 == ap_const_lv1_0)) | ((exitcond_flatten_reg_644 == ap_const_lv1_0) & (in_channels_ch2_empty_n == ap_const_logic_0)) | ((exitcond_flatten_reg_644 == ap_const_lv1_0) & (in_channels_ch3_empty_n == ap_const_logic_0)));
end

/// ap_sig_bdd_23 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_23 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_496 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_496 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_90 assign process. ///
always @ (ap_start or ap_done_reg or in_width_empty_n or in_height_empty_n)
begin
    ap_sig_bdd_90 = ((in_width_empty_n == ap_const_logic_0) | (in_height_empty_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign bound_fu_248_p0 = bound_fu_248_p00;
assign bound_fu_248_p00 = width_reg_626;
assign bound_fu_248_p1 = bound_fu_248_p10;
assign bound_fu_248_p10 = height_reg_632;
assign bound_fu_248_p2 = (bound_fu_248_p0 * bound_fu_248_p1);
assign exitcond_flatten_fu_254_p2 = (indvar_flatten_reg_208 == bound_reg_639? 1'b1: 1'b0);
assign exitcond_fu_265_p2 = (y_reg_230 == height_reg_632? 1'b1: 1'b0);
assign icmp1_fu_594_p2 = (tmp_4_reg_751 == ap_const_lv2_1? 1'b1: 1'b0);
assign icmp2_fu_481_p2 = ($signed(tmp_8_fu_471_p4) > $signed(3'b000)? 1'b1: 1'b0);
assign icmp_fu_505_p2 = (tmp_1_reg_710 == ap_const_lv2_1? 1'b1: 1'b0);
assign indvar_flatten_next_fu_259_p2 = (indvar_flatten_reg_208 + ap_const_lv32_1);
assign out_channels_ch1_address0 = tmp_10_fu_620_p1;
assign out_channels_ch1_d0 = R_reg_746;
assign out_channels_ch2_address0 = tmp_10_fu_620_p1;
assign out_channels_ch2_d0 = ((tmp_6_fu_607_p2)? p_phitmp2_fu_599_p3: phitmp2_reg_761);
assign out_channels_ch3_address0 = tmp_10_fu_620_p1;
assign out_channels_ch3_d0 = B_reg_766;
assign out_height = height_reg_632;
assign out_width = width_reg_626;
assign p_addr1_fu_329_p2 = (p_addr_fu_323_p2 + tmp_trn_cast_fu_298_p1);
assign p_addr_fu_323_p2 = (p_shl8_cast_fu_308_p1 + p_shl9_cast_fu_319_p1);
assign p_phitmp2_fu_599_p3 = ((icmp1_fu_594_p2)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_phitmp3_fu_576_p3 = ((icmp2_reg_730)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_phitmp_fu_510_p3 = ((icmp_fu_505_p2)? ap_const_lv8_FF: ap_const_lv8_0);
assign p_shl1_cast_fu_451_p1 = $signed(p_shl1_fu_444_p3);
assign p_shl1_fu_444_p3 = {{D_reg_690}, {ap_const_lv2_0}};
assign p_shl8_cast_fu_308_p1 = tmp_fu_301_p3;
assign p_shl9_cast_fu_319_p1 = tmp_7_fu_312_p3;
assign p_shl_cast_fu_440_p1 = $signed(p_shl_fu_433_p3);
assign p_shl_fu_433_p3 = {{D_reg_690}, {ap_const_lv9_0}};
assign tmp1_fu_428_p2 = ($signed(tmp_21_reg_703) + $signed(tmp_40_cast2_fu_424_p1));
assign tmp_10_fu_620_p1 = ap_reg_ppstg_p_addr1_reg_685_pp0_it4;
assign tmp_19_fu_358_p0 = C_fu_338_p2;
assign tmp_19_fu_358_p2 = ($signed(tmp_19_fu_358_p0) * $signed('h12A));
assign tmp_20_fu_376_p0 = E_reg_697;
assign tmp_20_fu_376_p2 = ($signed(tmp_20_fu_376_p0) * $signed('h199));
assign tmp_21_fu_364_p2 = ($signed(tmp_19_fu_358_p2) + $signed(ap_const_lv18_80));
assign tmp_22_fu_385_p2 = ($signed(tmp_20_fu_376_p2) + $signed(tmp_21_reg_703));
assign tmp_23_fu_533_p0 = ap_reg_ppstg_D_reg_690_pp0_it3;
assign tmp_23_fu_533_p2 = ($signed(tmp_23_fu_533_p0) * $signed(-'h64));
assign tmp_24_fu_418_p0 = E_reg_697;
assign tmp_24_fu_418_p2 = ($signed(tmp_24_fu_418_p0) * $signed(-'hD0));
assign tmp_25_fu_543_p2 = ($signed(tmp1_reg_725) + $signed(tmp_39_cast_fu_539_p1));
assign tmp_26_fu_455_p2 = ($signed(p_shl_cast_fu_440_p1) + $signed(p_shl1_cast_fu_451_p1));
assign tmp_27_fu_465_p2 = ($signed(tmp_62_cast_fu_461_p1) + $signed(tmp_47_cast_fu_382_p1));
assign tmp_39_cast_fu_539_p1 = tmp_23_fu_533_p2;
assign tmp_3_fu_518_p2 = (icmp_fu_505_p2 | tmp_2_reg_715);
assign tmp_40_cast2_fu_424_p1 = tmp_24_fu_418_p2;
assign tmp_40_cast_fu_335_p1 = Y_reg_670;
assign tmp_47_cast_fu_382_p1 = tmp_21_reg_703;
assign tmp_62_cast_fu_461_p1 = tmp_26_fu_455_p2;
assign tmp_6_fu_607_p2 = (icmp1_fu_594_p2 | tmp_5_reg_756);
assign tmp_7_fu_312_p3 = {{x_mid2_reg_658}, {ap_const_lv8_0}};
assign tmp_8_fu_471_p4 = {{tmp_27_fu_465_p2[ap_const_lv32_12 : ap_const_lv32_10]}};
assign tmp_9_fu_583_p2 = (icmp2_reg_730 | tmp_11_reg_736);
assign tmp_fu_301_p3 = {{x_mid2_reg_658}, {ap_const_lv10_0}};
assign tmp_trn_cast_fu_298_p1 = y_mid2_reg_653;
assign x_mid2_fu_284_p3 = ((exitcond_fu_265_p2)? x_s_fu_278_p2: x_phi_fu_223_p4);
assign x_s_fu_278_p2 = (x_phi_fu_223_p4 + ap_const_lv16_1);
assign y_2_fu_292_p2 = (y_mid2_fu_270_p3 + ap_const_lv16_1);
assign y_mid2_fu_270_p3 = ((exitcond_fu_265_p2)? ap_const_lv16_0: y_reg_230);
always @ (posedge ap_clk)
begin
    tmp_21_reg_703[0] <= 1'b0;
    tmp1_reg_725[0] <= 1'b0;
end



endmodule //yuv_filter_yuv2rgb

