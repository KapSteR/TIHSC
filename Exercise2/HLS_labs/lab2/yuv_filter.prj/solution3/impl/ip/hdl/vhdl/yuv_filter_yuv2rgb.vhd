-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_empty_n : IN STD_LOGIC;
    in_channels_ch1_read : OUT STD_LOGIC;
    in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_empty_n : IN STD_LOGIC;
    in_channels_ch2_read : OUT STD_LOGIC;
    in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_empty_n : IN STD_LOGIC;
    in_channels_ch3_read : OUT STD_LOGIC;
    in_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_width_empty_n : IN STD_LOGIC;
    in_width_read : OUT STD_LOGIC;
    in_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_empty_n : IN STD_LOGIC;
    in_height_read : OUT STD_LOGIC;
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_width : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_ap_vld : OUT STD_LOGIC;
    out_height : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_ap_vld : OUT STD_LOGIC );
end;


architecture behav of yuv_filter_yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st9_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal indvar_flatten_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_219 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_230 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_reg_626 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_bdd_90 : BOOLEAN;
    signal height_reg_632 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal exitcond_flatten_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_125 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_fu_270_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_653 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_fu_284_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_reg_658 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_2_fu_292_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Y_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_329_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr1_reg_685 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_reg_ppstg_p_addr1_reg_685_pp0_it2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_reg_ppstg_p_addr1_reg_685_pp0_it3 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_reg_ppstg_p_addr1_reg_685_pp0_it4 : STD_LOGIC_VECTOR (26 downto 0);
    signal D_fu_344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_D_reg_690_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_364_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_reg_703 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_710 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_reg_720 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_428_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_reg_725 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp3_reg_741 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_fu_523_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_751 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_587_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_phi_fu_223_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_248_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_248_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_301_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_7_fu_312_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl8_cast_fu_308_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl9_cast_fu_319_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr_fu_323_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_trn_cast_fu_298_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_40_cast_fu_335_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C_fu_338_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_358_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_358_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_fu_376_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_376_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_22_fu_385_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_fu_418_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_418_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_40_cast2_fu_424_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_433_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_444_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_440_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_451_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_26_fu_455_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_62_cast_fu_461_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_47_cast_fu_382_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_27_fu_465_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_8_fu_471_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp_fu_510_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_533_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_533_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_cast_fu_539_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_fu_543_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_576_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp1_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp2_fu_599_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_496 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal bound_fu_248_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_248_p10 : STD_LOGIC_VECTOR (31 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond_flatten_fu_254_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond_flatten_fu_254_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond_flatten_fu_254_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar_flatten_reg_208 assign process. --
    indvar_flatten_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond_flatten_fu_254_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_208 <= indvar_flatten_next_fu_259_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                indvar_flatten_reg_208 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- x_reg_219 assign process. --
    x_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_644 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                x_reg_219 <= x_mid2_reg_658;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                x_reg_219 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- y_reg_230 assign process. --
    y_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond_flatten_fu_254_p2 = ap_const_lv1_0))) then 
                y_reg_230 <= y_2_fu_292_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                y_reg_230 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it3))) then
                B_reg_766 <= B_fu_587_p3;
                R_reg_746 <= R_fu_523_p3;
                phitmp2_reg_761 <= tmp_25_fu_543_p2(15 downto 8);
                tmp_4_reg_751 <= tmp_25_fu_543_p2(17 downto 16);
                tmp_5_reg_756 <= tmp_25_fu_543_p2(17 downto 17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it1))) then
                D_reg_690 <= D_fu_344_p2;
                E_reg_697 <= E_fu_349_p2;
                tmp_21_reg_703(1) <= tmp_21_fu_364_p2(1);
    tmp_21_reg_703(2) <= tmp_21_fu_364_p2(2);
    tmp_21_reg_703(3) <= tmp_21_fu_364_p2(3);
    tmp_21_reg_703(4) <= tmp_21_fu_364_p2(4);
    tmp_21_reg_703(5) <= tmp_21_fu_364_p2(5);
    tmp_21_reg_703(6) <= tmp_21_fu_364_p2(6);
    tmp_21_reg_703(7) <= tmp_21_fu_364_p2(7);
    tmp_21_reg_703(8) <= tmp_21_fu_364_p2(8);
    tmp_21_reg_703(9) <= tmp_21_fu_364_p2(9);
    tmp_21_reg_703(10) <= tmp_21_fu_364_p2(10);
    tmp_21_reg_703(11) <= tmp_21_fu_364_p2(11);
    tmp_21_reg_703(12) <= tmp_21_fu_364_p2(12);
    tmp_21_reg_703(13) <= tmp_21_fu_364_p2(13);
    tmp_21_reg_703(14) <= tmp_21_fu_364_p2(14);
    tmp_21_reg_703(15) <= tmp_21_fu_364_p2(15);
    tmp_21_reg_703(16) <= tmp_21_fu_364_p2(16);
    tmp_21_reg_703(17) <= tmp_21_fu_364_p2(17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_644 = ap_const_lv1_0) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                U_reg_675 <= in_channels_ch2_dout;
                V_reg_680 <= in_channels_ch3_dout;
                Y_reg_670 <= in_channels_ch1_dout;
                p_addr1_reg_685 <= p_addr1_fu_329_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                ap_reg_ppstg_D_reg_690_pp0_it3 <= D_reg_690;
                ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it3;
                ap_reg_ppstg_p_addr1_reg_685_pp0_it2 <= p_addr1_reg_685;
                ap_reg_ppstg_p_addr1_reg_685_pp0_it3 <= ap_reg_ppstg_p_addr1_reg_685_pp0_it2;
                ap_reg_ppstg_p_addr1_reg_685_pp0_it4 <= ap_reg_ppstg_p_addr1_reg_685_pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it1 <= exitcond_flatten_reg_644;
                exitcond_flatten_reg_644 <= exitcond_flatten_fu_254_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                bound_reg_639 <= bound_fu_248_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_90))) then
                height_reg_632 <= in_height_dout;
                width_reg_626 <= in_width_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it2))) then
                icmp2_reg_730 <= icmp2_fu_481_p2;
                phitmp3_reg_741 <= tmp_27_fu_465_p2(15 downto 8);
                phitmp_reg_720 <= tmp_22_fu_385_p2(15 downto 8);
                tmp1_reg_725(1) <= tmp1_fu_428_p2(1);
    tmp1_reg_725(2) <= tmp1_fu_428_p2(2);
    tmp1_reg_725(3) <= tmp1_fu_428_p2(3);
    tmp1_reg_725(4) <= tmp1_fu_428_p2(4);
    tmp1_reg_725(5) <= tmp1_fu_428_p2(5);
    tmp1_reg_725(6) <= tmp1_fu_428_p2(6);
    tmp1_reg_725(7) <= tmp1_fu_428_p2(7);
    tmp1_reg_725(8) <= tmp1_fu_428_p2(8);
    tmp1_reg_725(9) <= tmp1_fu_428_p2(9);
    tmp1_reg_725(10) <= tmp1_fu_428_p2(10);
    tmp1_reg_725(11) <= tmp1_fu_428_p2(11);
    tmp1_reg_725(12) <= tmp1_fu_428_p2(12);
    tmp1_reg_725(13) <= tmp1_fu_428_p2(13);
    tmp1_reg_725(14) <= tmp1_fu_428_p2(14);
    tmp1_reg_725(15) <= tmp1_fu_428_p2(15);
    tmp1_reg_725(16) <= tmp1_fu_428_p2(16);
    tmp1_reg_725(17) <= tmp1_fu_428_p2(17);
                tmp_11_reg_736 <= tmp_27_fu_465_p2(18 downto 18);
                tmp_1_reg_710 <= tmp_22_fu_385_p2(17 downto 16);
                tmp_2_reg_715 <= tmp_22_fu_385_p2(17 downto 17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond_flatten_fu_254_p2 = ap_const_lv1_0))) then
                x_mid2_reg_658 <= x_mid2_fu_284_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond_flatten_fu_254_p2 = ap_const_lv1_0))) then
                y_mid2_reg_653 <= y_mid2_fu_270_p3;
            end if;
        end if;
    end process;
    tmp_21_reg_703(0) <= '0';
    tmp1_reg_725(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_90, exitcond_flatten_fu_254_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_125, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_90)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond_flatten_fu_254_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond_flatten_fu_254_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st9_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    B_fu_587_p3 <= 
        p_phitmp3_fu_576_p3 when (tmp_9_fu_583_p2(0) = '1') else 
        phitmp3_reg_741;
    C_fu_338_p2 <= std_logic_vector(unsigned(tmp_40_cast_fu_335_p1) + unsigned(ap_const_lv9_1F0));
    D_fu_344_p2 <= (U_reg_675 xor ap_const_lv8_80);
    E_fu_349_p2 <= (V_reg_680 xor ap_const_lv8_80);
    R_fu_523_p3 <= 
        p_phitmp_fu_510_p3 when (tmp_3_fu_518_p2(0) = '1') else 
        phitmp_reg_720;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st9_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, exitcond_flatten_reg_644)
    begin
                ap_sig_bdd_125 <= (((in_channels_ch1_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_644 = ap_const_lv1_0)) or ((exitcond_flatten_reg_644 = ap_const_lv1_0) and (in_channels_ch2_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_644 = ap_const_lv1_0) and (in_channels_ch3_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_496 assign process. --
    ap_sig_bdd_496_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_496 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(ap_start, ap_done_reg, in_width_empty_n, in_height_empty_n)
    begin
                ap_sig_bdd_90 <= ((in_width_empty_n = ap_const_logic_0) or (in_height_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_3 assign process. --
    ap_sig_cseq_ST_st9_fsm_3_assign_proc : process(ap_sig_bdd_496)
    begin
        if (ap_sig_bdd_496) then 
            ap_sig_cseq_ST_st9_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_248_p0 <= bound_fu_248_p00(16 - 1 downto 0);
    bound_fu_248_p00 <= std_logic_vector(resize(unsigned(width_reg_626),32));
    bound_fu_248_p1 <= bound_fu_248_p10(16 - 1 downto 0);
    bound_fu_248_p10 <= std_logic_vector(resize(unsigned(height_reg_632),32));
    bound_fu_248_p2 <= std_logic_vector(resize(unsigned(bound_fu_248_p0) * unsigned(bound_fu_248_p1), 32));
    exitcond_flatten_fu_254_p2 <= "1" when (indvar_flatten_reg_208 = bound_reg_639) else "0";
    exitcond_fu_265_p2 <= "1" when (y_reg_230 = height_reg_632) else "0";
    icmp1_fu_594_p2 <= "1" when (tmp_4_reg_751 = ap_const_lv2_1) else "0";
    icmp2_fu_481_p2 <= "1" when (signed(tmp_8_fu_471_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_fu_505_p2 <= "1" when (tmp_1_reg_710 = ap_const_lv2_1) else "0";

    -- in_channels_ch1_read assign process. --
    in_channels_ch1_read_assign_proc : process(exitcond_flatten_reg_644, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_125, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_644 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            in_channels_ch1_read <= ap_const_logic_1;
        else 
            in_channels_ch1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- in_channels_ch2_read assign process. --
    in_channels_ch2_read_assign_proc : process(exitcond_flatten_reg_644, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_125, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_644 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            in_channels_ch2_read <= ap_const_logic_1;
        else 
            in_channels_ch2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- in_channels_ch3_read assign process. --
    in_channels_ch3_read_assign_proc : process(exitcond_flatten_reg_644, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_125, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_644 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            in_channels_ch3_read <= ap_const_logic_1;
        else 
            in_channels_ch3_read <= ap_const_logic_0;
        end if; 
    end process;


    -- in_height_read assign process. --
    in_height_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_90)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_90))) then 
            in_height_read <= ap_const_logic_1;
        else 
            in_height_read <= ap_const_logic_0;
        end if; 
    end process;


    -- in_width_read assign process. --
    in_width_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_90)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_90))) then 
            in_width_read <= ap_const_logic_1;
        else 
            in_width_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_259_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_208) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= tmp_10_fu_620_p1(22 - 1 downto 0);

    -- out_channels_ch1_ce0 assign process. --
    out_channels_ch1_ce0_assign_proc : process(ap_sig_bdd_125, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= R_reg_746;

    -- out_channels_ch1_we0 assign process. --
    out_channels_ch1_we0_assign_proc : process(ap_sig_bdd_125, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= tmp_10_fu_620_p1(22 - 1 downto 0);

    -- out_channels_ch2_ce0 assign process. --
    out_channels_ch2_ce0_assign_proc : process(ap_sig_bdd_125, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= 
        p_phitmp2_fu_599_p3 when (tmp_6_fu_607_p2(0) = '1') else 
        phitmp2_reg_761;

    -- out_channels_ch2_we0 assign process. --
    out_channels_ch2_we0_assign_proc : process(ap_sig_bdd_125, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= tmp_10_fu_620_p1(22 - 1 downto 0);

    -- out_channels_ch3_ce0 assign process. --
    out_channels_ch3_ce0_assign_proc : process(ap_sig_bdd_125, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_766;

    -- out_channels_ch3_we0 assign process. --
    out_channels_ch3_we0_assign_proc : process(ap_sig_bdd_125, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_125 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_644_pp0_it4)))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_height <= height_reg_632;

    -- out_height_ap_vld assign process. --
    out_height_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            out_height_ap_vld <= ap_const_logic_1;
        else 
            out_height_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_width <= width_reg_626;

    -- out_width_ap_vld assign process. --
    out_width_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            out_width_ap_vld <= ap_const_logic_1;
        else 
            out_width_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_329_p2 <= std_logic_vector(unsigned(p_addr_fu_323_p2) + unsigned(tmp_trn_cast_fu_298_p1));
    p_addr_fu_323_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_308_p1) + unsigned(p_shl9_cast_fu_319_p1));
    p_phitmp2_fu_599_p3 <= 
        ap_const_lv8_FF when (icmp1_fu_594_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp3_fu_576_p3 <= 
        ap_const_lv8_FF when (icmp2_reg_730(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp_fu_510_p3 <= 
        ap_const_lv8_FF when (icmp_fu_505_p2(0) = '1') else 
        ap_const_lv8_0;
        p_shl1_cast_fu_451_p1 <= std_logic_vector(resize(signed(p_shl1_fu_444_p3),18));

    p_shl1_fu_444_p3 <= (D_reg_690 & ap_const_lv2_0);
    p_shl8_cast_fu_308_p1 <= std_logic_vector(resize(unsigned(tmp_fu_301_p3),27));
    p_shl9_cast_fu_319_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_312_p3),27));
        p_shl_cast_fu_440_p1 <= std_logic_vector(resize(signed(p_shl_fu_433_p3),18));

    p_shl_fu_433_p3 <= (D_reg_690 & ap_const_lv9_0);
    tmp1_fu_428_p2 <= std_logic_vector(signed(tmp_21_reg_703) + signed(tmp_40_cast2_fu_424_p1));
    tmp_10_fu_620_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_p_addr1_reg_685_pp0_it4),64));
    tmp_19_fu_358_p0 <= C_fu_338_p2;
    tmp_19_fu_358_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_19_fu_358_p0) * signed('0' &ap_const_lv18_12A))), 18));
    tmp_20_fu_376_p0 <= E_reg_697;
    tmp_20_fu_376_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_20_fu_376_p0) * signed('0' &ap_const_lv18_199))), 18));
    tmp_21_fu_364_p2 <= std_logic_vector(signed(tmp_19_fu_358_p2) + signed(ap_const_lv18_80));
    tmp_22_fu_385_p2 <= std_logic_vector(signed(tmp_20_fu_376_p2) + signed(tmp_21_reg_703));
    tmp_23_fu_533_p0 <= ap_reg_ppstg_D_reg_690_pp0_it3;
    tmp_23_fu_533_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_23_fu_533_p0) * signed(ap_const_lv16_FF9C))), 16));
    tmp_24_fu_418_p0 <= E_reg_697;
    tmp_24_fu_418_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_24_fu_418_p0) * signed(ap_const_lv17_1FF30))), 17));
    tmp_25_fu_543_p2 <= std_logic_vector(signed(tmp1_reg_725) + signed(tmp_39_cast_fu_539_p1));
    tmp_26_fu_455_p2 <= std_logic_vector(signed(p_shl_cast_fu_440_p1) + signed(p_shl1_cast_fu_451_p1));
    tmp_27_fu_465_p2 <= std_logic_vector(signed(tmp_62_cast_fu_461_p1) + signed(tmp_47_cast_fu_382_p1));
        tmp_39_cast_fu_539_p1 <= std_logic_vector(resize(signed(tmp_23_fu_533_p2),18));

    tmp_3_fu_518_p2 <= (icmp_fu_505_p2 or tmp_2_reg_715);
        tmp_40_cast2_fu_424_p1 <= std_logic_vector(resize(signed(tmp_24_fu_418_p2),18));

    tmp_40_cast_fu_335_p1 <= std_logic_vector(resize(unsigned(Y_reg_670),9));
        tmp_47_cast_fu_382_p1 <= std_logic_vector(resize(signed(tmp_21_reg_703),19));

        tmp_62_cast_fu_461_p1 <= std_logic_vector(resize(signed(tmp_26_fu_455_p2),19));

    tmp_6_fu_607_p2 <= (icmp1_fu_594_p2 or tmp_5_reg_756);
    tmp_7_fu_312_p3 <= (x_mid2_reg_658 & ap_const_lv8_0);
    tmp_8_fu_471_p4 <= tmp_27_fu_465_p2(18 downto 16);
    tmp_9_fu_583_p2 <= (icmp2_reg_730 or tmp_11_reg_736);
    tmp_fu_301_p3 <= (x_mid2_reg_658 & ap_const_lv10_0);
    tmp_trn_cast_fu_298_p1 <= std_logic_vector(resize(unsigned(y_mid2_reg_653),27));
    x_mid2_fu_284_p3 <= 
        x_s_fu_278_p2 when (exitcond_fu_265_p2(0) = '1') else 
        x_phi_fu_223_p4;

    -- x_phi_fu_223_p4 assign process. --
    x_phi_fu_223_p4_assign_proc : process(x_reg_219, exitcond_flatten_reg_644, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, x_mid2_reg_658)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_644 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            x_phi_fu_223_p4 <= x_mid2_reg_658;
        else 
            x_phi_fu_223_p4 <= x_reg_219;
        end if; 
    end process;

    x_s_fu_278_p2 <= std_logic_vector(unsigned(x_phi_fu_223_p4) + unsigned(ap_const_lv16_1));
    y_2_fu_292_p2 <= std_logic_vector(unsigned(y_mid2_fu_270_p3) + unsigned(ap_const_lv16_1));
    y_mid2_fu_270_p3 <= 
        ap_const_lv16_0 when (exitcond_fu_265_p2(0) = '1') else 
        y_reg_230;
end behav;
