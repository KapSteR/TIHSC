-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_rgb2yuv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_full_n : IN STD_LOGIC;
    out_channels_ch1_write : OUT STD_LOGIC;
    out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_full_n : IN STD_LOGIC;
    out_channels_ch2_write : OUT STD_LOGIC;
    out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_full_n : IN STD_LOGIC;
    out_channels_ch3_write : OUT STD_LOGIC;
    out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_full_n : IN STD_LOGIC;
    out_width_write : OUT STD_LOGIC;
    out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_full_n : IN STD_LOGIC;
    out_height_write : OUT STD_LOGIC );
end;


architecture behav of yuv_filter_rgb2yuv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st8_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_80 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal indvar_flatten_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_227 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_bdd_84 : BOOLEAN;
    signal bound_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_96 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_119 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_mid2_fu_269_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_mid2_reg_626 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_fu_283_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_mid2_reg_631 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_fu_291_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal R_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_G_reg_665_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_672 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_B_reg_672_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_B_reg_672_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_388_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_reg_680 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_cast_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_cast_reg_685 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_fu_410_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_reg_690 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_ppstg_p_shl3_reg_690_pp0_it4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_cast_fu_427_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_cast_reg_695 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_458_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_reg_700 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_23_cast_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_cast_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_710 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_715 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_720 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_phi_fu_220_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_247_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_247_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_300_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_2_fu_311_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl_cast_fu_307_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl7_cast_fu_318_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr_fu_322_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_trn_cast_fu_297_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_addr1_fu_328_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl5_fu_344_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_fu_355_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_372_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_cast_fu_362_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_384_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_351_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_fu_372_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_cast1_cast_fu_366_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_394_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_404_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast1_fu_341_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_fu_404_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_fu_421_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_fu_431_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast7_fu_417_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_fu_437_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_447_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_cast_fu_443_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_454_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_fu_431_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_16_fu_464_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_fu_477_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_cast_fu_484_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_cast_fu_488_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_491_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_497_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_1_fu_497_p2 : signal is "no";
    signal tmp_7_fu_512_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast1_fu_474_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_512_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_523_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_cast_fu_529_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_532_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp5_fu_532_p2 : signal is "no";
    signal tmp_14_fu_523_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_537_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_fu_559_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_566_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_579_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_11_fu_579_p2 : signal is "no";
    signal tmp_12_fu_584_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_460 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal bound_fu_247_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_247_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_372_p00 : STD_LOGIC_VECTOR (12 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((exitcond_flatten_fu_253_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_253_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((exitcond_flatten_fu_253_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar_flatten_reg_205 assign process. --
    indvar_flatten_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_253_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_205 <= indvar_flatten_next_fu_258_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84))) then 
                indvar_flatten_reg_205 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- x_reg_216 assign process. --
    x_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_reg_617 = ap_const_lv1_0))) then 
                x_reg_216 <= x_mid2_reg_631;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84))) then 
                x_reg_216 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- y_reg_227 assign process. --
    y_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_253_p2 = ap_const_lv1_0))) then 
                y_reg_227 <= y_1_fu_291_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84))) then 
                y_reg_227 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it1))) then
                B_reg_672 <= in_channels_ch3_q0;
                G_reg_665 <= in_channels_ch2_q0;
                R_reg_658 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then
                ap_reg_ppstg_B_reg_672_pp0_it3 <= B_reg_672;
                ap_reg_ppstg_B_reg_672_pp0_it4 <= ap_reg_ppstg_B_reg_672_pp0_it3;
                ap_reg_ppstg_G_reg_665_pp0_it3 <= G_reg_665;
                ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it3;
                ap_reg_ppstg_p_shl3_reg_690_pp0_it4(4) <= p_shl3_reg_690(4);
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4(5) <= p_shl3_reg_690(5);
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4(6) <= p_shl3_reg_690(6);
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4(7) <= p_shl3_reg_690(7);
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4(8) <= p_shl3_reg_690(8);
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4(9) <= p_shl3_reg_690(9);
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4(10) <= p_shl3_reg_690(10);
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4(11) <= p_shl3_reg_690(11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then
                ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it1 <= exitcond_flatten_reg_617;
                exitcond_flatten_reg_617 <= exitcond_flatten_fu_253_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84))) then
                bound_reg_612 <= bound_fu_247_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it2))) then
                p_shl3_reg_690(4) <= p_shl3_fu_410_p3(4);
    p_shl3_reg_690(5) <= p_shl3_fu_410_p3(5);
    p_shl3_reg_690(6) <= p_shl3_fu_410_p3(6);
    p_shl3_reg_690(7) <= p_shl3_fu_410_p3(7);
    p_shl3_reg_690(8) <= p_shl3_fu_410_p3(8);
    p_shl3_reg_690(9) <= p_shl3_fu_410_p3(9);
    p_shl3_reg_690(10) <= p_shl3_fu_410_p3(10);
    p_shl3_reg_690(11) <= p_shl3_fu_410_p3(11);
                tmp3_cast_reg_685(0) <= tmp3_cast_fu_400_p1(0);
    tmp3_cast_reg_685(1) <= tmp3_cast_fu_400_p1(1);
    tmp3_cast_reg_685(2) <= tmp3_cast_fu_400_p1(2);
    tmp3_cast_reg_685(3) <= tmp3_cast_fu_400_p1(3);
    tmp3_cast_reg_685(4) <= tmp3_cast_fu_400_p1(4);
    tmp3_cast_reg_685(5) <= tmp3_cast_fu_400_p1(5);
    tmp3_cast_reg_685(6) <= tmp3_cast_fu_400_p1(6);
    tmp3_cast_reg_685(7) <= tmp3_cast_fu_400_p1(7);
    tmp3_cast_reg_685(8) <= tmp3_cast_fu_400_p1(8);
    tmp3_cast_reg_685(9) <= tmp3_cast_fu_400_p1(9);
    tmp3_cast_reg_685(10) <= tmp3_cast_fu_400_p1(10);
    tmp3_cast_reg_685(11) <= tmp3_cast_fu_400_p1(11);
    tmp3_cast_reg_685(12) <= tmp3_cast_fu_400_p1(12);
                tmp_15_cast_reg_695(1) <= tmp_15_cast_fu_427_p1(1);
    tmp_15_cast_reg_695(2) <= tmp_15_cast_fu_427_p1(2);
    tmp_15_cast_reg_695(3) <= tmp_15_cast_fu_427_p1(3);
    tmp_15_cast_reg_695(4) <= tmp_15_cast_fu_427_p1(4);
    tmp_15_cast_reg_695(5) <= tmp_15_cast_fu_427_p1(5);
    tmp_15_cast_reg_695(6) <= tmp_15_cast_fu_427_p1(6);
    tmp_15_cast_reg_695(7) <= tmp_15_cast_fu_427_p1(7);
    tmp_15_cast_reg_695(8) <= tmp_15_cast_fu_427_p1(8);
    tmp_15_cast_reg_695(9) <= tmp_15_cast_fu_427_p1(9);
    tmp_15_cast_reg_695(10) <= tmp_15_cast_fu_427_p1(10);
    tmp_15_cast_reg_695(11) <= tmp_15_cast_fu_427_p1(11);
    tmp_15_cast_reg_695(12) <= tmp_15_cast_fu_427_p1(12);
    tmp_15_cast_reg_695(13) <= tmp_15_cast_fu_427_p1(13);
    tmp_15_cast_reg_695(14) <= tmp_15_cast_fu_427_p1(14);
    tmp_15_cast_reg_695(15) <= tmp_15_cast_fu_427_p1(15);
                tmp_15_reg_700(1) <= tmp_15_fu_458_p2(1);
    tmp_15_reg_700(2) <= tmp_15_fu_458_p2(2);
    tmp_15_reg_700(3) <= tmp_15_fu_458_p2(3);
    tmp_15_reg_700(4) <= tmp_15_fu_458_p2(4);
    tmp_15_reg_700(5) <= tmp_15_fu_458_p2(5);
    tmp_15_reg_700(6) <= tmp_15_fu_458_p2(6);
    tmp_15_reg_700(7) <= tmp_15_fu_458_p2(7);
    tmp_15_reg_700(8) <= tmp_15_fu_458_p2(8);
    tmp_15_reg_700(9) <= tmp_15_fu_458_p2(9);
    tmp_15_reg_700(10) <= tmp_15_fu_458_p2(10);
    tmp_15_reg_700(11) <= tmp_15_fu_458_p2(11);
    tmp_15_reg_700(12) <= tmp_15_fu_458_p2(12);
    tmp_15_reg_700(13) <= tmp_15_fu_458_p2(13);
                tmp_23_cast_reg_705(1) <= tmp_23_cast_fu_470_p1(1);
    tmp_23_cast_reg_705(2) <= tmp_23_cast_fu_470_p1(2);
    tmp_23_cast_reg_705(3) <= tmp_23_cast_fu_470_p1(3);
    tmp_23_cast_reg_705(4) <= tmp_23_cast_fu_470_p1(4);
    tmp_23_cast_reg_705(5) <= tmp_23_cast_fu_470_p1(5);
    tmp_23_cast_reg_705(6) <= tmp_23_cast_fu_470_p1(6);
    tmp_23_cast_reg_705(7) <= tmp_23_cast_fu_470_p1(7);
    tmp_23_cast_reg_705(8) <= tmp_23_cast_fu_470_p1(8);
    tmp_23_cast_reg_705(9) <= tmp_23_cast_fu_470_p1(9);
    tmp_23_cast_reg_705(10) <= tmp_23_cast_fu_470_p1(10);
    tmp_23_cast_reg_705(11) <= tmp_23_cast_fu_470_p1(11);
    tmp_23_cast_reg_705(12) <= tmp_23_cast_fu_470_p1(12);
    tmp_23_cast_reg_705(13) <= tmp_23_cast_fu_470_p1(13);
    tmp_23_cast_reg_705(14) <= tmp_23_cast_fu_470_p1(14);
                tmp_9_reg_680(1) <= tmp_9_fu_388_p2(1);
    tmp_9_reg_680(2) <= tmp_9_fu_388_p2(2);
    tmp_9_reg_680(3) <= tmp_9_fu_388_p2(3);
    tmp_9_reg_680(4) <= tmp_9_fu_388_p2(4);
    tmp_9_reg_680(5) <= tmp_9_fu_388_p2(5);
    tmp_9_reg_680(6) <= tmp_9_fu_388_p2(6);
    tmp_9_reg_680(7) <= tmp_9_fu_388_p2(7);
    tmp_9_reg_680(8) <= tmp_9_fu_388_p2(8);
    tmp_9_reg_680(9) <= tmp_9_fu_388_p2(9);
    tmp_9_reg_680(10) <= tmp_9_fu_388_p2(10);
    tmp_9_reg_680(11) <= tmp_9_fu_388_p2(11);
    tmp_9_reg_680(12) <= tmp_9_fu_388_p2(12);
    tmp_9_reg_680(13) <= tmp_9_fu_388_p2(13);
    tmp_9_reg_680(14) <= tmp_9_fu_388_p2(14);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it3))) then
                tmp4_reg_715(1) <= tmp4_fu_518_p2(1);
    tmp4_reg_715(2) <= tmp4_fu_518_p2(2);
    tmp4_reg_715(3) <= tmp4_fu_518_p2(3);
    tmp4_reg_715(4) <= tmp4_fu_518_p2(4);
    tmp4_reg_715(5) <= tmp4_fu_518_p2(5);
    tmp4_reg_715(6) <= tmp4_fu_518_p2(6);
    tmp4_reg_715(7) <= tmp4_fu_518_p2(7);
    tmp4_reg_715(8) <= tmp4_fu_518_p2(8);
    tmp4_reg_715(9) <= tmp4_fu_518_p2(9);
    tmp4_reg_715(10) <= tmp4_fu_518_p2(10);
    tmp4_reg_715(11) <= tmp4_fu_518_p2(11);
    tmp4_reg_715(12) <= tmp4_fu_518_p2(12);
    tmp4_reg_715(13) <= tmp4_fu_518_p2(13);
    tmp4_reg_715(14) <= tmp4_fu_518_p2(14);
    tmp4_reg_715(15) <= tmp4_fu_518_p2(15);
                tmp_18_reg_720 <= tmp_17_fu_537_p2(15 downto 8);
                tmp_5_reg_710 <= tmp_1_fu_497_p2(15 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_253_p2 = ap_const_lv1_0))) then
                x_mid2_reg_631 <= x_mid2_fu_283_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and (exitcond_flatten_fu_253_p2 = ap_const_lv1_0))) then
                y_mid2_reg_626 <= y_mid2_fu_269_p3;
            end if;
        end if;
    end process;
    tmp_9_reg_680(0) <= '0';
    tmp3_cast_reg_685(15 downto 13) <= "000";
    p_shl3_reg_690(3 downto 0) <= "0000";
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4(3 downto 0) <= "0000";
    tmp_15_cast_reg_695(0) <= '0';
    tmp_15_reg_700(0) <= '0';
    tmp_23_cast_reg_705(0) <= '0';
    tmp_23_cast_reg_705(15) <= '0';
    tmp4_reg_715(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_84, exitcond_flatten_fu_253_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it4, ap_sig_bdd_119, ap_reg_ppiten_pp0_it5)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_84)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((exitcond_flatten_fu_253_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) and not((exitcond_flatten_fu_253_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st8_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st8_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st8_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4)
    begin
                ap_sig_bdd_119 <= (((out_channels_ch1_full_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 = ap_const_lv1_0)) or ((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 = ap_const_lv1_0) and (out_channels_ch2_full_n = ap_const_logic_0)) or ((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 = ap_const_lv1_0) and (out_channels_ch3_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_460 assign process. --
    ap_sig_bdd_460_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_460 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_start, ap_done_reg, out_width_full_n, out_height_full_n)
    begin
                ap_sig_bdd_84 <= ((out_width_full_n = ap_const_logic_0) or (out_height_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_96 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_96)
    begin
        if (ap_sig_bdd_96) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_2 assign process. --
    ap_sig_cseq_ST_st8_fsm_2_assign_proc : process(ap_sig_bdd_460)
    begin
        if (ap_sig_bdd_460) then 
            ap_sig_cseq_ST_st8_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_247_p0 <= bound_fu_247_p00(16 - 1 downto 0);
    bound_fu_247_p00 <= std_logic_vector(resize(unsigned(in_width),32));
    bound_fu_247_p1 <= bound_fu_247_p10(16 - 1 downto 0);
    bound_fu_247_p10 <= std_logic_vector(resize(unsigned(in_height),32));
    bound_fu_247_p2 <= std_logic_vector(resize(unsigned(bound_fu_247_p0) * unsigned(bound_fu_247_p1), 32));
    exitcond_flatten_fu_253_p2 <= "1" when (indvar_flatten_reg_205 = bound_reg_612) else "0";
    exitcond_fu_264_p2 <= "1" when (y_reg_227 = in_height) else "0";
    in_channels_ch1_address0 <= tmp_4_fu_334_p1(22 - 1 downto 0);

    -- in_channels_ch1_ce0 assign process. --
    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_119, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_4_fu_334_p1(22 - 1 downto 0);

    -- in_channels_ch2_ce0 assign process. --
    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_119, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_4_fu_334_p1(22 - 1 downto 0);

    -- in_channels_ch3_ce0 assign process. --
    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_sig_bdd_119, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_258_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_205) + unsigned(ap_const_lv32_1));
    out_channels_ch1_din <= std_logic_vector(unsigned(tmp_5_reg_710) + unsigned(ap_const_lv8_10));

    -- out_channels_ch1_write assign process. --
    out_channels_ch1_write_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4, ap_sig_bdd_119, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
            out_channels_ch1_write <= ap_const_logic_1;
        else 
            out_channels_ch1_write <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_din <= (tmp_12_fu_584_p4 xor ap_const_lv8_80);

    -- out_channels_ch2_write assign process. --
    out_channels_ch2_write_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4, ap_sig_bdd_119, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
            out_channels_ch2_write <= ap_const_logic_1;
        else 
            out_channels_ch2_write <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_din <= (tmp_18_reg_720 xor ap_const_lv8_80);

    -- out_channels_ch3_write assign process. --
    out_channels_ch3_write_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4, ap_sig_bdd_119, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then 
            out_channels_ch3_write <= ap_const_logic_1;
        else 
            out_channels_ch3_write <= ap_const_logic_0;
        end if; 
    end process;

    out_height_din <= in_height;

    -- out_height_write assign process. --
    out_height_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_84)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84))) then 
            out_height_write <= ap_const_logic_1;
        else 
            out_height_write <= ap_const_logic_0;
        end if; 
    end process;

    out_width_din <= in_width;

    -- out_width_write assign process. --
    out_width_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_84)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_84))) then 
            out_width_write <= ap_const_logic_1;
        else 
            out_width_write <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_328_p2 <= std_logic_vector(unsigned(p_addr_fu_322_p2) + unsigned(tmp_2_trn_cast_fu_297_p1));
    p_addr_fu_322_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_307_p1) + unsigned(p_shl7_cast_fu_318_p1));
        p_neg_cast_fu_443_p1 <= std_logic_vector(resize(signed(p_neg_fu_437_p2),14));

    p_neg_fu_437_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_shl3_cast7_fu_417_p1));
    p_shl1_cast_fu_454_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_447_p3),14));
    p_shl1_fu_447_p3 <= (B_reg_672 & ap_const_lv1_0);
    p_shl2_cast_fu_566_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_559_p3),16));
    p_shl2_fu_559_p3 <= (ap_reg_ppstg_B_reg_672_pp0_it4 & ap_const_lv7_0);
    p_shl3_cast7_fu_417_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_410_p3),13));
    p_shl3_cast_fu_570_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_p_shl3_reg_690_pp0_it4),16));
    p_shl3_fu_410_p3 <= (B_reg_672 & ap_const_lv4_0);
    p_shl4_cast_fu_484_p1 <= std_logic_vector(resize(unsigned(p_shl4_fu_477_p3),16));
    p_shl4_fu_477_p3 <= (ap_reg_ppstg_G_reg_665_pp0_it3 & ap_const_lv7_0);
    p_shl5_cast_fu_351_p1 <= std_logic_vector(resize(unsigned(p_shl5_fu_344_p3),15));
    p_shl5_fu_344_p3 <= (R_reg_658 & ap_const_lv6_0);
    p_shl6_cast_cast_fu_362_p1 <= std_logic_vector(resize(unsigned(p_shl6_fu_355_p3),10));
    p_shl6_fu_355_p3 <= (R_reg_658 & ap_const_lv1_0);
    p_shl7_cast_fu_318_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_311_p3),27));
    p_shl_cast_fu_307_p1 <= std_logic_vector(resize(unsigned(tmp_fu_300_p3),27));
    tmp1_cast_fu_384_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_378_p2),15));
    tmp1_fu_378_p2 <= std_logic_vector(unsigned(p_shl6_cast_cast_fu_362_p1) + unsigned(ap_const_lv10_80));
    tmp2_fu_491_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_484_p1) + unsigned(tmp_9_cast_fu_488_p1));
    tmp3_cast_fu_400_p1 <= std_logic_vector(resize(unsigned(tmp3_fu_394_p2),16));
    tmp3_fu_394_p2 <= std_logic_vector(unsigned(tmp_8_fu_372_p2) + unsigned(tmp_5_cast1_cast_fu_366_p1));
    tmp4_fu_518_p2 <= std_logic_vector(unsigned(tmp_7_fu_512_p2) + unsigned(tmp_15_cast_reg_695));
    tmp5_fu_532_p2 <= std_logic_vector(unsigned(tmp_23_cast_reg_705) + unsigned(tmp_22_cast_fu_529_p1));
    tmp_10_fu_421_p2 <= std_logic_vector(unsigned(tmp_6_fu_404_p2) + unsigned(ap_const_lv15_80));
    tmp_11_fu_579_p2 <= std_logic_vector(signed(tmp4_reg_715) + signed(tmp_s_fu_573_p2));
    tmp_12_fu_584_p4 <= tmp_11_fu_579_p2(15 downto 8);
    tmp_13_fu_431_p0 <= tmp_3_cast1_fu_341_p1(8 - 1 downto 0);
    tmp_13_fu_431_p2 <= std_logic_vector(resize(unsigned(tmp_13_fu_431_p0) * unsigned(ap_const_lv15_7A), 15));
    tmp_14_fu_523_p0 <= tmp_5_cast1_fu_474_p1(8 - 1 downto 0);
    tmp_14_fu_523_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_14_fu_523_p0) * signed(ap_const_lv16_FFA2))), 16));
        tmp_15_cast_fu_427_p1 <= std_logic_vector(resize(signed(tmp_10_fu_421_p2),16));

    tmp_15_fu_458_p2 <= std_logic_vector(signed(p_neg_cast_fu_443_p1) - signed(p_shl1_cast_fu_454_p1));
    tmp_16_fu_464_p2 <= std_logic_vector(unsigned(tmp_13_fu_431_p2) + unsigned(ap_const_lv15_80));
    tmp_17_fu_537_p2 <= std_logic_vector(signed(tmp5_fu_532_p2) + signed(tmp_14_fu_523_p2));
    tmp_1_fu_497_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_685) + unsigned(tmp2_fu_491_p2));
        tmp_22_cast_fu_529_p1 <= std_logic_vector(resize(signed(tmp_15_reg_700),16));

    tmp_23_cast_fu_470_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_464_p2),16));
    tmp_2_fu_311_p3 <= (x_mid2_reg_631 & ap_const_lv8_0);
    tmp_2_trn_cast_fu_297_p1 <= std_logic_vector(resize(unsigned(y_mid2_reg_626),27));
    tmp_3_cast1_fu_341_p1 <= std_logic_vector(resize(unsigned(R_reg_658),15));
    tmp_4_fu_334_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_328_p2),64));
    tmp_5_cast1_cast_fu_366_p1 <= std_logic_vector(resize(unsigned(G_reg_665),13));
    tmp_5_cast1_fu_474_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_G_reg_665_pp0_it3),16));
    tmp_6_fu_404_p0 <= tmp_3_cast1_fu_341_p1(8 - 1 downto 0);
    tmp_6_fu_404_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_6_fu_404_p0) * signed(ap_const_lv15_7FDA))), 15));
    tmp_7_fu_512_p0 <= tmp_5_cast1_fu_474_p1(8 - 1 downto 0);
    tmp_7_fu_512_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_7_fu_512_p0) * signed(ap_const_lv16_FFB6))), 16));
    tmp_8_fu_372_p0 <= tmp_8_fu_372_p00(8 - 1 downto 0);
    tmp_8_fu_372_p00 <= std_logic_vector(resize(unsigned(B_reg_672),13));
    tmp_8_fu_372_p2 <= std_logic_vector(resize(unsigned(tmp_8_fu_372_p0) * unsigned(ap_const_lv13_19), 13));
    tmp_9_cast_fu_488_p1 <= std_logic_vector(resize(unsigned(tmp_9_reg_680),16));
    tmp_9_fu_388_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_384_p1) + unsigned(p_shl5_cast_fu_351_p1));
    tmp_fu_300_p3 <= (x_mid2_reg_631 & ap_const_lv10_0);
    tmp_s_fu_573_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_566_p1) - unsigned(p_shl3_cast_fu_570_p1));
    x_mid2_fu_283_p3 <= 
        x_s_fu_277_p2 when (exitcond_fu_264_p2(0) = '1') else 
        x_phi_fu_220_p4;

    -- x_phi_fu_220_p4 assign process. --
    x_phi_fu_220_p4_assign_proc : process(x_reg_216, exitcond_flatten_reg_617, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, x_mid2_reg_631)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_617 = ap_const_lv1_0))) then 
            x_phi_fu_220_p4 <= x_mid2_reg_631;
        else 
            x_phi_fu_220_p4 <= x_reg_216;
        end if; 
    end process;

    x_s_fu_277_p2 <= std_logic_vector(unsigned(x_phi_fu_220_p4) + unsigned(ap_const_lv16_1));
    y_1_fu_291_p2 <= std_logic_vector(unsigned(y_mid2_fu_269_p3) + unsigned(ap_const_lv16_1));
    y_mid2_fu_269_p3 <= 
        ap_const_lv16_0 when (exitcond_fu_264_p2(0) = '1') else 
        y_reg_227;
end behav;
