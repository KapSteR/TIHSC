// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_rgb2yuv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width,
        in_height,
        out_channels_ch1_din,
        out_channels_ch1_full_n,
        out_channels_ch1_write,
        out_channels_ch2_din,
        out_channels_ch2_full_n,
        out_channels_ch2_write,
        out_channels_ch3_din,
        out_channels_ch3_full_n,
        out_channels_ch3_write,
        out_width_din,
        out_width_full_n,
        out_width_write,
        out_height_din,
        out_height_full_n,
        out_height_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st8_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv13_19 = 13'b11001;
parameter    ap_const_lv10_80 = 10'b10000000;
parameter    ap_const_lv15_7FDA = 15'b111111111011010;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv15_80 = 15'b10000000;
parameter    ap_const_lv15_7A = 15'b1111010;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv16_FFB6 = 16'b1111111110110110;
parameter    ap_const_lv16_FFA2 = 16'b1111111110100010;
parameter    ap_const_lv8_10 = 8'b10000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width;
input  [15:0] in_height;
output  [7:0] out_channels_ch1_din;
input   out_channels_ch1_full_n;
output   out_channels_ch1_write;
output  [7:0] out_channels_ch2_din;
input   out_channels_ch2_full_n;
output   out_channels_ch2_write;
output  [7:0] out_channels_ch3_din;
input   out_channels_ch3_full_n;
output   out_channels_ch3_write;
output  [15:0] out_width_din;
input   out_width_full_n;
output   out_width_write;
output  [15:0] out_height_din;
input   out_height_full_n;
output   out_height_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_write;
reg out_channels_ch2_write;
reg out_channels_ch3_write;
reg out_width_write;
reg out_height_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg   [31:0] indvar_flatten_reg_205;
reg   [15:0] x_reg_216;
reg   [15:0] y_reg_227;
reg    ap_sig_bdd_84;
wire   [31:0] bound_fu_247_p2;
reg   [31:0] bound_reg_612;
wire   [0:0] exitcond_flatten_fu_253_p2;
reg   [0:0] exitcond_flatten_reg_617;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_96;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4;
reg    ap_sig_bdd_119;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it3;
wire   [31:0] indvar_flatten_next_fu_258_p2;
wire   [15:0] y_mid2_fu_269_p3;
reg   [15:0] y_mid2_reg_626;
wire   [15:0] x_mid2_fu_283_p3;
reg   [15:0] x_mid2_reg_631;
wire   [15:0] y_1_fu_291_p2;
reg   [7:0] R_reg_658;
reg   [7:0] G_reg_665;
reg   [7:0] ap_reg_ppstg_G_reg_665_pp0_it3;
reg   [7:0] B_reg_672;
reg   [7:0] ap_reg_ppstg_B_reg_672_pp0_it3;
reg   [7:0] ap_reg_ppstg_B_reg_672_pp0_it4;
wire   [14:0] tmp_9_fu_388_p2;
reg   [14:0] tmp_9_reg_680;
wire   [15:0] tmp3_cast_fu_400_p1;
reg   [15:0] tmp3_cast_reg_685;
wire   [11:0] p_shl3_fu_410_p3;
reg   [11:0] p_shl3_reg_690;
reg   [11:0] ap_reg_ppstg_p_shl3_reg_690_pp0_it4;
wire  signed [15:0] tmp_15_cast_fu_427_p1;
reg  signed [15:0] tmp_15_cast_reg_695;
wire  signed [13:0] tmp_15_fu_458_p2;
reg  signed [13:0] tmp_15_reg_700;
wire   [15:0] tmp_23_cast_fu_470_p1;
reg   [15:0] tmp_23_cast_reg_705;
reg   [7:0] tmp_5_reg_710;
wire  signed [15:0] tmp4_fu_518_p2;
reg  signed [15:0] tmp4_reg_715;
reg   [7:0] tmp_18_reg_720;
reg   [15:0] x_phi_fu_220_p4;
wire   [63:0] tmp_4_fu_334_p1;
wire   [15:0] bound_fu_247_p0;
wire   [15:0] bound_fu_247_p1;
wire   [0:0] exitcond_fu_264_p2;
wire   [15:0] x_s_fu_277_p2;
wire   [25:0] tmp_fu_300_p3;
wire   [23:0] tmp_2_fu_311_p3;
wire   [26:0] p_shl_cast_fu_307_p1;
wire   [26:0] p_shl7_cast_fu_318_p1;
wire   [26:0] p_addr_fu_322_p2;
wire   [26:0] tmp_2_trn_cast_fu_297_p1;
wire   [26:0] p_addr1_fu_328_p2;
wire   [13:0] p_shl5_fu_344_p3;
wire   [8:0] p_shl6_fu_355_p3;
wire   [7:0] tmp_8_fu_372_p0;
wire   [9:0] p_shl6_cast_cast_fu_362_p1;
wire   [9:0] tmp1_fu_378_p2;
wire   [14:0] tmp1_cast_fu_384_p1;
wire   [14:0] p_shl5_cast_fu_351_p1;
wire   [12:0] tmp_8_fu_372_p2;
wire   [12:0] tmp_5_cast1_cast_fu_366_p1;
wire   [12:0] tmp3_fu_394_p2;
wire   [7:0] tmp_6_fu_404_p0;
wire   [14:0] tmp_3_cast1_fu_341_p1;
wire   [14:0] tmp_6_fu_404_p2;
wire   [14:0] tmp_10_fu_421_p2;
wire   [7:0] tmp_13_fu_431_p0;
wire   [12:0] p_shl3_cast7_fu_417_p1;
wire   [12:0] p_neg_fu_437_p2;
wire   [8:0] p_shl1_fu_447_p3;
wire  signed [13:0] p_neg_cast_fu_443_p1;
wire   [13:0] p_shl1_cast_fu_454_p1;
wire   [14:0] tmp_13_fu_431_p2;
wire   [14:0] tmp_16_fu_464_p2;
wire   [14:0] p_shl4_fu_477_p3;
wire   [15:0] p_shl4_cast_fu_484_p1;
wire   [15:0] tmp_9_cast_fu_488_p1;
wire   [15:0] tmp2_fu_491_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp_1_fu_497_p2;
wire   [7:0] tmp_7_fu_512_p0;
wire   [15:0] tmp_5_cast1_fu_474_p1;
wire   [15:0] tmp_7_fu_512_p2;
wire   [7:0] tmp_14_fu_523_p0;
wire  signed [15:0] tmp_22_cast_fu_529_p1;
(* use_dsp48 = "no" *) wire  signed [15:0] tmp5_fu_532_p2;
wire   [15:0] tmp_14_fu_523_p2;
wire  signed [15:0] tmp_17_fu_537_p2;
wire   [14:0] p_shl2_fu_559_p3;
wire   [15:0] p_shl2_cast_fu_566_p1;
wire   [15:0] p_shl3_cast_fu_570_p1;
wire   [15:0] tmp_s_fu_573_p2;
(* use_dsp48 = "no" *) wire  signed [15:0] tmp_11_fu_579_p2;
wire   [7:0] tmp_12_fu_584_p4;
reg    ap_sig_cseq_ST_st8_fsm_2;
reg    ap_sig_bdd_460;
reg   [2:0] ap_NS_fsm;
wire   [31:0] bound_fu_247_p00;
wire   [31:0] bound_fu_247_p10;
wire   [12:0] tmp_8_fu_372_p00;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_2)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(exitcond_flatten_fu_253_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_253_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(exitcond_flatten_fu_253_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84)) begin
            ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_253_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_205 <= indvar_flatten_next_fu_258_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84)) begin
        indvar_flatten_reg_205 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_reg_617 == ap_const_lv1_0))) begin
        x_reg_216 <= x_mid2_reg_631;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84)) begin
        x_reg_216 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_253_p2 == ap_const_lv1_0))) begin
        y_reg_227 <= y_1_fu_291_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84)) begin
        y_reg_227 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it1))) begin
        B_reg_672 <= in_channels_ch3_q0;
        G_reg_665 <= in_channels_ch2_q0;
        R_reg_658 <= in_channels_ch1_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) begin
        ap_reg_ppstg_B_reg_672_pp0_it3 <= B_reg_672;
        ap_reg_ppstg_B_reg_672_pp0_it4 <= ap_reg_ppstg_B_reg_672_pp0_it3;
        ap_reg_ppstg_G_reg_665_pp0_it3 <= G_reg_665;
        ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it1;
        ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it2;
        ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it3;
        ap_reg_ppstg_p_shl3_reg_690_pp0_it4[4] <= p_shl3_reg_690[4];
ap_reg_ppstg_p_shl3_reg_690_pp0_it4[5] <= p_shl3_reg_690[5];
ap_reg_ppstg_p_shl3_reg_690_pp0_it4[6] <= p_shl3_reg_690[6];
ap_reg_ppstg_p_shl3_reg_690_pp0_it4[7] <= p_shl3_reg_690[7];
ap_reg_ppstg_p_shl3_reg_690_pp0_it4[8] <= p_shl3_reg_690[8];
ap_reg_ppstg_p_shl3_reg_690_pp0_it4[9] <= p_shl3_reg_690[9];
ap_reg_ppstg_p_shl3_reg_690_pp0_it4[10] <= p_shl3_reg_690[10];
ap_reg_ppstg_p_shl3_reg_690_pp0_it4[11] <= p_shl3_reg_690[11];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it1 <= exitcond_flatten_reg_617;
        exitcond_flatten_reg_617 <= exitcond_flatten_fu_253_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84)) begin
        bound_reg_612 <= bound_fu_247_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it2))) begin
        p_shl3_reg_690[4] <= p_shl3_fu_410_p3[4];
p_shl3_reg_690[5] <= p_shl3_fu_410_p3[5];
p_shl3_reg_690[6] <= p_shl3_fu_410_p3[6];
p_shl3_reg_690[7] <= p_shl3_fu_410_p3[7];
p_shl3_reg_690[8] <= p_shl3_fu_410_p3[8];
p_shl3_reg_690[9] <= p_shl3_fu_410_p3[9];
p_shl3_reg_690[10] <= p_shl3_fu_410_p3[10];
p_shl3_reg_690[11] <= p_shl3_fu_410_p3[11];
        tmp3_cast_reg_685[0] <= tmp3_cast_fu_400_p1[0];
tmp3_cast_reg_685[1] <= tmp3_cast_fu_400_p1[1];
tmp3_cast_reg_685[2] <= tmp3_cast_fu_400_p1[2];
tmp3_cast_reg_685[3] <= tmp3_cast_fu_400_p1[3];
tmp3_cast_reg_685[4] <= tmp3_cast_fu_400_p1[4];
tmp3_cast_reg_685[5] <= tmp3_cast_fu_400_p1[5];
tmp3_cast_reg_685[6] <= tmp3_cast_fu_400_p1[6];
tmp3_cast_reg_685[7] <= tmp3_cast_fu_400_p1[7];
tmp3_cast_reg_685[8] <= tmp3_cast_fu_400_p1[8];
tmp3_cast_reg_685[9] <= tmp3_cast_fu_400_p1[9];
tmp3_cast_reg_685[10] <= tmp3_cast_fu_400_p1[10];
tmp3_cast_reg_685[11] <= tmp3_cast_fu_400_p1[11];
tmp3_cast_reg_685[12] <= tmp3_cast_fu_400_p1[12];
        tmp_15_cast_reg_695[1] <= tmp_15_cast_fu_427_p1[1];
tmp_15_cast_reg_695[2] <= tmp_15_cast_fu_427_p1[2];
tmp_15_cast_reg_695[3] <= tmp_15_cast_fu_427_p1[3];
tmp_15_cast_reg_695[4] <= tmp_15_cast_fu_427_p1[4];
tmp_15_cast_reg_695[5] <= tmp_15_cast_fu_427_p1[5];
tmp_15_cast_reg_695[6] <= tmp_15_cast_fu_427_p1[6];
tmp_15_cast_reg_695[7] <= tmp_15_cast_fu_427_p1[7];
tmp_15_cast_reg_695[8] <= tmp_15_cast_fu_427_p1[8];
tmp_15_cast_reg_695[9] <= tmp_15_cast_fu_427_p1[9];
tmp_15_cast_reg_695[10] <= tmp_15_cast_fu_427_p1[10];
tmp_15_cast_reg_695[11] <= tmp_15_cast_fu_427_p1[11];
tmp_15_cast_reg_695[12] <= tmp_15_cast_fu_427_p1[12];
tmp_15_cast_reg_695[13] <= tmp_15_cast_fu_427_p1[13];
tmp_15_cast_reg_695[14] <= tmp_15_cast_fu_427_p1[14];
tmp_15_cast_reg_695[15] <= tmp_15_cast_fu_427_p1[15];
        tmp_15_reg_700[1] <= tmp_15_fu_458_p2[1];
tmp_15_reg_700[2] <= tmp_15_fu_458_p2[2];
tmp_15_reg_700[3] <= tmp_15_fu_458_p2[3];
tmp_15_reg_700[4] <= tmp_15_fu_458_p2[4];
tmp_15_reg_700[5] <= tmp_15_fu_458_p2[5];
tmp_15_reg_700[6] <= tmp_15_fu_458_p2[6];
tmp_15_reg_700[7] <= tmp_15_fu_458_p2[7];
tmp_15_reg_700[8] <= tmp_15_fu_458_p2[8];
tmp_15_reg_700[9] <= tmp_15_fu_458_p2[9];
tmp_15_reg_700[10] <= tmp_15_fu_458_p2[10];
tmp_15_reg_700[11] <= tmp_15_fu_458_p2[11];
tmp_15_reg_700[12] <= tmp_15_fu_458_p2[12];
tmp_15_reg_700[13] <= tmp_15_fu_458_p2[13];
        tmp_23_cast_reg_705[1] <= tmp_23_cast_fu_470_p1[1];
tmp_23_cast_reg_705[2] <= tmp_23_cast_fu_470_p1[2];
tmp_23_cast_reg_705[3] <= tmp_23_cast_fu_470_p1[3];
tmp_23_cast_reg_705[4] <= tmp_23_cast_fu_470_p1[4];
tmp_23_cast_reg_705[5] <= tmp_23_cast_fu_470_p1[5];
tmp_23_cast_reg_705[6] <= tmp_23_cast_fu_470_p1[6];
tmp_23_cast_reg_705[7] <= tmp_23_cast_fu_470_p1[7];
tmp_23_cast_reg_705[8] <= tmp_23_cast_fu_470_p1[8];
tmp_23_cast_reg_705[9] <= tmp_23_cast_fu_470_p1[9];
tmp_23_cast_reg_705[10] <= tmp_23_cast_fu_470_p1[10];
tmp_23_cast_reg_705[11] <= tmp_23_cast_fu_470_p1[11];
tmp_23_cast_reg_705[12] <= tmp_23_cast_fu_470_p1[12];
tmp_23_cast_reg_705[13] <= tmp_23_cast_fu_470_p1[13];
tmp_23_cast_reg_705[14] <= tmp_23_cast_fu_470_p1[14];
        tmp_9_reg_680[1] <= tmp_9_fu_388_p2[1];
tmp_9_reg_680[2] <= tmp_9_fu_388_p2[2];
tmp_9_reg_680[3] <= tmp_9_fu_388_p2[3];
tmp_9_reg_680[4] <= tmp_9_fu_388_p2[4];
tmp_9_reg_680[5] <= tmp_9_fu_388_p2[5];
tmp_9_reg_680[6] <= tmp_9_fu_388_p2[6];
tmp_9_reg_680[7] <= tmp_9_fu_388_p2[7];
tmp_9_reg_680[8] <= tmp_9_fu_388_p2[8];
tmp_9_reg_680[9] <= tmp_9_fu_388_p2[9];
tmp_9_reg_680[10] <= tmp_9_fu_388_p2[10];
tmp_9_reg_680[11] <= tmp_9_fu_388_p2[11];
tmp_9_reg_680[12] <= tmp_9_fu_388_p2[12];
tmp_9_reg_680[13] <= tmp_9_fu_388_p2[13];
tmp_9_reg_680[14] <= tmp_9_fu_388_p2[14];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it3))) begin
        tmp4_reg_715[1] <= tmp4_fu_518_p2[1];
tmp4_reg_715[2] <= tmp4_fu_518_p2[2];
tmp4_reg_715[3] <= tmp4_fu_518_p2[3];
tmp4_reg_715[4] <= tmp4_fu_518_p2[4];
tmp4_reg_715[5] <= tmp4_fu_518_p2[5];
tmp4_reg_715[6] <= tmp4_fu_518_p2[6];
tmp4_reg_715[7] <= tmp4_fu_518_p2[7];
tmp4_reg_715[8] <= tmp4_fu_518_p2[8];
tmp4_reg_715[9] <= tmp4_fu_518_p2[9];
tmp4_reg_715[10] <= tmp4_fu_518_p2[10];
tmp4_reg_715[11] <= tmp4_fu_518_p2[11];
tmp4_reg_715[12] <= tmp4_fu_518_p2[12];
tmp4_reg_715[13] <= tmp4_fu_518_p2[13];
tmp4_reg_715[14] <= tmp4_fu_518_p2[14];
tmp4_reg_715[15] <= tmp4_fu_518_p2[15];
        tmp_18_reg_720 <= {{tmp_17_fu_537_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_5_reg_710 <= {{tmp_1_fu_497_p2[ap_const_lv32_F : ap_const_lv32_8]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_253_p2 == ap_const_lv1_0))) begin
        x_mid2_reg_631 <= x_mid2_fu_283_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & (exitcond_flatten_fu_253_p2 == ap_const_lv1_0))) begin
        y_mid2_reg_626 <= y_mid2_fu_269_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st8_fsm_2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_96)
begin
    if (ap_sig_bdd_96) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_2 assign process. ///
always @ (ap_sig_bdd_460)
begin
    if (ap_sig_bdd_460) begin
        ap_sig_cseq_ST_st8_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_2 = ap_const_logic_0;
    end
end

/// in_channels_ch1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_119 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        in_channels_ch1_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch1_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_119 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        in_channels_ch2_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch2_ce0 = ap_const_logic_0;
    end
end

/// in_channels_ch3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_119 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        in_channels_ch3_ce0 = ap_const_logic_1;
    end else begin
        in_channels_ch3_ce0 = ap_const_logic_0;
    end
end

/// out_channels_ch1_write assign process. ///
always @ (ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 or ap_sig_bdd_119 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        out_channels_ch1_write = ap_const_logic_1;
    end else begin
        out_channels_ch1_write = ap_const_logic_0;
    end
end

/// out_channels_ch2_write assign process. ///
always @ (ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 or ap_sig_bdd_119 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        out_channels_ch2_write = ap_const_logic_1;
    end else begin
        out_channels_ch2_write = ap_const_logic_0;
    end
end

/// out_channels_ch3_write assign process. ///
always @ (ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 or ap_sig_bdd_119 or ap_reg_ppiten_pp0_it5)
begin
    if (((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        out_channels_ch3_write = ap_const_logic_1;
    end else begin
        out_channels_ch3_write = ap_const_logic_0;
    end
end

/// out_height_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_84)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84)) begin
        out_height_write = ap_const_logic_1;
    end else begin
        out_height_write = ap_const_logic_0;
    end
end

/// out_width_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_84)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_84)) begin
        out_width_write = ap_const_logic_1;
    end else begin
        out_width_write = ap_const_logic_0;
    end
end

/// x_phi_fu_220_p4 assign process. ///
always @ (x_reg_216 or exitcond_flatten_reg_617 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or x_mid2_reg_631)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_617 == ap_const_lv1_0))) begin
        x_phi_fu_220_p4 = x_mid2_reg_631;
    end else begin
        x_phi_fu_220_p4 = x_reg_216;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_84 or exitcond_flatten_fu_253_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it4 or ap_sig_bdd_119 or ap_reg_ppiten_pp0_it5)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_84) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(exitcond_flatten_fu_253_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_119 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)) & ~(exitcond_flatten_fu_253_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st8_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st8_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_119 assign process. ///
always @ (out_channels_ch1_full_n or out_channels_ch2_full_n or out_channels_ch3_full_n or ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4)
begin
    ap_sig_bdd_119 = (((out_channels_ch1_full_n == ap_const_logic_0) & (ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 == ap_const_lv1_0)) | ((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 == ap_const_lv1_0) & (out_channels_ch2_full_n == ap_const_logic_0)) | ((ap_reg_ppstg_exitcond_flatten_reg_617_pp0_it4 == ap_const_lv1_0) & (out_channels_ch3_full_n == ap_const_logic_0)));
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_460 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_460 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_84 assign process. ///
always @ (ap_start or ap_done_reg or out_width_full_n or out_height_full_n)
begin
    ap_sig_bdd_84 = ((out_width_full_n == ap_const_logic_0) | (out_height_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_96 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_96 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign bound_fu_247_p0 = bound_fu_247_p00;
assign bound_fu_247_p00 = in_width;
assign bound_fu_247_p1 = bound_fu_247_p10;
assign bound_fu_247_p10 = in_height;
assign bound_fu_247_p2 = (bound_fu_247_p0 * bound_fu_247_p1);
assign exitcond_flatten_fu_253_p2 = (indvar_flatten_reg_205 == bound_reg_612? 1'b1: 1'b0);
assign exitcond_fu_264_p2 = (y_reg_227 == in_height? 1'b1: 1'b0);
assign in_channels_ch1_address0 = tmp_4_fu_334_p1;
assign in_channels_ch2_address0 = tmp_4_fu_334_p1;
assign in_channels_ch3_address0 = tmp_4_fu_334_p1;
assign indvar_flatten_next_fu_258_p2 = (indvar_flatten_reg_205 + ap_const_lv32_1);
assign out_channels_ch1_din = (tmp_5_reg_710 + ap_const_lv8_10);
assign out_channels_ch2_din = (tmp_12_fu_584_p4 ^ ap_const_lv8_80);
assign out_channels_ch3_din = (tmp_18_reg_720 ^ ap_const_lv8_80);
assign out_height_din = in_height;
assign out_width_din = in_width;
assign p_addr1_fu_328_p2 = (p_addr_fu_322_p2 + tmp_2_trn_cast_fu_297_p1);
assign p_addr_fu_322_p2 = (p_shl_cast_fu_307_p1 + p_shl7_cast_fu_318_p1);
assign p_neg_cast_fu_443_p1 = $signed(p_neg_fu_437_p2);
assign p_neg_fu_437_p2 = (ap_const_lv13_0 - p_shl3_cast7_fu_417_p1);
assign p_shl1_cast_fu_454_p1 = p_shl1_fu_447_p3;
assign p_shl1_fu_447_p3 = {{B_reg_672}, {ap_const_lv1_0}};
assign p_shl2_cast_fu_566_p1 = p_shl2_fu_559_p3;
assign p_shl2_fu_559_p3 = {{ap_reg_ppstg_B_reg_672_pp0_it4}, {ap_const_lv7_0}};
assign p_shl3_cast7_fu_417_p1 = p_shl3_fu_410_p3;
assign p_shl3_cast_fu_570_p1 = ap_reg_ppstg_p_shl3_reg_690_pp0_it4;
assign p_shl3_fu_410_p3 = {{B_reg_672}, {ap_const_lv4_0}};
assign p_shl4_cast_fu_484_p1 = p_shl4_fu_477_p3;
assign p_shl4_fu_477_p3 = {{ap_reg_ppstg_G_reg_665_pp0_it3}, {ap_const_lv7_0}};
assign p_shl5_cast_fu_351_p1 = p_shl5_fu_344_p3;
assign p_shl5_fu_344_p3 = {{R_reg_658}, {ap_const_lv6_0}};
assign p_shl6_cast_cast_fu_362_p1 = p_shl6_fu_355_p3;
assign p_shl6_fu_355_p3 = {{R_reg_658}, {ap_const_lv1_0}};
assign p_shl7_cast_fu_318_p1 = tmp_2_fu_311_p3;
assign p_shl_cast_fu_307_p1 = tmp_fu_300_p3;
assign tmp1_cast_fu_384_p1 = tmp1_fu_378_p2;
assign tmp1_fu_378_p2 = (p_shl6_cast_cast_fu_362_p1 + ap_const_lv10_80);
assign tmp2_fu_491_p2 = (p_shl4_cast_fu_484_p1 + tmp_9_cast_fu_488_p1);
assign tmp3_cast_fu_400_p1 = tmp3_fu_394_p2;
assign tmp3_fu_394_p2 = (tmp_8_fu_372_p2 + tmp_5_cast1_cast_fu_366_p1);
assign tmp4_fu_518_p2 = ($signed(tmp_7_fu_512_p2) + $signed(tmp_15_cast_reg_695));
assign tmp5_fu_532_p2 = ($signed(tmp_23_cast_reg_705) + $signed(tmp_22_cast_fu_529_p1));
assign tmp_10_fu_421_p2 = (tmp_6_fu_404_p2 + ap_const_lv15_80);
assign tmp_11_fu_579_p2 = ($signed(tmp4_reg_715) + $signed(tmp_s_fu_573_p2));
assign tmp_12_fu_584_p4 = {{tmp_11_fu_579_p2[ap_const_lv32_F : ap_const_lv32_8]}};
assign tmp_13_fu_431_p0 = tmp_3_cast1_fu_341_p1;
assign tmp_13_fu_431_p2 = (tmp_13_fu_431_p0 * $signed('h7A));
assign tmp_14_fu_523_p0 = tmp_5_cast1_fu_474_p1;
assign tmp_14_fu_523_p2 = ($signed({{1'b0}, {tmp_14_fu_523_p0}}) * $signed(-'h5E));
assign tmp_15_cast_fu_427_p1 = $signed(tmp_10_fu_421_p2);
assign tmp_15_fu_458_p2 = ($signed(p_neg_cast_fu_443_p1) - $signed(p_shl1_cast_fu_454_p1));
assign tmp_16_fu_464_p2 = (tmp_13_fu_431_p2 + ap_const_lv15_80);
assign tmp_17_fu_537_p2 = ($signed(tmp5_fu_532_p2) + $signed(tmp_14_fu_523_p2));
assign tmp_1_fu_497_p2 = (tmp3_cast_reg_685 + tmp2_fu_491_p2);
assign tmp_22_cast_fu_529_p1 = tmp_15_reg_700;
assign tmp_23_cast_fu_470_p1 = tmp_16_fu_464_p2;
assign tmp_2_fu_311_p3 = {{x_mid2_reg_631}, {ap_const_lv8_0}};
assign tmp_2_trn_cast_fu_297_p1 = y_mid2_reg_626;
assign tmp_3_cast1_fu_341_p1 = R_reg_658;
assign tmp_4_fu_334_p1 = p_addr1_fu_328_p2;
assign tmp_5_cast1_cast_fu_366_p1 = G_reg_665;
assign tmp_5_cast1_fu_474_p1 = ap_reg_ppstg_G_reg_665_pp0_it3;
assign tmp_6_fu_404_p0 = tmp_3_cast1_fu_341_p1;
assign tmp_6_fu_404_p2 = ($signed({{1'b0}, {tmp_6_fu_404_p0}}) * $signed(-'h26));
assign tmp_7_fu_512_p0 = tmp_5_cast1_fu_474_p1;
assign tmp_7_fu_512_p2 = ($signed({{1'b0}, {tmp_7_fu_512_p0}}) * $signed(-'h4A));
assign tmp_8_fu_372_p0 = tmp_8_fu_372_p00;
assign tmp_8_fu_372_p00 = B_reg_672;
assign tmp_8_fu_372_p2 = (tmp_8_fu_372_p0 * $signed('h19));
assign tmp_9_cast_fu_488_p1 = tmp_9_reg_680;
assign tmp_9_fu_388_p2 = (tmp1_cast_fu_384_p1 + p_shl5_cast_fu_351_p1);
assign tmp_fu_300_p3 = {{x_mid2_reg_631}, {ap_const_lv10_0}};
assign tmp_s_fu_573_p2 = (p_shl2_cast_fu_566_p1 - p_shl3_cast_fu_570_p1);
assign x_mid2_fu_283_p3 = ((exitcond_fu_264_p2)? x_s_fu_277_p2: x_phi_fu_220_p4);
assign x_s_fu_277_p2 = (x_phi_fu_220_p4 + ap_const_lv16_1);
assign y_1_fu_291_p2 = (y_mid2_fu_269_p3 + ap_const_lv16_1);
assign y_mid2_fu_269_p3 = ((exitcond_fu_264_p2)? ap_const_lv16_0: y_reg_227);
always @ (posedge ap_clk)
begin
    tmp_9_reg_680[0] <= 1'b0;
    tmp3_cast_reg_685[15:13] <= 3'b000;
    p_shl3_reg_690[3:0] <= 4'b0000;
    ap_reg_ppstg_p_shl3_reg_690_pp0_it4[3:0] <= 4'b0000;
    tmp_15_cast_reg_695[0] <= 1'b0;
    tmp_15_reg_700[0] <= 1'b0;
    tmp_23_cast_reg_705[0] <= 1'b0;
    tmp_23_cast_reg_705[15] <= 1'b0;
    tmp4_reg_715[0] <= 1'b0;
end



endmodule //yuv_filter_rgb2yuv

