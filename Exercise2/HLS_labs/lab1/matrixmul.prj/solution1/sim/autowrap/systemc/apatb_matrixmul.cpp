// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;




   #define AUTOTB_TVIN_a  "../tv/cdatafile/c.matrixmul.autotvin_a.dat"
   #define AUTOTB_TVIN_b  "../tv/cdatafile/c.matrixmul.autotvin_b.dat"
   #define AUTOTB_TVOUT_res  "../tv/cdatafile/c.matrixmul.autotvout_res.dat"
   #define AUTOTB_TVIN_res  "../tv/cdatafile/c.matrixmul.autotvin_res.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_res  "../tv/rtldatafile/rtl.matrixmul.autotvout_res.dat"

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            a_depth = 0;
            b_depth = 0;
            res_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {a "<< a_depth << "}\n";
            total_list<<"   {b "<< b_depth << "}\n";
            total_list<<"   {res "<< res_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int a_depth;
        int b_depth;
        int res_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

#define matrixmul AESL_ORIG_DUT_matrixmul
extern void matrixmul ( char a[3][3],  char b[3][3],  short res[3][3]);
#undef matrixmul
void matrixmul ( char a[3][3],  char b[3][3],  short res[3][3]) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    int AESL_i;

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

        static AESL_FILE_HANDLER aesl_fh;

        aesl_fh.read(AUTOTB_TVOUT_PC_res, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_res, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_res, AESL_token); //data

            sc_bv<16> *res_pc_buffer = new sc_bv<16>[9];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'res', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'res', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    res_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_res, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_res)) {

                   exit(1);

                }

            }

            if (i > 0) {

                sc_lv<16> *res_lv0_0_2_1_lv1_0_2_1 = new sc_lv<16>[9];

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 2 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 2 ; i_1+= 1) {

                        if(&(res[0][0]) != 0) {

                           res_lv0_0_2_1_lv1_0_2_1[0 + AESL_i].range(15, 0) = sc_bv<16>(res_pc_buffer[0 + AESL_i].range(15, 0));

                        }

                        AESL_i++;

                    }

                }

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 2 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 2 ; i_1+= 1) {

                        if(&(res[0][0]) != 0) {

                           res[i_0][i_1] = (res_lv0_0_2_1_lv1_0_2_1[0 + AESL_i]).to_uint64();

                        }

                        AESL_i++;

                    }

                }

                }

            delete [] res_pc_buffer;

        }

        AESL_transaction_pc ++ ;

    } else {

        static unsigned AESL_transaction;

        static AESL_FILE_HANDLER aesl_fh;

        char* tvin_a = new char[50];

        char* tvin_b = new char[50];

        char* tvout_res = new char[50];

        char* tvin_res = new char[50];

        aesl_fh.touch(AUTOTB_TVIN_res);

        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        sprintf(tvin_a, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_a, tvin_a);

        sc_bv<8> *a_tvin_wrapc_buffer = new sc_bv<8>[9];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 2 ; i_0+= 1) {

        sc_lv<8> a_tmp_mem; 

            for (int i_1 = 0; i_1 <= 2 ; i_1+= 1) {

            sc_lv<8> a_tmp_mem; 

                if(&(a[0][0]) != 0) {

                a_tmp_mem = a[i_0][i_1];

                   a_tvin_wrapc_buffer[0 + AESL_i].range(7, 0) = a_tmp_mem.range(7, 0 ) ;

                }

                AESL_i++;

            }

        }

        for (int i = 0; i < 9 ; i++) {

            sprintf(tvin_a, "%s\n", (a_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_a, tvin_a);

        }

        tcl_file.set_num(9,&tcl_file.a_depth);

        sprintf(tvin_a, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_a, tvin_a);

        delete [] a_tvin_wrapc_buffer;

        sprintf(tvin_b, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_b, tvin_b);

        sc_bv<8> *b_tvin_wrapc_buffer = new sc_bv<8>[9];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 2 ; i_0+= 1) {

        sc_lv<8> b_tmp_mem; 

            for (int i_1 = 0; i_1 <= 2 ; i_1+= 1) {

            sc_lv<8> b_tmp_mem; 

                if(&(b[0][0]) != 0) {

                b_tmp_mem = b[i_0][i_1];

                   b_tvin_wrapc_buffer[0 + AESL_i].range(7, 0) = b_tmp_mem.range(7, 0 ) ;

                }

                AESL_i++;

            }

        }

        for (int i = 0; i < 9 ; i++) {

            sprintf(tvin_b, "%s\n", (b_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_b, tvin_b);

        }

        tcl_file.set_num(9,&tcl_file.b_depth);

        sprintf(tvin_b, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_b, tvin_b);

        delete [] b_tvin_wrapc_buffer;

        sprintf(tvin_res, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_res, tvin_res);

        sc_bv<16> *res_tvin_wrapc_buffer = new sc_bv<16>[9];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 2 ; i_0+= 1) {

        sc_lv<16> res_tmp_mem; 

            for (int i_1 = 0; i_1 <= 2 ; i_1+= 1) {

            sc_lv<16> res_tmp_mem; 

                if(&(res[0][0]) != 0) {

                res_tmp_mem = res[i_0][i_1];

                   res_tvin_wrapc_buffer[0 + AESL_i].range(15, 0) = res_tmp_mem.range(15, 0 ) ;

                }

                AESL_i++;

            }

        }

        for (int i = 0; i < 9 ; i++) {

            sprintf(tvin_res, "%s\n", (res_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_res, tvin_res);

        }

        tcl_file.set_num(9,&tcl_file.res_depth);

        sprintf(tvin_res, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_res, tvin_res);

        delete [] res_tvin_wrapc_buffer;

        AESL_ORIG_DUT_matrixmul(a,b,res);

        sprintf(tvout_res, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_res, tvout_res);

        sc_bv<16> *res_tvout_wrapc_buffer = new sc_bv<16>[9];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 2 ; i_0+= 1) {

        sc_lv<16> res_tmp_mem; 

            for (int i_1 = 0; i_1 <= 2 ; i_1+= 1) {

            sc_lv<16> res_tmp_mem; 

                if(&(res[0][0]) != 0) {

                res_tmp_mem = res[i_0][i_1];

                   res_tvout_wrapc_buffer[0 + AESL_i].range(15, 0) = res_tmp_mem.range(15, 0 ) ;

                }

                AESL_i++;

            }

        }

        for (int i = 0; i < 9 ; i++) {

            sprintf(tvout_res, "%s\n", (res_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_res, tvout_res);

        }

        tcl_file.set_num(9,&tcl_file.res_depth);

        sprintf(tvout_res, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_res, tvout_res);

        delete [] res_tvout_wrapc_buffer;

        delete [] tvin_a;

        delete [] tvin_b;

        delete [] tvout_res;

        delete [] tvin_res;

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

    }
}


