// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#include "matrixmul.h"
#include "AESL_automem_a.h"
#include "AESL_automem_b.h"
#include "AESL_automem_res.h"
#include "SysCFileHandler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;

#define AUTOTB_DUT      matrixmul
#define AUTOTB_DUT_INST AESL_inst_matrixmul
#define AUTOTB_TOP      apatb_matrixmul_top
#define AUTOTB_LAT_RESULT_FILE "matrixmul.result.lat.rb"
#define AUTOTB_PER_RESULT_TRANS_FILE "matrixmul.performance.result.transaction.xml"
#define AUTOTB_TOP_INST AESL_inst_apatb_matrixmul_top
#define AUTOTB_TRANSACTION_NUM  1
#define AUTOTB_TVIN     "matrixmul.autotvin.dat"
#define AUTOTB_TVOUT    "matrixmul.autotvout.dat"
#define AUTOTB_HDL_TVIN "matrixmul.hdltvin.dat"
#define AUTOTB_HDL_TVOUT "matrixmul.hdltvout.dat"
#define LENGTH_a 9
#define LENGTH_b 9
#define LENGTH_res 9

#define REF_TCL_FILE "../tv/cdatafile/ref.tcl"
#define AUTOTB_TVIN_a  "../tv/cdatafile/c.matrixmul.autotvin_a.dat"
#define AUTOTB_TVIN_b  "../tv/cdatafile/c.matrixmul.autotvin_b.dat"
#define AUTOTB_TVIN_res  "../tv/cdatafile/c.matrixmul.autotvin_res.dat"
#define AUTOTB_TVIN_a_out_wrapc  "../tv/rtldatafile/rtl.matrixmul.autotvin_a.dat"
#define AUTOTB_TVIN_b_out_wrapc  "../tv/rtldatafile/rtl.matrixmul.autotvin_b.dat"
#define AUTOTB_TVIN_res_out_wrapc  "../tv/rtldatafile/rtl.matrixmul.autotvin_res.dat"
#define AUTOTB_TVOUT_res  "../tv/cdatafile/c.matrixmul.autotvout_res.dat"
#define AUTOTB_TVOUT_res_out_wrapc  "../tv/rtldatafile/rtl.matrixmul.autotvout_res.dat"


SC_MODULE(AUTOTB_TOP)
{
#if defined(AESL_APATB_ALDEC)
    sc_in< sc_logic > AESL_clock;
    sc_signal< bool > AESL_clock_bool;
#endif
#if !defined(AESL_APATB_ALDEC)
    sc_in_clk AESL_clock;
#endif
    sc_signal< sc_logic > AESL_reset;
    sc_signal< sc_logic > AESL_start;
    sc_signal< sc_logic > AESL_ce;
    sc_signal< sc_logic > AESL_idle;
    sc_signal< sc_logic > AESL_done;
    sc_signal< sc_logic > AESL_ready;
    sc_signal< sc_logic > AESL_continue;
    sc_signal< sc_logic > AESL_transaction_ready;
    sc_signal< sc_logic > AESL_interface_done;
    sc_signal< sc_logic > AESL_transaction_ready_a;
    sc_signal< sc_logic > AESL_transaction_done_a;
    sc_signal< sc_logic > AESL_transaction_ready_b;
    sc_signal< sc_logic > AESL_transaction_done_b;
    sc_signal< sc_logic > AESL_transaction_ready_res;
    sc_signal< sc_logic > AESL_transaction_done_res;
    sc_signal< sc_logic > AESL_ready_delay;
    sc_signal< sc_logic > AESL_done_delay;
    sc_signal< sc_logic > AESL_done_delay2;
    sc_signal< sc_logic > AESL_initial_ready;

    sc_signal< sc_lv<4> > a_address0;
    sc_signal< sc_logic > a_ce0;
    sc_signal< sc_lv<8> > a_q0;
    sc_signal< sc_lv<4> > b_address0;
    sc_signal< sc_logic > b_ce0;
    sc_signal< sc_lv<8> > b_q0;
    sc_signal< sc_lv<4> > res_address0;
    sc_signal< sc_logic > res_ce0;
    sc_signal< sc_logic > res_we0;
    sc_signal< sc_lv<16> > res_d0;

    AUTOTB_DUT * AUTOTB_DUT_INST;

    AESL_automem_a *  AESL_inst_a;
sc_signal< sc_dt::sc_lv<8> > arraya_din0;
sc_signal< sc_dt::sc_lv<8> > arraya_dout0;
sc_signal< sc_dt::sc_lv<8> > arraya_din1;
sc_signal< sc_dt::sc_lv<8> > arraya_dout1;
    AESL_automem_b *  AESL_inst_b;
sc_signal< sc_dt::sc_lv<8> > arrayb_din0;
sc_signal< sc_dt::sc_lv<8> > arrayb_dout0;
sc_signal< sc_dt::sc_lv<8> > arrayb_din1;
sc_signal< sc_dt::sc_lv<8> > arrayb_dout1;
    AESL_automem_res *  AESL_inst_res;
sc_signal< sc_dt::sc_lv<16> > arrayres_din0;
sc_signal< sc_dt::sc_lv<16> > arrayres_dout0;
sc_signal< sc_dt::sc_lv<16> > arrayres_din1;
sc_signal< sc_dt::sc_lv<16> > arrayres_dout1;


AESL_FILE_HANDLER AESL_fh;
    ifstream AESL_mTvIn;
    ifstream AESL_mTvOut;
    ofstream AESL_mHdlTvIn;
    ofstream AESL_mHdlTvOut;
    int AESL_mErrNo;
    int AESL_mTransNo;
    ofstream AESL_mErrLog;
    ofstream AESL_mParamLog;

    int AESL_mLatCnter;
    int AESL_mLatCnterInIdx;
    int* AESL_mLatCnterIn;
    int* AESL_mLatCnterOut;
    int* AESL_lat_array;
    int* AESL_thr_array;
    int AESL_mLatCnterOutIdx;
    int AESL_done_cnt;
    int AESL_ready_cnt;

    bool AESL_mFinishTvOut_res;


    void AESL_proc_tv_in();
    void AESL_proc_transaction_ready();
    void AESL_proc_interface_done();
    void AESL_proc_transaction_ready_a();
    void AESL_proc_transaction_done_a();
    void AESL_proc_transaction_ready_b();
    void AESL_proc_transaction_done_b();
    void AESL_proc_transaction_ready_res();
    void AESL_proc_transaction_done_res();
    void AESL_proc_ready_delay();
    void AESL_proc_done_delay();
    void AESL_proc_initial_ready();
    void AESL_proc_ready_cnt();
    void AESL_proc_tv_out();
    void AESL_proc_mlatcnterin();
    void AESL_proc_mlatcnterout();
    void AESL_proc_calculate_performance();
    void AESL_proc_tv_in_a();
    void AESL_proc_tv_in_b();
    void AESL_proc_tv_in_res();
    void AESL_proc_tv_out_res();
    void AESL_proc_cnter();
    bool AESL_proc_split_tv();
    void AESL_proc_buffer_output();

#if defined(AESL_APATB_ALDEC)
    void AESL_proc_clock_bool() {
        if (AESL_clock.read() == SC_LOGIC_1)
            AESL_clock_bool.write(true);
        else
            AESL_clock_bool.write(false);
    }
#endif


    void AESL_proc_connection_arraya_dout0();
    void AESL_proc_connection_arrayb_dout0();
    void AESL_proc_connection_arrayres_din0();

    ~AUTOTB_TOP()
    {
        if (AESL_mErrNo != 0) {
            AESL_mErrLog << "AESL_mErrNo = " << AESL_mErrNo << endl;
        }
        AESL_mErrLog.close();
        AESL_mParamLog.close();
        AESL_mTvIn.close();
        AESL_mTvOut.close();
        AESL_mHdlTvIn.close();
        AESL_mHdlTvOut.close();
        delete AESL_mLatCnterIn;
        delete AESL_mLatCnterOut;
        delete AESL_lat_array;
        delete AESL_thr_array;
        delete AUTOTB_DUT_INST;
        delete AESL_inst_a;
        delete AESL_inst_b;
        delete AESL_inst_res;
    }

    SC_CTOR(AUTOTB_TOP)
    {
        AESL_mErrNo = 0;
        AESL_mTransNo = AUTOTB_TRANSACTION_NUM;
        AESL_mErrLog.open("err.log");
        AESL_mParamLog.open("param.log");
        AESL_mLatCnterIn    = new int[AUTOTB_TRANSACTION_NUM + 1];
        AESL_mLatCnterOut   = new int[AUTOTB_TRANSACTION_NUM + 1];
        AESL_lat_array      = new int[AUTOTB_TRANSACTION_NUM + 1];
        AESL_thr_array      = new int[AUTOTB_TRANSACTION_NUM + 1];


        AESL_mLatCnter = 0;
        AESL_mLatCnterInIdx = 0;
        AESL_mLatCnterOutIdx = 0;
        AESL_done_cnt = 0;

        AESL_mFinishTvOut_res = false;

        AESL_mHdlTvIn.open(AUTOTB_HDL_TVIN);
        AESL_mHdlTvOut.open(AUTOTB_HDL_TVOUT);

        if (!AESL_mHdlTvIn.good()
            || !AESL_mHdlTvOut.good()
        ) {
            AESL_mErrNo = 1;
            sc_stop();
            return;
        }
    
        AUTOTB_DUT_INST = new AUTOTB_DUT("AUTOTB_DUT_INST");
        AUTOTB_DUT_INST->ap_clk( AESL_clock );
        AUTOTB_DUT_INST->ap_rst( AESL_reset );
        AUTOTB_DUT_INST->ap_start( AESL_start );
        AUTOTB_DUT_INST->ap_done( AESL_done );
        AUTOTB_DUT_INST->ap_idle( AESL_idle );
        AUTOTB_DUT_INST->ap_ready( AESL_ready );
        AUTOTB_DUT_INST->a_address0( a_address0 );
        AUTOTB_DUT_INST->a_ce0( a_ce0 );
        AUTOTB_DUT_INST->a_q0( a_q0 );
        AUTOTB_DUT_INST->b_address0( b_address0 );
        AUTOTB_DUT_INST->b_ce0( b_ce0 );
        AUTOTB_DUT_INST->b_q0( b_q0 );
        AUTOTB_DUT_INST->res_address0( res_address0 );
        AUTOTB_DUT_INST->res_ce0( res_ce0 );
        AUTOTB_DUT_INST->res_we0( res_we0 );
        AUTOTB_DUT_INST->res_d0( res_d0 );

        AESL_inst_a = new  AESL_automem_a("AESL_inst_a");
        AESL_inst_a->address0(a_address0);
        AESL_inst_a->ce0(a_ce0);
        AESL_inst_a->q0(arraya_dout0);
#if defined(AESL_APATB_ALDEC)
        AESL_inst_a->clk(AESL_clock_bool);
#endif
#if !defined(AESL_APATB_ALDEC)
        AESL_inst_a->clk(AESL_clock);
#endif
        AESL_inst_a->reset(AESL_reset);

        AESL_inst_b = new  AESL_automem_b("AESL_inst_b");
        AESL_inst_b->address0(b_address0);
        AESL_inst_b->ce0(b_ce0);
        AESL_inst_b->q0(arrayb_dout0);
#if defined(AESL_APATB_ALDEC)
        AESL_inst_b->clk(AESL_clock_bool);
#endif
#if !defined(AESL_APATB_ALDEC)
        AESL_inst_b->clk(AESL_clock);
#endif
        AESL_inst_b->reset(AESL_reset);

        AESL_inst_res = new  AESL_automem_res("AESL_inst_res");
        AESL_inst_res->address0(res_address0);
        AESL_inst_res->ce0(res_ce0);
        AESL_inst_res->we0(res_we0);
        AESL_inst_res->d0(arrayres_din0);
#if defined(AESL_APATB_ALDEC)
        AESL_inst_res->clk(AESL_clock_bool);
#endif
#if !defined(AESL_APATB_ALDEC)
        AESL_inst_res->clk(AESL_clock);
#endif
        AESL_inst_res->reset(AESL_reset);

        SC_METHOD(AESL_proc_transaction_ready_a);
        sensitive << AESL_transaction_ready;

        SC_METHOD(AESL_proc_transaction_done_a);
        sensitive << AESL_reset;

        SC_METHOD(AESL_proc_transaction_ready_b);
        sensitive << AESL_transaction_ready;

        SC_METHOD(AESL_proc_transaction_done_b);
        sensitive << AESL_reset;

        SC_METHOD(AESL_proc_transaction_ready_res);
        sensitive << AESL_initial_ready << AESL_transaction_done_res ;

        SC_METHOD(AESL_proc_transaction_done_res);
        sensitive << AESL_done_delay;

        SC_METHOD(AESL_proc_ready_delay);
        sensitive << AESL_clock.pos() << AESL_reset;

        SC_METHOD(AESL_proc_done_delay);
        sensitive << AESL_clock.pos() << AESL_reset;

        SC_THREAD(AESL_proc_interface_done);
        sensitive << AESL_clock.pos();

        SC_METHOD(AESL_proc_transaction_ready);
        sensitive << AESL_initial_ready << AESL_ready_delay;

        SC_THREAD(AESL_proc_initial_ready);
        sensitive << AESL_clock.pos();

        SC_METHOD(AESL_proc_ready_cnt);
        sensitive << AESL_transaction_ready;

        SC_THREAD(AESL_proc_tv_in);
        sensitive << AESL_clock.pos();

        SC_THREAD(AESL_proc_tv_out);
        sensitive << AESL_clock.pos();

        SC_METHOD(AESL_proc_mlatcnterin);
        sensitive << AESL_clock.pos() << AESL_reset;

        SC_METHOD(AESL_proc_mlatcnterout);
        sensitive << AESL_clock.pos() << AESL_reset;

        SC_THREAD(AESL_proc_calculate_performance);
        sensitive << AESL_clock.pos();

        SC_THREAD(AESL_proc_tv_in_a);
         sensitive << AESL_clock.pos();


        SC_THREAD(AESL_proc_tv_in_b);
         sensitive << AESL_clock.pos();


        SC_THREAD(AESL_proc_tv_in_res);
         sensitive << AESL_clock.pos();


        SC_THREAD(AESL_proc_tv_out_res);
         sensitive << AESL_clock.pos();


        SC_METHOD(AESL_proc_cnter);
        sensitive << AESL_clock.pos();

        SC_METHOD(AESL_proc_connection_arraya_dout0);
        sensitive << arraya_dout0;
        SC_METHOD(AESL_proc_connection_arrayb_dout0);
        sensitive << arrayb_dout0;
        SC_METHOD(AESL_proc_connection_arrayres_din0);
        sensitive << res_d0;
        SC_METHOD(AESL_proc_buffer_output);
        sensitive << AESL_clock.pos();

#if defined(AESL_APATB_ALDEC)
        SC_METHOD(AESL_proc_clock_bool);
        sensitive << AESL_clock;
#endif

    }

};


void AUTOTB_TOP::AESL_proc_buffer_output()
{
}


void AUTOTB_TOP::AESL_proc_cnter()
{
    AESL_mLatCnter ++;
}


void AUTOTB_TOP::AESL_proc_tv_in()
{
    int wait_i;
    AESL_start.write(SC_LOGIC_0);
    AESL_ce.write(SC_LOGIC_1);
    AESL_continue.write(SC_LOGIC_1);
    AESL_reset.write(SC_LOGIC_1);
    wait();
    wait(4);
    AESL_reset.write(SC_LOGIC_0);

    wait();
    wait(10, SC_PS);
    AESL_start.write(SC_LOGIC_1);
    while (AESL_done_cnt < AUTOTB_TRANSACTION_NUM + 1) {
        wait();
    }
    AESL_start.write(SC_LOGIC_0);

}


void AUTOTB_TOP::AESL_proc_tv_out()
{
    wait();
    wait(4);

    while (1) {

        while (AESL_start.read() != SC_LOGIC_1)  wait();
        wait();

        unsigned AESL_latency = 0;
        bool AESL_timeout = false;
        if (true
            && AESL_mFinishTvOut_res
        ) {
            break;
        }

    }

    wait(10, SC_PS);
    sc_stop();
}


void AUTOTB_TOP::AESL_proc_mlatcnterin()
{
    if(AESL_reset.read() == SC_LOGIC_1) 
    {
        AESL_mLatCnterInIdx = 0;
    }
    else {
        if (AESL_start.read() == SC_LOGIC_1 && AESL_mLatCnterInIdx == 0) {
            AESL_mLatCnterIn[AESL_mLatCnterInIdx++] = AESL_mLatCnter;
        }
        if (AESL_ready.read() == SC_LOGIC_1 && AESL_mLatCnterInIdx < AUTOTB_TRANSACTION_NUM + 1 ) {
            AESL_mLatCnterIn[AESL_mLatCnterInIdx++] = AESL_mLatCnter;
        }
    }
}

void AUTOTB_TOP::AESL_proc_mlatcnterout()
{
    if(AESL_reset.read() == SC_LOGIC_1) 
    {
        AESL_mLatCnterOutIdx = 0;
        AESL_mLatCnterOut[AESL_mLatCnterOutIdx] = AESL_mLatCnter + 1;
        AESL_done_cnt = 0;
    }
    else if (AESL_done.read() == SC_LOGIC_1 && AESL_mLatCnterOutIdx < AUTOTB_TRANSACTION_NUM + 1 ) {
        AESL_mLatCnterOut[AESL_mLatCnterOutIdx++] = AESL_mLatCnter;
        AESL_done_cnt ++;
    }
}

void AUTOTB_TOP::AESL_proc_calculate_performance()
{
    wait();
    wait(4);

    while (1) {

        wait();

        bool AESL_timeout = false;
        if (true
            && AESL_mFinishTvOut_res
        ) {
            break;
        }

    }
    wait (1 , SC_PS);
    //////calculate latency/throught
    int AESL_tmp_latthistime;
    int AESL_tmp_lattotal = 0;
    int AESL_tmp_latmax = 0;
    int AESL_tmp_latmin = 0x7fffffff;
    int AESL_tmp_lataver;
    int AESL_tmp_thrthistime;
    int AESL_tmp_thrtotal = 0;
    int AESL_tmp_thrmax = 0;
    int AESL_tmp_thrmin = 0x7fffffff;
    int AESL_tmp_thraver;

    if (AESL_mLatCnterInIdx == 1 || AESL_mLatCnterInIdx == 0 ) {
        AESL_tmp_latmax  = 0;
        AESL_tmp_latmin  = 0;
        AESL_tmp_lataver = 0;
        AESL_tmp_thrmax  = 0;
        AESL_tmp_thrmin  = 0;
        AESL_tmp_thraver = 0;
        AESL_lat_array[0] = 0;
        AESL_thr_array[0] = 0;
    }
    else if (AESL_mLatCnterOutIdx == 1 || AESL_mLatCnterOutIdx == 0 ) {
        AESL_tmp_latmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
        AESL_tmp_latmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
        AESL_tmp_lataver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
        AESL_tmp_thrmax  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
        AESL_tmp_thrmin  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
        AESL_tmp_thraver = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
        AESL_lat_array[0] = AESL_tmp_lataver;
        AESL_thr_array[0] = AESL_tmp_thraver;
    }
    else {
//LATENCY
        for (unsigned AESL_tmp_iii = 0; AESL_tmp_iii < AESL_mLatCnterOutIdx; AESL_tmp_iii++) {
            AESL_tmp_latthistime = AESL_mLatCnterOut[AESL_tmp_iii] - AESL_mLatCnterIn[AESL_tmp_iii];
            if ( AESL_tmp_iii > 0) {
                AESL_tmp_latthistime = (AESL_tmp_latthistime - 1 < 0) ? 0 : (AESL_tmp_latthistime - 1);
            }
            AESL_tmp_lattotal += AESL_tmp_latthistime;
            AESL_lat_array[AESL_tmp_iii]  = AESL_tmp_latthistime;
            if (AESL_tmp_latthistime > AESL_tmp_latmax) AESL_tmp_latmax = AESL_tmp_latthistime;
            if (AESL_tmp_latthistime < AESL_tmp_latmin) AESL_tmp_latmin = AESL_tmp_latthistime;
        }
//II
        for (unsigned AESL_tmp_iii = 0; AESL_tmp_iii < ((AESL_mLatCnterInIdx > 0 ) ? AESL_mLatCnterInIdx - 1 : 0); AESL_tmp_iii++) {
            AESL_tmp_thrthistime = AESL_mLatCnterIn[AESL_tmp_iii + 1] - AESL_mLatCnterIn[AESL_tmp_iii];
            if ( AESL_tmp_iii == 0) {
                AESL_tmp_thrthistime = AESL_tmp_thrthistime + 1;
            }
            AESL_tmp_thrtotal += AESL_tmp_thrthistime;
            AESL_thr_array[AESL_tmp_iii]  = AESL_tmp_thrthistime;
            if (AESL_tmp_thrthistime > AESL_tmp_thrmax) AESL_tmp_thrmax = AESL_tmp_thrthistime;
            if (AESL_tmp_thrthistime < AESL_tmp_thrmin) AESL_tmp_thrmin = AESL_tmp_thrthistime;
        }
        AESL_thr_array[AESL_mLatCnterInIdx - 1]  = 0;
        AESL_tmp_lataver = AESL_tmp_lattotal / (AESL_mLatCnterOutIdx);
        AESL_tmp_thraver = AESL_tmp_thrtotal / (AESL_mLatCnterInIdx - 1);
    }

    ofstream AESL_tmp_result_file(AUTOTB_LAT_RESULT_FILE);
    AESL_tmp_result_file << "$MAX_LATENCY = \"" << AESL_tmp_latmax  << "\"\n";
    AESL_tmp_result_file << "$MIN_LATENCY = \"" << AESL_tmp_latmin  << "\"\n";
    AESL_tmp_result_file << "$AVER_LATENCY = \"" << AESL_tmp_lataver  << "\"\n";
    AESL_tmp_result_file << "$MAX_THROUGHPUT = \"" << AESL_tmp_thrmax << "\"\n";
    AESL_tmp_result_file << "$MIN_THROUGHPUT = \"" << AESL_tmp_thrmin << "\"\n";
    AESL_tmp_result_file << "$AVER_THROUGHPUT = \"" << AESL_tmp_thraver << "\"\n";
    AESL_tmp_result_file.close();
    ofstream AESL_tmp_result_trans_file(AUTOTB_PER_RESULT_TRANS_FILE);
    char s[100] = "";
    sprintf (s,"%20s%16s%16s\n","","latency","interval");
    AESL_tmp_result_trans_file << s ;
    for (int i = 0; i < AESL_mLatCnterOutIdx; i++) {
        sprintf (s,"transaction%8d:%16d%16d\n",i ,AESL_lat_array[i],AESL_thr_array[i]);
        AESL_tmp_result_trans_file << s ;
    }
    AESL_tmp_result_trans_file.close();


}
void AUTOTB_TOP::AESL_proc_ready_cnt()
{
    if(AESL_reset.read() == SC_LOGIC_1) 
    {
        AESL_ready_cnt = 0;
    } else if (AESL_transaction_ready == 1 && AESL_ready_cnt <= AUTOTB_TRANSACTION_NUM) {
        AESL_ready_cnt ++;
    }
}
void AUTOTB_TOP::AESL_proc_initial_ready() {
    wait ();
    AESL_initial_ready = SC_LOGIC_0;
    while(AESL_reset.read() == SC_LOGIC_1)
    {
        wait ();
        wait (10, SC_PS);
    }
    wait ();
    AESL_initial_ready = SC_LOGIC_1;

    wait ();
    AESL_initial_ready = SC_LOGIC_0;
    while (1) wait();
}

void AUTOTB_TOP::AESL_proc_ready_delay() {
    if(AESL_reset.read() == SC_LOGIC_1) 
    {
       AESL_ready_delay = SC_LOGIC_0;
    } else {
       AESL_ready_delay = AESL_ready;
    }
}

void AUTOTB_TOP::AESL_proc_done_delay() {
    if(AESL_reset.read() == SC_LOGIC_1) 
    {
       AESL_done_delay.write(SC_LOGIC_0);
       AESL_done_delay2.write(SC_LOGIC_0);
    } else {
       AESL_done_delay.write(AESL_done.read());
       AESL_done_delay2.write(AESL_done_delay.read());
    }
}

void AUTOTB_TOP::AESL_proc_transaction_ready() {
    AESL_transaction_ready = AESL_initial_ready | AESL_ready_delay;
}

void AUTOTB_TOP::AESL_proc_interface_done() {
    wait();
    AESL_interface_done = SC_LOGIC_0;
    while(AESL_reset.read() == SC_LOGIC_1)
    {
        wait();
        wait(10, SC_PS);
    }
    while (1) {
        wait (1, SC_PS);
        if (AESL_transaction_ready == 1 && AESL_ready_cnt > 1 && AESL_ready_cnt <= AUTOTB_TRANSACTION_NUM)
            AESL_interface_done = SC_LOGIC_1;
        else if(AESL_done_delay == 1 && AESL_done_cnt == AUTOTB_TRANSACTION_NUM)
            AESL_interface_done = SC_LOGIC_1;
        else
            AESL_interface_done = SC_LOGIC_0;
        wait();
    }
}

void AUTOTB_TOP::AESL_proc_transaction_ready_a () {
    AESL_transaction_ready_a = AESL_transaction_ready;
}

void AUTOTB_TOP::AESL_proc_transaction_done_a () {
    AESL_transaction_done_a = AESL_done_delay;
}

void AUTOTB_TOP::AESL_proc_transaction_ready_b () {
    AESL_transaction_ready_b = AESL_transaction_ready;
}

void AUTOTB_TOP::AESL_proc_transaction_done_b () {
    AESL_transaction_done_b = AESL_done_delay;
}

void AUTOTB_TOP::AESL_proc_transaction_ready_res () {
    AESL_transaction_ready_res = AESL_initial_ready | AESL_transaction_done_res;
}

void AUTOTB_TOP::AESL_proc_transaction_done_res () {
    AESL_transaction_done_res = AESL_done_delay;
}

void AUTOTB_TOP::AESL_proc_connection_arraya_dout0() {
  a_q0.write(arraya_dout0);
}

void AUTOTB_TOP::AESL_proc_connection_arrayb_dout0() {
  b_q0.write(arrayb_dout0);
}

void AUTOTB_TOP::AESL_proc_connection_arrayres_din0() {
  arrayres_din0.write(res_d0);
}
void AUTOTB_TOP::AESL_proc_tv_in_a()
{
    string AESL_transIdx;
    unsigned AESL_i = 0;
    wait();
    wait(20, SC_PS);
    string AESL_token;
    AESL_fh.read(AUTOTB_TVIN_a, AESL_token);
    while (AESL_token != "[[[/runtime]]]") {
        if (AESL_token != "[[transaction]]") {
            cerr << "illegal tv format of AUTOTB_TVIN_a , exit!\n";
            AESL_mErrNo++;
            sc_stop();
            return;
        }
        AESL_fh.read(AUTOTB_TVIN_a, AESL_transIdx);
        AESL_fh.read(AUTOTB_TVIN_a, AESL_token);
        
        while (AESL_transaction_ready_a == SC_LOGIC_0) {
            wait();
            wait(20, SC_PS);
        }
        unsigned AESL_i = 0;
        while (AESL_token != "[[/transaction]]"  && AESL_i < 9) {
            sc_lv<8> AESL_tempval =  AESL_token.c_str();
            AESL_inst_a->meminst->mem[AESL_i] = AESL_tempval;
            AESL_fh.read(AUTOTB_TVIN_a, AESL_token);
            AESL_i++;
        }
        while (AESL_token != "[[/transaction]]") {
            AESL_mTvIn >> AESL_token;
        }

        AESL_fh.read(AUTOTB_TVIN_a, AESL_token);
        
        wait();
        
        wait(10, SC_PS);
    }
    while (1) wait();
}

void AUTOTB_TOP::AESL_proc_tv_in_b()
{
    string AESL_transIdx;
    unsigned AESL_i = 0;
    wait();
    wait(20, SC_PS);
    string AESL_token;
    AESL_fh.read(AUTOTB_TVIN_b, AESL_token);
    while (AESL_token != "[[[/runtime]]]") {
        if (AESL_token != "[[transaction]]") {
            cerr << "illegal tv format of AUTOTB_TVIN_b , exit!\n";
            AESL_mErrNo++;
            sc_stop();
            return;
        }
        AESL_fh.read(AUTOTB_TVIN_b, AESL_transIdx);
        AESL_fh.read(AUTOTB_TVIN_b, AESL_token);
        
        while (AESL_transaction_ready_b == SC_LOGIC_0) {
            wait();
            wait(20, SC_PS);
        }
        unsigned AESL_i = 0;
        while (AESL_token != "[[/transaction]]"  && AESL_i < 9) {
            sc_lv<8> AESL_tempval =  AESL_token.c_str();
            AESL_inst_b->meminst->mem[AESL_i] = AESL_tempval;
            AESL_fh.read(AUTOTB_TVIN_b, AESL_token);
            AESL_i++;
        }
        while (AESL_token != "[[/transaction]]") {
            AESL_mTvIn >> AESL_token;
        }

        AESL_fh.read(AUTOTB_TVIN_b, AESL_token);
        
        wait();
        
        wait(10, SC_PS);
    }
    while (1) wait();
}

void AUTOTB_TOP::AESL_proc_tv_in_res()
{
    string AESL_transIdx;
    unsigned AESL_i = 0;
    wait();
    wait(20, SC_PS);
    string AESL_token;
    AESL_fh.read(AUTOTB_TVIN_res, AESL_token);
    while (AESL_token != "[[[/runtime]]]") {
        if (AESL_token != "[[transaction]]") {
            cerr << "illegal tv format of AUTOTB_TVIN_res , exit!\n";
            AESL_mErrNo++;
            sc_stop();
            return;
        }
        AESL_fh.read(AUTOTB_TVIN_res, AESL_transIdx);
        AESL_fh.read(AUTOTB_TVIN_res, AESL_token);
        
        while (AESL_transaction_ready_res == SC_LOGIC_0) {
            wait();
            wait(20, SC_PS);
        }
        unsigned AESL_i = 0;
        while (AESL_token != "[[/transaction]]"  && AESL_i < 9) {
            sc_lv<16> AESL_tempval =  AESL_token.c_str();
            AESL_inst_res->meminst->mem[AESL_i] = AESL_tempval;
            AESL_fh.read(AUTOTB_TVIN_res, AESL_token);
            AESL_i++;
        }
        while (AESL_token != "[[/transaction]]") {
            AESL_mTvIn >> AESL_token;
        }

        AESL_fh.read(AUTOTB_TVIN_res, AESL_token);
        
        wait();
        
        wait(10, SC_PS);
    }
    while (1) wait();
}

void AUTOTB_TOP::AESL_proc_tv_out_res()
{
    wait();

    unsigned AESL_transIdx = 0;
    unsigned AESL_i;
    stringstream AESL_str;

    while (AESL_transIdx < AUTOTB_TRANSACTION_NUM) {
        wait();
        wait(10, SC_PS);

        unsigned AESL_latency = 0;
        bool AESL_timeout = false;
        while (AESL_transaction_done_res.read() != SC_LOGIC_1) {
            AESL_latency++;
            wait();
            wait(10, SC_PS);
        }


        AESL_str.str("");
        AESL_str <<"[[transaction]]" ;
        AESL_str << " " << AESL_transIdx << endl;
        AESL_fh.write(AUTOTB_TVOUT_res_out_wrapc, AESL_str.str());
        AESL_transIdx ++;
        unsigned AESL_i = 0;
        sc_lv<16> AESL_expected;
        while (AESL_i < 9) {
            if (!AESL_timeout) {
                char AESL_szName[1024];
                sprintf(AESL_szName,  "res[%d]",AESL_i);;
                unsigned AESL_wlen =  strlen(AESL_szName);
                string AESL_sphd =  string(AESL_wlen, ' ');
                string argValStr = "X";
                if (AESL_inst_res->meminst->mem[AESL_i].is_01())
                    argValStr = AESL_inst_res->meminst->mem[AESL_i].to_string(SC_HEX);
                if (argValStr == "X") {
                    AESL_str.str("");
                    AESL_str << AESL_inst_res->meminst->mem[AESL_i] << endl;
                    AESL_fh.write(AUTOTB_TVOUT_res_out_wrapc, AESL_str.str());
                } else {
                    AESL_str.str("");
                    AESL_str << argValStr << endl;
                    AESL_fh.write(AUTOTB_TVOUT_res_out_wrapc, AESL_str.str());
                }
            }
            AESL_i++;
        }

            AESL_str.str("");
            AESL_str << "[[/transaction]]" << endl;
            AESL_fh.write(AUTOTB_TVOUT_res_out_wrapc, AESL_str.str());
    }


    AESL_mFinishTvOut_res = true;

    while (1) wait();
}


#if defined(AESL_APATB_EXPORT)
#endif

#if !defined(AESL_APATB_EXPORT)
int sc_main(int ap_argc, char* ap_argv[])
{
    sc_clock clk("clk", 8.000000,SC_NS,0.5,0,SC_NS,false);
    AUTOTB_TOP AUTOTB_TOP_INST("top");

    AUTOTB_TOP_INST.AESL_clock(clk); 

    sc_report_handler::set_actions( SC_ID_LOGIC_X_TO_BOOL_, SC_LOG);
    sc_report_handler::set_actions( SC_ID_VECTOR_CONTAINS_LOGIC_VALUE_, SC_LOG);
    sc_report_handler::set_actions( SC_ID_MORE_THAN_ONE_SIGNAL_DRIVER_, SC_DISPLAY | SC_ABORT);

    sc_report_handler::set_actions("/IEEE_Std_1666/deprecated", SC_DO_NOTHING);
    try {
        sc_start();
    } catch (const sc_report& ex) {
        AUTOTB_TOP_INST.AESL_mErrNo++;
        cout << "\n" << ex.what() << endl;
	  } catch (...) {
        AUTOTB_TOP_INST.AESL_mErrNo++;
	      cout << "\nSystemC unknown internal error.\n";
    }

    return ((AUTOTB_TOP_INST.AESL_mErrNo != 0)? 1: 0);
}
#endif


#ifdef AESL_APATB_EXPORT
SC_MODULE_EXPORT(apatb_matrixmul_top);
#endif

