/*
 * exercise3.c
 *
 *  Created on: 01/05/2015
 *      Author: Kasper
 */

#include "xparameters.h"
#include "xgpio.h"
#include "led_ip.h"
#include "xscutimer.h"

//====================================================

int main(void) {

	// Initialize I/O
	XGpio dip, push;
	int i, psb_check, dip_check;

	xil_printf("-- Start of the Program --\r\n");

	XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID); // Modify this
	XGpio_SetDataDirection(&dip, 1, 0xffffffff);

	XGpio_Initialize(&push, XPAR_BUTTONS_DEVICE_ID); // Modify this
	XGpio_SetDataDirection(&push, 1, 0xffffffff);

	// Initialize Timer
	XScuTimer Timer; /* Cortex A9 SCU Private Timer Instance */
	#define ONE_SECOND 325000000 // half of the CPU clock speed

	// PS Timer related definitions
	XScuTimer_Config *ConfigPtr;
	XScuTimer *TimerInstancePtr = &Timer;
	ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	int Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr, ConfigPtr->BaseAddr);

	if (Status != XST_SUCCESS)
	{
		xil_printf("Timer init() failed\r\n");
		return XST_FAILURE;
	}

	// Load timer with delay in multiple of ONE_SECOND
	XScuTimer_LoadTimer(TimerInstancePtr, ONE_SECOND);
	// Set AutoLoad mode
	XScuTimer_EnableAutoReload(TimerInstancePtr);
	// Start the timer
	XScuTimer_Start(TimerInstancePtr);
	// Check timer expired
	if (XScuTimer_IsExpired(TimerInstancePtr)) {
		// clear status bit
		XScuTimer_ClearInterruptStatus(TimerInstancePtr);
		// Code here
	}
	// Stop the timer
	XScuTimer_Stop(TimerInstancePtr);

	while (1) {
		psb_check = XGpio_DiscreteRead(&push, 1);
		xil_printf("Push Buttons Status %x\r\n", psb_check);
		dip_check = XGpio_DiscreteRead(&dip, 1);
		xil_printf("DIP Switch Status %x\r\n", dip_check);

		// output dip switches value on LED_ip device
		LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0, dip_check);

		for (i = 0; i < 9999999; i++)
			;
	}
}
