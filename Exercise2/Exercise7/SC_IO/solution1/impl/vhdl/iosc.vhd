-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iosc is
port (
    clk : IN STD_LOGIC;
    reset : IN STD_LOGIC;
    ctrl : IN STD_LOGIC_VECTOR (3 downto 0);
    inSwitch : IN STD_LOGIC_VECTOR (3 downto 0);
    outLeds : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of iosc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iosc,hls_ip_2014_4,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.518000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=50,HLS_SYN_LUT=131}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal iosc_second_count_V : STD_LOGIC_VECTOR (3 downto 0);
    signal iosc_second : STD_LOGIC_VECTOR (0 downto 0);
    signal iosc_timerCount_V : STD_LOGIC_VECTOR (31 downto 0);
    signal iosc_ssdm_thread_M_iosThrea_load_fu_131_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal grp_iosc_timerThread_fu_78_iosc_second : STD_LOGIC;
    signal grp_iosc_timerThread_fu_78_iosc_second_ap_vld : STD_LOGIC;
    signal grp_iosc_timerThread_fu_78_iosc_timerCount_V_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_iosc_timerThread_fu_78_iosc_timerCount_V_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_iosc_timerThread_fu_78_iosc_timerCount_V_o_ap_vld : STD_LOGIC;
    signal grp_iosc_iosThread_fu_104_ctrl : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_iosc_iosThread_fu_104_inSwitch : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_iosc_iosThread_fu_104_outLeds : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_iosc_iosThread_fu_104_outLeds_ap_vld : STD_LOGIC;
    signal grp_iosc_iosThread_fu_104_iosc_switchs_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_iosc_iosThread_fu_104_iosc_switchs_V_ap_vld : STD_LOGIC;
    signal grp_iosc_iosThread_fu_104_iosc_switchs_in_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_iosc_iosThread_fu_104_iosc_switchs_in_V_ap_vld : STD_LOGIC;
    signal grp_iosc_iosThread_fu_104_iosc_ctrl_in_V : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_iosc_iosThread_fu_104_iosc_ctrl_in_V_ap_vld : STD_LOGIC;
    signal grp_iosc_iosThread_fu_104_iosc_second_count_V_i : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_iosc_iosThread_fu_104_iosc_second_count_V_o : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_iosc_iosThread_fu_104_iosc_second_count_V_o_ap_vld : STD_LOGIC;
    signal grp_iosc_iosThread_fu_104_iosc_second : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_62 : BOOLEAN;

    component iosc_timerThread IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        iosc_second : OUT STD_LOGIC;
        iosc_second_ap_vld : OUT STD_LOGIC;
        iosc_timerCount_V_i : IN STD_LOGIC_VECTOR (31 downto 0);
        iosc_timerCount_V_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        iosc_timerCount_V_o_ap_vld : OUT STD_LOGIC );
    end component;


    component iosc_iosThread IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ctrl : IN STD_LOGIC_VECTOR (3 downto 0);
        inSwitch : IN STD_LOGIC_VECTOR (3 downto 0);
        outLeds : OUT STD_LOGIC_VECTOR (3 downto 0);
        outLeds_ap_vld : OUT STD_LOGIC;
        iosc_switchs_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        iosc_switchs_V_ap_vld : OUT STD_LOGIC;
        iosc_switchs_in_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        iosc_switchs_in_V_ap_vld : OUT STD_LOGIC;
        iosc_ctrl_in_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        iosc_ctrl_in_V_ap_vld : OUT STD_LOGIC;
        iosc_second_count_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
        iosc_second_count_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
        iosc_second_count_V_o_ap_vld : OUT STD_LOGIC;
        iosc_second : IN STD_LOGIC );
    end component;



begin
    grp_iosc_timerThread_fu_78 : component iosc_timerThread
    port map (
        ap_clk => clk,
        ap_rst => reset,
        iosc_second => grp_iosc_timerThread_fu_78_iosc_second,
        iosc_second_ap_vld => grp_iosc_timerThread_fu_78_iosc_second_ap_vld,
        iosc_timerCount_V_i => grp_iosc_timerThread_fu_78_iosc_timerCount_V_i,
        iosc_timerCount_V_o => grp_iosc_timerThread_fu_78_iosc_timerCount_V_o,
        iosc_timerCount_V_o_ap_vld => grp_iosc_timerThread_fu_78_iosc_timerCount_V_o_ap_vld);

    grp_iosc_iosThread_fu_104 : component iosc_iosThread
    port map (
        ap_clk => clk,
        ap_rst => reset,
        ctrl => grp_iosc_iosThread_fu_104_ctrl,
        inSwitch => grp_iosc_iosThread_fu_104_inSwitch,
        outLeds => grp_iosc_iosThread_fu_104_outLeds,
        outLeds_ap_vld => grp_iosc_iosThread_fu_104_outLeds_ap_vld,
        iosc_switchs_V => grp_iosc_iosThread_fu_104_iosc_switchs_V,
        iosc_switchs_V_ap_vld => grp_iosc_iosThread_fu_104_iosc_switchs_V_ap_vld,
        iosc_switchs_in_V => grp_iosc_iosThread_fu_104_iosc_switchs_in_V,
        iosc_switchs_in_V_ap_vld => grp_iosc_iosThread_fu_104_iosc_switchs_in_V_ap_vld,
        iosc_ctrl_in_V => grp_iosc_iosThread_fu_104_iosc_ctrl_in_V,
        iosc_ctrl_in_V_ap_vld => grp_iosc_iosThread_fu_104_iosc_ctrl_in_V_ap_vld,
        iosc_second_count_V_i => grp_iosc_iosThread_fu_104_iosc_second_count_V_i,
        iosc_second_count_V_o => grp_iosc_iosThread_fu_104_iosc_second_count_V_o,
        iosc_second_count_V_o_ap_vld => grp_iosc_iosThread_fu_104_iosc_second_count_V_o_ap_vld,
        iosc_second => grp_iosc_iosThread_fu_104_iosc_second);





    -- iosc_second assign process. --
    iosc_second_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((ap_const_logic_1 = grp_iosc_timerThread_fu_78_iosc_second_ap_vld)) then 
                iosc_second <= (0=>grp_iosc_timerThread_fu_78_iosc_second, others=>'-');
            end if; 
        end if;
    end process;


    -- iosc_second_count_V assign process. --
    iosc_second_count_V_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((ap_const_logic_1 = grp_iosc_iosThread_fu_104_iosc_second_count_V_o_ap_vld)) then 
                iosc_second_count_V <= grp_iosc_iosThread_fu_104_iosc_second_count_V_o;
            end if; 
        end if;
    end process;


    -- iosc_timerCount_V assign process. --
    iosc_timerCount_V_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((ap_const_logic_1 = grp_iosc_timerThread_fu_78_iosc_timerCount_V_o_ap_vld)) then 
                iosc_timerCount_V <= grp_iosc_timerThread_fu_78_iosc_timerCount_V_o;
            end if; 
        end if;
    end process;


    -- outLeds assign process. --
    outLeds_assign_proc : process(clk)
    begin
        if (clk'event and clk =  '1') then
            if ((ap_const_logic_1 = grp_iosc_iosThread_fu_104_outLeds_ap_vld)) then 
                outLeds <= grp_iosc_iosThread_fu_104_outLeds;
            end if; 
        end if;
    end process;

    ap_CS_fsm <= ap_const_lv2_0;

    -- ap_sig_bdd_62 assign process. --
    ap_sig_bdd_62_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_62 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_62)
    begin
        if (ap_sig_bdd_62) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_iosc_iosThread_fu_104_ctrl <= ctrl;
    grp_iosc_iosThread_fu_104_inSwitch <= inSwitch;
    grp_iosc_iosThread_fu_104_iosc_second <= iosc_second(0);
    grp_iosc_iosThread_fu_104_iosc_second_count_V_i <= iosc_second_count_V;
    grp_iosc_timerThread_fu_78_iosc_timerCount_V_i <= iosc_timerCount_V;
    iosc_ssdm_thread_M_iosThrea_load_fu_131_p1 <= ap_const_lv1_0;
end behav;
