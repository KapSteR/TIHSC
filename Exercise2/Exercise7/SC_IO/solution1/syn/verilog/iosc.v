// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iosc,hls_ip_2014_4,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.518000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=50,HLS_SYN_LUT=131}" *)

module iosc (
        clk,
        reset,
        ctrl,
        inSwitch,
        outLeds
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_true = 1'b1;

input   clk;
input   reset;
input  [3:0] ctrl;
input  [3:0] inSwitch;
output  [3:0] outLeds;

reg[3:0] outLeds;
reg   [3:0] iosc_second_count_V;
reg   [0:0] iosc_second;
reg   [31:0] iosc_timerCount_V;
wire   [0:0] iosc_ssdm_thread_M_iosThrea_load_fu_131_p1;
wire   [1:0] ap_CS_fsm;
wire    grp_iosc_timerThread_fu_78_iosc_second;
wire    grp_iosc_timerThread_fu_78_iosc_second_ap_vld;
wire   [31:0] grp_iosc_timerThread_fu_78_iosc_timerCount_V_i;
wire   [31:0] grp_iosc_timerThread_fu_78_iosc_timerCount_V_o;
wire    grp_iosc_timerThread_fu_78_iosc_timerCount_V_o_ap_vld;
wire   [3:0] grp_iosc_iosThread_fu_104_ctrl;
wire   [3:0] grp_iosc_iosThread_fu_104_inSwitch;
wire   [3:0] grp_iosc_iosThread_fu_104_outLeds;
wire    grp_iosc_iosThread_fu_104_outLeds_ap_vld;
wire   [3:0] grp_iosc_iosThread_fu_104_iosc_switchs_V;
wire    grp_iosc_iosThread_fu_104_iosc_switchs_V_ap_vld;
wire   [3:0] grp_iosc_iosThread_fu_104_iosc_switchs_in_V;
wire    grp_iosc_iosThread_fu_104_iosc_switchs_in_V_ap_vld;
wire   [3:0] grp_iosc_iosThread_fu_104_iosc_ctrl_in_V;
wire    grp_iosc_iosThread_fu_104_iosc_ctrl_in_V_ap_vld;
wire   [3:0] grp_iosc_iosThread_fu_104_iosc_second_count_V_i;
wire   [3:0] grp_iosc_iosThread_fu_104_iosc_second_count_V_o;
wire    grp_iosc_iosThread_fu_104_iosc_second_count_V_o_ap_vld;
wire    grp_iosc_iosThread_fu_104_iosc_second;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_62;


iosc_timerThread grp_iosc_timerThread_fu_78(
    .ap_clk( clk ),
    .ap_rst( reset ),
    .iosc_second( grp_iosc_timerThread_fu_78_iosc_second ),
    .iosc_second_ap_vld( grp_iosc_timerThread_fu_78_iosc_second_ap_vld ),
    .iosc_timerCount_V_i( grp_iosc_timerThread_fu_78_iosc_timerCount_V_i ),
    .iosc_timerCount_V_o( grp_iosc_timerThread_fu_78_iosc_timerCount_V_o ),
    .iosc_timerCount_V_o_ap_vld( grp_iosc_timerThread_fu_78_iosc_timerCount_V_o_ap_vld )
);

iosc_iosThread grp_iosc_iosThread_fu_104(
    .ap_clk( clk ),
    .ap_rst( reset ),
    .ctrl( grp_iosc_iosThread_fu_104_ctrl ),
    .inSwitch( grp_iosc_iosThread_fu_104_inSwitch ),
    .outLeds( grp_iosc_iosThread_fu_104_outLeds ),
    .outLeds_ap_vld( grp_iosc_iosThread_fu_104_outLeds_ap_vld ),
    .iosc_switchs_V( grp_iosc_iosThread_fu_104_iosc_switchs_V ),
    .iosc_switchs_V_ap_vld( grp_iosc_iosThread_fu_104_iosc_switchs_V_ap_vld ),
    .iosc_switchs_in_V( grp_iosc_iosThread_fu_104_iosc_switchs_in_V ),
    .iosc_switchs_in_V_ap_vld( grp_iosc_iosThread_fu_104_iosc_switchs_in_V_ap_vld ),
    .iosc_ctrl_in_V( grp_iosc_iosThread_fu_104_iosc_ctrl_in_V ),
    .iosc_ctrl_in_V_ap_vld( grp_iosc_iosThread_fu_104_iosc_ctrl_in_V_ap_vld ),
    .iosc_second_count_V_i( grp_iosc_iosThread_fu_104_iosc_second_count_V_i ),
    .iosc_second_count_V_o( grp_iosc_iosThread_fu_104_iosc_second_count_V_o ),
    .iosc_second_count_V_o_ap_vld( grp_iosc_iosThread_fu_104_iosc_second_count_V_o_ap_vld ),
    .iosc_second( grp_iosc_iosThread_fu_104_iosc_second )
);



/// iosc_second assign process. ///
always @ (posedge clk)
begin : ap_ret_iosc_second
    if ((ap_const_logic_1 == grp_iosc_timerThread_fu_78_iosc_second_ap_vld)) begin
        iosc_second <= grp_iosc_timerThread_fu_78_iosc_second;
    end
end

/// iosc_second_count_V assign process. ///
always @ (posedge clk)
begin : ap_ret_iosc_second_count_V
    if ((ap_const_logic_1 == grp_iosc_iosThread_fu_104_iosc_second_count_V_o_ap_vld)) begin
        iosc_second_count_V <= grp_iosc_iosThread_fu_104_iosc_second_count_V_o;
    end
end

/// iosc_timerCount_V assign process. ///
always @ (posedge clk)
begin : ap_ret_iosc_timerCount_V
    if ((ap_const_logic_1 == grp_iosc_timerThread_fu_78_iosc_timerCount_V_o_ap_vld)) begin
        iosc_timerCount_V <= grp_iosc_timerThread_fu_78_iosc_timerCount_V_o;
    end
end

/// outLeds assign process. ///
always @ (posedge clk)
begin : ap_ret_outLeds
    if ((ap_const_logic_1 == grp_iosc_iosThread_fu_104_outLeds_ap_vld)) begin
        outLeds <= grp_iosc_iosThread_fu_104_outLeds;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_62)
begin
    if (ap_sig_bdd_62) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end
assign ap_CS_fsm = ap_const_lv2_0;

/// ap_sig_bdd_62 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_62 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign grp_iosc_iosThread_fu_104_ctrl = ctrl;
assign grp_iosc_iosThread_fu_104_inSwitch = inSwitch;
assign grp_iosc_iosThread_fu_104_iosc_second = iosc_second;
assign grp_iosc_iosThread_fu_104_iosc_second_count_V_i = iosc_second_count_V;
assign grp_iosc_timerThread_fu_78_iosc_timerCount_V_i = iosc_timerCount_V;
assign iosc_ssdm_thread_M_iosThrea_load_fu_131_p1 = ap_const_lv1_0;


endmodule //iosc

