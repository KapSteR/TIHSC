-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iosc_timerThread is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    iosc_second : OUT STD_LOGIC;
    iosc_second_ap_vld : OUT STD_LOGIC;
    iosc_timerCount_V_i : IN STD_LOGIC_VECTOR (31 downto 0);
    iosc_timerCount_V_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    iosc_timerCount_V_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of iosc_timerThread is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2FAF080 : STD_LOGIC_VECTOR (31 downto 0) := "00000010111110101111000010000000";

    signal tmp_4_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_125 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal iosc_timerCount_V_assign_fu_112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st2_fsm_1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                tmp_4_reg_125 <= tmp_4_fu_119_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_34 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- iosc_second assign process. --
    iosc_second_assign_proc : process(tmp_4_fu_119_p2, tmp_4_reg_125, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_4_reg_125 = ap_const_lv1_0)))) then 
            iosc_second <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_4_fu_119_p2 = ap_const_lv1_0))) then 
            iosc_second <= ap_const_logic_0;
        else 
            iosc_second <= 'X';
        end if; 
    end process;


    -- iosc_second_ap_vld assign process. --
    iosc_second_ap_vld_assign_proc : process(tmp_4_fu_119_p2, tmp_4_reg_125, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_4_reg_125 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_4_fu_119_p2 = ap_const_lv1_0)))) then 
            iosc_second_ap_vld <= ap_const_logic_1;
        else 
            iosc_second_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    iosc_timerCount_V_assign_fu_112_p2 <= std_logic_vector(unsigned(iosc_timerCount_V_i) + unsigned(ap_const_lv32_1));

    -- iosc_timerCount_V_o assign process. --
    iosc_timerCount_V_o_assign_proc : process(tmp_4_reg_125, ap_sig_cseq_ST_st2_fsm_1, iosc_timerCount_V_assign_fu_112_p2, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_4_reg_125 = ap_const_lv1_0)))) then 
            iosc_timerCount_V_o <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            iosc_timerCount_V_o <= iosc_timerCount_V_assign_fu_112_p2;
        else 
            iosc_timerCount_V_o <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- iosc_timerCount_V_o_ap_vld assign process. --
    iosc_timerCount_V_o_ap_vld_assign_proc : process(tmp_4_reg_125, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_4_reg_125 = ap_const_lv1_0))))) then 
            iosc_timerCount_V_o_ap_vld <= ap_const_logic_1;
        else 
            iosc_timerCount_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_119_p2 <= "1" when (iosc_timerCount_V_i = ap_const_lv32_2FAF080) else "0";
end behav;
